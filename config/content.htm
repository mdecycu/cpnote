<h1>About</h1>
<p><a href="https://mde.tw/cpnote">https://mde.tw/cpnote</a></p>
<p>這是國立虎尾科技大學機械設計工程系大一計算機程式課堂筆記網站。</p>
<p>課程內容將從基本的 C 程式語言練習起，主要目的是讓學員了解編譯程式語言的特性及基本用法。</p>
<p>C 程式語言範例，包括如何利用數值分析流程，解出 mass-spring-damper 系統運動程式，並將質量的運動位移及速度，以 Gnuplot 圖表列出。</p>
<p>接著將數值分析運算移至瀏覽器時，要求學員試著將 C 程式改寫為 Javascript， 並加上 plotly.js 進行繪圖。</p>
<p>之後在 plotly.js 的運算繪架構下，嘗試利用 Brython 取代 Javascript。</p>
<p>最後，希望透過一組包含網路前後端的 Python 語法程式範例，說明計算機程式語言在現階段機電資整合設計中的相關應用。</p>
<p>下載可攜程式套件:</p>
<p style="padding-left: 30px;"><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EbxsXK5kkU1ImhJ_HcYPnTcB9MboGQcfs6FuojXRPlhInA?e=wzLQFt">basic_portable_python.7z</a> (下載 15MB, 解開後 55MB)</p>
<p style="padding-left: 30px;">下載 <a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EQTW-mq62DpFtw5It9ao-PIBPXW7z5z8oVsW5gd8zbDXOQ?e=q6gHgf">Portable_2023_fall_1.3g_5g.7z</a> (需要下載密碼)</p>
<p style="padding-left: 30px;">也可以直接使用電腦輔助設計室中 C:\Portable_2023_fall 目錄中的檔案</p><h1>課程評分</h1>
<p>課程評分:</p>
<p style="padding-left: 30px;">線上測驗、期中網站與簡報、期末網站與簡報.</p>
<p>線上測驗:</p>
<p style="padding-left: 30px;">建立帳號後 (<span style="background-color: #ffff99;">請將密碼寫入手機的備忘錄</span>), 每週不定時進行.</p>
<p>期中網站評分與簡報:</p>
<p style="padding-left: 30px;">期中考前兩週開始進行.</p>
<p>期末網站評分與簡報:</p>
<p style="padding-left: 30px;">期末考前兩週開始進行.</p>
<p>期中成績計算:</p>
<p style="padding-left: 30px;">期中考與之前各週線上測驗成績平均</p>
<p>學期成績計算:</p>
<p style="padding-left: 30px;">(期中成績與之後各週線上測驗成績平均)*60%+(期中網站與簡報成績)*20%+(期末網站與簡報成績)*20%</p>
<h1>課程主題</h1>
<ol>
<li>認識數位環境與資源</li>
<li>工程師的計算機程式能力</li>
<li>開發程式工具 (解決特定問題)</li>
<li>課程總結</li>
</ol>
<h2>數位環境與資源</h2>
<p>1. 認識數位環境與資源</p>
<p style="padding-left: 30px;">企業所提供的數位資源:</p>
<p style="padding-left: 60px;"><a href="https://chat.openai.com/">ChatGPT</a> (Google Bard and Perplexity AI)</p>
<p style="padding-left: 60px;"><a href="https://www.autodesk.com/education/edu-software/overview">AutoDesk</a> (Dassault Solidworks and CATIA)</p>
<p style="padding-left: 60px;"><a href="https://resources.sw.siemens.com/zh-TW/download-solid-edge-student-edition">Siemens Solid Edge</a> (NX)</p>
<p style="padding-left: 90px;"><a href="https://www.sw.siemens.com/en-US/academic/engineering-student-resources/engineering-student-software/">Engineering Student Softwares</a></p>
<p style="padding-left: 60px;"><a href="https://www.ptc.com/en/products/education/free-software/creo-college-download">PTC Creo</a></p>
<p style="padding-left: 90px;"><a href="https://www.onshape.com/en/education/">Onshape for Education</a></p>
<p style="padding-left: 60px;"><a href="https://www.ansys.com/academic/students">Ansys</a> (Comsol and SIMULIA Abaqus)</p>
<p style="padding-left: 60px;"><a href="https://www.microsoft.com/en-us/education/products/office">Office 365 for Education</a></p>
<p style="padding-left: 60px;"><a href="https://github.com">Github</a></p>
<p style="padding-left: 90px;"><a href="https://classroom.github.com">Github Classroom</a></p>
<p style="padding-left: 60px;"><a href="https://replit.com">Replit</a></p>
<p style="padding-left: 60px;"><a href="https://robodk.com/">RoboDK</a></p>
<p style="padding-left: 60px;"><a href="https://www.coppeliarobotics.com/">CoppeliaSim</a></p>
<p style="padding-left: 60px;"><a href="https://www.cyberbotics.com/">Webots</a></p>
<p style="padding-left: 30px;">學校所提供的數位資源</p>
<p style="padding-left: 60px;">軟體 <span>(</span><span>使用校園網路或 VPN 下載)</span></p>
<p style="padding-left: 90px;"><a href="https://software.nfu.edu.tw/Windows/tw/Win_10_22H2.4_64BIT_Ch.ISO">Windows 10 64位元 22H2.4</a></p>
<p style="padding-left: 90px;"><a href="https://software.nfu.edu.tw/Windows/tw/Win_11_22H2.6_64BIT_Ch.ISO">Windows 11 64位元 22H2.6</a></p>
<p style="padding-left: 90px;"><a href="https://software.nfu.edu.tw/KMS/windows_kms.bat">windows_kms.bat</a></p>
<p style="padding-left: 90px;"><span><a href="https://software.nfu.edu.tw/Office/tw/Office_Pro_2019_64Ch.iso">Office 2019 64位元</a></span></p>
<p style="padding-left: 120px;"><a href="https://software.nfu.edu.tw/KMS/Office_2019_KMS.bat">office_2019_kms.bat</a></p>
<p style="padding-left: 90px;"><span><a href="https://software.nfu.edu.tw/Office/tw/Office_Pro_Plus_2016_64Ch.iso">Office 2016 64位元</a></span></p>
<p style="padding-left: 120px;"><span><a href="https://software.nfu.edu.tw/KMS/Office_2016_KMS.bat">office_2016_kms.bat</a></span></p>
<p style="padding-left: 90px;"><a href="https://software.nfu.edu.tw/Developer/Visual%20Studio/en/Visual_Studio_Pro_2015.zip">Visual Studio Pro 2015 英文版</a></p>
<p style="padding-left: 90px;"><a href="https://software.nfu.edu.tw/MATLAB/R2023a_windows.zip">MATLAB for Windows 2023a 64位元</a></p>
<p style="padding-left: 120px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-3189-0">Introduction to MATLAB for Engineers and Scientists</a></p>
<p style="padding-left: 120px;"><a href="https://link.springer.com/book/10.1007/978-1-4612-1754-1">Introduction to Partial Differential Equations with MATLAB</a></p>
<p style="padding-left: 90px;"><a href="https://software.nfu.edu.tw/MATLAB/R2022alinux.zip">MATLAB for Linux 2022a 64位元</a></p>
<p style="padding-left: 120px;"><a href="https://software.nfu.edu.tw/files/matlab_Final.pdf">MATLAB 安裝說明</a></p>
<p style="padding-left: 120px;"><a href="https://software.nfu.edu.tw/files/matlab_ENG_final.pdf">MATLAB Guideline</a></p>
<p style="padding-left: 60px;">電子資源</p>
<p style="padding-left: 90px;">數位學習網: <a href="https://www.nfu.edu.tw/zh/elearning">https://www.nfu.edu.tw/zh/elearning</a> </p>
<p style="padding-left: 90px;">eBooks and Journals: <a href="https://link.springer.com">https://link.springer.com</a> </p>
<p style="padding-left: 120px;"><a href="https://link.springer.com/books/i/65">Introducing eBooks</a></p>
<p style="padding-left: 30px;">綜合工程第一館網路配置</p>
<p style="padding-left: 60px;">機械設計工程系</p>
<p style="padding-left: 90px;">IPv4 網段 (140.130.17.0/24)</p>
<p style="padding-left: 120px;">Gateway: 140.130.17.254</p>
<p style="padding-left: 120px;">DNS: 140.130.17.3</p>
<p style="padding-left: 90px;">IPv6 網段 (2001:288:6004:17::/32)</p>
<p style="padding-left: 120px;">Gateway: 2001:288:6004:17::254</p>
<p style="padding-left: 120px;">DNS: 2001:288:6004:17::3</p>
<p style="padding-left: 60px;">有線網路</p>
<p style="padding-left: 60px;">無線網路</p>
<p style="padding-left: 30px;">綜一館電腦資源</p>
<p style="padding-left: 60px;">可借用電腦教室</p>
<p style="padding-left: 90px;">磁區設定與所安裝軟體</p>
<p style="padding-left: 60px;">工作站中的伺服器</p>
<p style="padding-left: 90px;"><a href="https://s1511.cycu.org">https://s1511.cycu.org</a> </p>
<p style="padding-left: 120px;"><a href="https://link.springer.com/book/10.1007/978-0-230-80245-2">Introducing UNIX and Linux</a></p>
<p style="padding-left: 30px;">電腦輔助設計室</p>
<p style="padding-left: 60px;">兩種不同規格的電腦</p>
<p style="padding-left: 30px;">協同產品設計室</p>
<p style="padding-left: 60px;">虛實手足球系統</p>
<p style="padding-left: 90px;">Arduino</p>
<p style="padding-left: 90px;">CoppeliaSim</p>
<p style="padding-left: 90px;">RoboDK</p>
<p style="padding-left: 60px;">手足球檯</p>
<p style="padding-left: 90px;">Rasperry Pi</p>
<p style="padding-left: 90px;">Webcam</p><h3>上課系統</h3>
<p style="padding-left: 30px;"><a href="https://chat.openai.com/">ChatGPT</a></p>
<p style="padding-left: 30px;"><a href="https://www.microsoft.com/en-us/education/products/office">Office 365 for Education</a></p>
<p style="padding-left: 30px;"><a href="https://github.com">Github</a></p>
<p style="padding-left: 60px;"><a href="https://classroom.github.com">Github Classroom</a></p>
<p style="padding-left: 30px;"><a href="https://replit.com">Replit</a></p>
<p style="padding-left: 60px;"><a href="https://www.youtube.com/watch?v=D4f7_lPwXtE">Welcome to Replit</a></p>
<h4>進階自學系統</h4>
<p style="padding-left: 30px;"><a href="https://www.coppeliarobotics.com/coppeliaSim">CoppeliaSim</a></p>
<p style="padding-left: 60px;">2023.03 最新版本為 4.5.1</p>
<p style="padding-left: 60px;">4.4.0 則發布於 2022.09</p>
<p style="padding-left: 60px;"><a href="https://github.com/CoppeliaRobotics/zmqRemoteApi">ZeroMQ Remote API for CoppeliaSim</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/CoppeliaRobotics/simWS">WebSocket plugin for CoppeliaSim</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/CoppeliaRobotics/threejsFrontend">three.js Frontend</a></p>
<p style="padding-left: 30px;"><a href="https://robodk.com/">RoboDK</a></p>
<p style="padding-left: 60px;">2023.07 最新的版本為<span> </span><a href="https://robodk.com/downloads/Install-RoboDK-64-v5.6.2.exe">Download 5.6.2</a></p>
<p style="padding-left: 60px;"><a href="https://robodk.com/downloads-v/Install-RoboDK-64-v5.2.2.exe">Download 5.2.2</a><span> </span>則發布於 2021.03.22</p>
<p style="padding-left: 60px;">RoboDK 源自<span> </span><a href="https://www.parallemic.org/RoKiSim.html">https://www.parallemic.org/RoKiSim.html</a></p>
<p style="padding-left: 60px;">在計算機程式課程中, 我們可以利用 RoboDK 中的 Robot 控制來練習 Python 各種語法的應用, 其中也將牽涉一些線性代數 (Linear Algebra,<span> </span><a href="https://realpython.com/python-linear-algebra/">1</a>,<span> </span><a href="https://pythonnumericalmethods.berkeley.edu/notebooks/chapter14.01-Basics-of-Linear-Algebra.html">2</a>) 與幾何 (Geometry,<span> </span><a href="https://open.umn.edu/opentextbooks/textbooks/508">1</a>,<span> </span><a href="https://open.umn.edu/opentextbooks/subjects/geometry-and-trigonometry">2</a>,<span> </span><a href="https://www.lakelandschools.org/lakelandhigh/academics/geometry_online_text_book.php">3</a>) 的應用.</p><h2>程式能力</h2>
<p>2. 工程師的計算機程式能力</p>
<p style="padding-left: 30px;">C, Javascript, Brython, Python</p>
<p style="padding-left: 30px;">Windows 64 位元操作系統下的工具:</p>
<p style="padding-left: 60px;"><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EbxsXK5kkU1ImhJ_HcYPnTcB9MboGQcfs6FuojXRPlhInA?e=wzLQFt">basic_portable_python.7z</a> (下載 15MB, 解開後 55MB)</p>
<p style="padding-left: 60px;">下載 <a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EQTW-mq62DpFtw5It9ao-PIBPXW7z5z8oVsW5gd8zbDXOQ?e=q6gHgf">Portable_2023_fall_1.3g_5g.7z</a> (需要下載密碼)</p>
<p style="padding-left: 30px;">Github Classroom 作業倉儲:</p>
<p style="padding-left: 60px;">從 github classroom 取得個人課程倉儲</p>
<p style="padding-left: 90px;">將以 <a href="https://github.com/mdecycu/cmsite">https://github.com/mdecycu/cmsite</a> 作為個人作業起始 template</p>
<p>以下為簡單的線上 Python 程式執行區:</p>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>
<h3>程式語言</h3>
<p><span>機械設計工程師在甚麼情況下需要使用 C 解決問題?</span></p>
<p><span>機械設計工程師在甚麼情況下需要使用 Javascript 解決問題?</span></p>
<p><span>Brython 程式語言一般被用在那些情況下?</span></p>
<p><span>機械設計工程師在甚麼情況下需要使用 Python 解決問題?</span></p>
<h3>ANSI C</h3>
<p><a href="https://nfuedu-my.sharepoint.com/:b:/g/personal/yen_nfu_edu_tw/EWd1cR2zOStOjVSduSw6pQMBv1fB6tWu-P9qfVH2YxbDPw?e=uOZW7N">jsliu_c_programming.pdf</a> (需要下載密碼)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-1371-1">2015 Learn to Program with C</a> (經由校園網路或 VPN 下載)</p>
<p><a href="https://link.springer.com/book/10.1007/978-3-030-50750-3">2020 Computer Programming in C for Begineers</a> (經由校園網路或 VPN 下載)</p>
<ol>
<li>ANSI C 程式語言所謂具有可攜性, 是甚麼意思?</li>
<li>ANSI C 被定位為低階程式語言, 是甚麼意思?</li>
<li>可以用 ANSIＣ加上Gnuplot 繪圖, 解一個質量與兩個並聯的彈簧與阻尼器連接到牆上, 且起始條件為執行被往後拉 0.2 m 後放開的常微分方程式, 並劃出該質量被釋放之後 10 秒之內的位移以及速度圖嗎?</li>
<li>請詳細解釋所謂的 Euler's Method, 並且能不能將 Gnuplot 繪圖指令直接與 C 程式合併, 執行程式後直接產生位移與速度 png 圖?</li>
<li>能不能將 gnuplot 繪圖程式碼與 Euler's Method 解微分方程式的程式碼結合在一起, 執行時直接就能繪出質量的位移與速度圖, 而且請在繪圖時直接使用位於 Y:\ 的 wqy-microhei.ttc 中文字形, 否則無法在圖面上顯示出正確的中文.</li>
<li>請將質量的位移以及速度繪製在同一個 png 圖檔上</li>
</ol>
<p>利用 Euler's Method 解 mass-spring-damper 系統的運動方程式, 並採 ANSI C 與 Gnuplot 執行運算及繪圖.</p>
<p><a href="/downloads/euler_mass_spring_damper_gnuplot.7z">euler_mass_spring_damper_gnuplot.7z</a></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() {
    // 開啟文件以寫入位移和速度數據
    FILE *outputFile = fopen("motion_data.txt", "w");
    if (!outputFile) {
        fprintf(stderr, "無法創建數據文件。\n");
        return 1;
    }

    // 模擬運動 10 秒並計算位移和速度，同時將數據寫入文件
    double x = 0.2;  // 初始位移
    double v = 0.0;  // 初始速度
    double dt = 0.01; // 時間步長
    double t = 0.0;  // 時間

    while (t &lt;= 10.0) {
        double acceleration = (-10.0 * x - 0.5 * v) / 1.0; // 這裡修改了系統的參數
        v += acceleration * dt;
        x += v * dt;

        fprintf(outputFile, "%lf %lf %lf\n", t, x, v);

        t += dt;
    }

    // 關閉數據文件
    fclose(outputFile);

    // 使用popen啟動Gnuplot進程
    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");
    if (!gnuplotPipe) {
        fprintf(stderr, "無法啟動Gnuplot。\n");
        return 1;
    }

    // 使用Gnuplot繪圖指令，指定字型文件和輸出PNG
    fprintf(gnuplotPipe, "set terminal pngcairo enhanced font 'Y:/wqy-microhei.ttc,10' size 800,400\n");
    fprintf(gnuplotPipe, "set output 'motion_plot.png'\n");
    fprintf(gnuplotPipe, "set title '位移和速度 vs. 時間'\n");
    fprintf(gnuplotPipe, "set xlabel '時間 (s)'\n");
    fprintf(gnuplotPipe, "set ylabel '位移 (m)'\n");
    fprintf(gnuplotPipe, "plot 'motion_data.txt' using 1:2 with lines lw 2 title '位移', \
                             'motion_data.txt' using 1:3 with lines lw 2 title '速度'\n");

    // 關閉Gnuplot進程
    fprintf(gnuplotPipe, "exit\n");
    pclose(gnuplotPipe);

    return 0;
}
</pre>
<p>運算結果:</p>
<p><img alt="" height="200" src="/images/Euler_Method__mass_spring_damper_motion_plot.png" width="400"/></p>
<p>假如拿掉 Damping:</p>
<p><img alt="" height="200" src="/images/Euler_Method_mass_spring_motion_plot.png" width="400"/></p>
<p>假如將 C 改寫為 Javascript, 並且使用 plotly.js 取代 Gnuplot, 可使用下列 html + Javascript 執行運算:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;script src="https://cdn.plot.ly/plotly-latest.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id="plotDamping"&gt;&lt;/div&gt;
    &lt;div id="plotNoDamping"&gt;&lt;/div&gt;

    &lt;script&gt;
        // Function to simulate motion using Euler's method
        function simulateMotion(MASS, SPRING_K, DAMPING_C, containerId) {
            // Define simulation parameters
            const totalTime = 10.0;
            const dt = 0.01;
            
            // Initialize data arrays
            const timeData = [];
            const displacementData = [];
            const velocityData = [];

            // Initial conditions
            let t = 0.0;
            let x = 0.2;
            let v = 0.0;

            while (t &lt;= totalTime) {
                timeData.push(t);
                displacementData.push(x);
                velocityData.push(v);

                // Calculate acceleration based on parameters
                const acceleration = (-SPRING_K * x - DAMPING_C * v) / MASS;
                v += acceleration * dt;
                x += v * dt;

                t += dt;
            }

            // Plot the data
            const displacementTrace = {
                x: timeData,
                y: displacementData,
                mode: 'lines',
                name: 'Displacement'
            };

            const velocityTrace = {
                x: timeData,
                y: velocityData,
                mode: 'lines',
                name: 'Velocity'
            };

            const layout = {
                title: `Displacement and Velocity vs. Time (${containerId === 'plotDamping' ? 'With Damping' : 'No Damping'})`,
                xaxis: { title: 'Time (s)' },
                yaxis: { title: 'Displacement (m) / Velocity' }
            };

            const plotData = [displacementTrace, velocityTrace];

            Plotly.newPlot(containerId, plotData, layout);
        }

        // Simulate motion with damping
        simulateMotion(1.0, 10.0, 0.5, 'plotDamping');

        // Simulate motion without damping
        simulateMotion(1.0, 10.0, 0.0, 'plotNoDamping');
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>
<p>模擬運算結果為:</p>
<p></p>
<p>
<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</p>
<div id="plotDamping"></div>
<div id="plotNoDamping"></div>
<p>
<script>
// Function to simulate motion using Euler's method
    function simulateMotion(MASS, SPRING_K, DAMPING_C, containerId) {
        // Define simulation parameters
        const totalTime = 10.0;
        const dt = 0.01;
        
        // Initialize data arrays
        const timeData = [];
        const displacementData = [];
        const velocityData = [];

        // Initial conditions
        let t = 0.0;
        let x = 0.2;
        let v = 0.0;

        while (t <= totalTime) {
            timeData.push(t);
            displacementData.push(x);
            velocityData.push(v);

            // Calculate acceleration based on parameters
            const acceleration = (-SPRING_K * x - DAMPING_C * v) / MASS;
            v += acceleration * dt;
            x += v * dt;

            t += dt;
        }

        // Plot the data
        const displacementTrace = {
            x: timeData,
            y: displacementData,
            mode: 'lines',
            name: 'Displacement'
        };

        const velocityTrace = {
            x: timeData,
            y: velocityData,
            mode: 'lines',
            name: 'Velocity'
        };

        const layout = {
            title: `Displacement and Velocity vs. Time (${containerId === 'plotDamping' ? 'With Damping' : 'No Damping'})`,
            xaxis: { title: 'Time (s)' },
            yaxis: { title: 'Displacement (m) / Velocity' }
        };

        const plotData = [displacementTrace, velocityTrace];

        Plotly.newPlot(containerId, plotData, layout);
    }

    // Simulate motion with damping
    simulateMotion(1.0, 10.0, 0.5, 'plotDamping');

    // Simulate motion without damping
    simulateMotion(1.0, 10.0, 0.0, 'plotNoDamping');
</script>
</p>
<p>假如採用 C 以 Runge-Kutta 解 mass-spring-damper 系統運動模擬:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* Runge Kutta for a set of first order differential equations */
// http://mde.tw/cad2020/content/W7.html
  
#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
  
#define N 2 /* number of first order equations */
#define dist 0.01 /* stepsize in t*/
#define MAX 10.0 /* max for t */
  
FILE *output; /* internal filename */
FILE *output1; /* internal filename */
// 利用 pipe 呼叫 gnuplot 繪圖
FILE *pipe;
  
void runge4(double x, double y[], double step); /* Runge-Kutta function */
double f(double x, double y[], int i); /* function for derivatives */
  
void main(){
  
  double t, y[N];
  int j;
  
  output=fopen("osc.dat", "w"); /* external filename */
  output1=fopen("osc1.dat", "w"); /* external filename */
  
  y[0]=0.2; /* initial position */
  y[1]=0.0; /* initial velocity */
  
  //fprintf(output, "0\t%f\n", y[0]);
  
  for (j=1; j*dist&lt;=MAX ;j++) /* time loop */{
  
    t=j*dist;
    runge4(t, y, dist);
    fprintf(output, "%f\t%f\n", t, y[0]);
    fprintf(output1, "%f\t%f\n", t, y[1]);
  }
  
  fclose(output);
  fclose(output1);
  
  pipe = popen("gnuplot -persist","w");
  //fprintf(pipe,"set term png enhanced font \"v:/fireflysung.ttf\" 18 \n");
  fprintf(pipe,"set term png enhanced font \"y:/wqy-microhei.ttc\" 18 \n");
  //fprintf(pipe,"set yrange [68:70]\n");
  fprintf(pipe,"set output \"rk_mass_spring_damper.png\"\n");
  fprintf(pipe, "plot \"osc.dat\" title \"位移\" with lines, \"osc1.dat\" title \"速度\" with lines\n");
  fprintf(pipe,"quit\n");
 
  fprintf(pipe,"quit\n");
  pclose(pipe);
}
  
void runge4(double x, double y[], double step){
  
  double h=step/2.0, /* the midpoint */
  t1[N], t2[N], t3[N], /* temporary storage arrays */
  k1[N], k2[N], k3[N],k4[N]; /* for Runge-Kutta */
  int i;
  
  for (i=0;i&lt;N;i++){
  
    t1[i]=y[i]+0.5*(k1[i]=step*f(x,y,i));
  }
  
  for (i=0;i&lt;N;i++){
  
    t2[i]=y[i]+0.5*(k2[i]=step*f(x+h, t1, i));
  }
  
  for (i=0;i&lt;N;i++){
  
    t3[i]=y[i]+ (k3[i]=step*f(x+h, t2, i));
  }
  
  for (i=0;i&lt;N;i++){
  
    k4[i]= step*f(x+step, t3, i);
  }
  
  for (i=0;i&lt;N;i++){
  
    y[i]+=(k1[i]+2*k2[i]+2*k3[i]+k4[i])/6.0;
  }
}
  
double f(double x, double y[], int i){
  
  if (i==0)
    x=y[1]; /* derivative of first equation */
  if (i==1)
    x=-10*y[0]-0.5*y[1];
  return x;
}</pre>
<p>模擬結果為:</p>
<p><img alt="" height="300" src="/images/rk_mass_spring_damper.png" width="400"/></p>
<p>假如拿掉 Damper, 則結果為:</p>
<p><img alt="" height="300" src="/images/rk_mass_spring.png" width="400"/></p>
<p>假如將 Runge-Kutta C 改寫為 Javascript, 並在網頁中直接以 plotly.js 畫圖:</p>
<!-- 引入 Plotly.js -->
<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
<!-- 用於顯示運動繪圖的 div -->
<div id="rkmotionPlot"></div>
<script>
const N = 2; // number of first order equations
const dist = 0.01; // stepsize in t
const MAX = 10.0; // max for t

let outputDataDamping = []; // to store data for displacement with damping
let output1DataDamping = []; // to store data for velocity with damping
let outputDataNoDamping = []; // to store data for displacement without damping
let output1DataNoDamping = []; // to store data for velocity without damping

function runge4(x, y, step, damping = false) {
    let h = step / 2.0;
    let t1 = [];
    let t2 = [];
    let t3 = [];
    let k1 = [];
    let k2 = [];
    let k3 = [];
    let k4 = [];

    for (let i = 0; i < N; i++) {
        t1[i] = y[i] + 0.5 * (k1[i] = step * f(x, y, i, damping));
    }

    for (let i = 0; i < N; i++) {
        t2[i] = y[i] + 0.5 * (k2[i] = step * f(x + h, t1, i, damping));
    }

    for (let i = 0; i < N; i++) {
        t3[i] = y[i] + (k3[i] = step * f(x + h, t2, i, damping));
    }

    for (let i = 0; i < N; i++) {
        k4[i] = step * f(x + step, t3, i, damping);
    }

    for (let i = 0; i < N; i++) {
        y[i] += (k1[i] + 2 * k2[i] + 2 * k3[i] + k4[i]) / 6.0;
    }
}

function f(x, y, i, damping = false) {
    if (i === 0) {
        return y[1]; // derivative of first equation (velocity)
    }
    if (i === 1) {
        if (damping) {
            return -10 * y[0] - 0.5 * y[1]; // with damping
        } else {
            return -10 * y[0]; // without damping
        }
    }
    return 0;
}

function simulateMotion() {
    let t = 0.0;
    let yDamping = [0.2, 0.0]; // initial position and velocity with damping
    let yNoDamping = [0.2, 0.0]; // initial position and velocity without damping

    for (let j = 1; j * dist <= MAX; j++) {
        t = j * dist;
        runge4(t, yDamping, dist, true); // simulate with damping
        runge4(t, yNoDamping, dist, false); // simulate without damping
        outputDataDamping.push([t, yDamping[0]]);
        output1DataDamping.push([t, yDamping[1]]);
        outputDataNoDamping.push([t, yNoDamping[0]]);
        output1DataNoDamping.push([t, yNoDamping[1]]);
    }

    // Plot the data using Plotly.js
    plotMotion();
}

function plotMotion() {
    // Create traces for displacement and velocity with damping
    const displacementTraceDamping = {
        x: outputDataDamping.map((dataPoint) => dataPoint[0]),
        y: outputDataDamping.map((dataPoint) => dataPoint[1]),
        mode: 'lines',
        name: 'Displacement (Damping)',
    };

    const velocityTraceDamping = {
        x: output1DataDamping.map((dataPoint) => dataPoint[0]),
        y: output1DataDamping.map((dataPoint) => dataPoint[1]),
        mode: 'lines',
        name: 'Velocity (Damping)',
    };

    // Create traces for displacement and velocity without damping
    const displacementTraceNoDamping = {
        x: outputDataNoDamping.map((dataPoint) => dataPoint[0]),
        y: outputDataNoDamping.map((dataPoint) => dataPoint[1]),
        mode: 'lines',
        name: 'Displacement (No Damping)',
    };

    const velocityTraceNoDamping = {
        x: output1DataNoDamping.map((dataPoint) => dataPoint[0]),
        y: output1DataNoDamping.map((dataPoint) => dataPoint[1]),
        mode: 'lines',
        name: 'Velocity (No Damping)',
    };

    const data = [
        displacementTraceDamping,
        velocityTraceDamping,
        displacementTraceNoDamping,
        velocityTraceNoDamping,
    ];

    // Layout configuration
    const layout = {
        title: 'Displacement and Velocity vs. Time',
        xaxis: {
            title: 'Time (s)',
        },
        yaxis: {
            title: 'Displacement / Velocity',
        },
    };

    // Plot the graph
    Plotly.newPlot('rkmotionPlot', data, layout);
}

// Call the simulation function when the page loads
window.onload = simulateMotion;
</script>
<p>上列 Javascript 模擬運算的超文件為:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 引入 Plotly.js --&gt;
&lt;script src="https://cdn.plot.ly/plotly-latest.min.js"&gt;&lt;/script&gt;
&lt;!-- 用於顯示運動繪圖的 div --&gt;
&lt;div id="rkmotionPlot"&gt;&lt;/div&gt;
&lt;script&gt;
const N = 2; // number of first order equations
const dist = 0.01; // stepsize in t
const MAX = 10.0; // max for t

let outputDataDamping = []; // to store data for displacement with damping
let output1DataDamping = []; // to store data for velocity with damping
let outputDataNoDamping = []; // to store data for displacement without damping
let output1DataNoDamping = []; // to store data for velocity without damping

function runge4(x, y, step, damping = false) {
    let h = step / 2.0;
    let t1 = [];
    let t2 = [];
    let t3 = [];
    let k1 = [];
    let k2 = [];
    let k3 = [];
    let k4 = [];

    for (let i = 0; i &lt; N; i++) {
        t1[i] = y[i] + 0.5 * (k1[i] = step * f(x, y, i, damping));
    }

    for (let i = 0; i &lt; N; i++) {
        t2[i] = y[i] + 0.5 * (k2[i] = step * f(x + h, t1, i, damping));
    }

    for (let i = 0; i &lt; N; i++) {
        t3[i] = y[i] + (k3[i] = step * f(x + h, t2, i, damping));
    }

    for (let i = 0; i &lt; N; i++) {
        k4[i] = step * f(x + step, t3, i, damping);
    }

    for (let i = 0; i &lt; N; i++) {
        y[i] += (k1[i] + 2 * k2[i] + 2 * k3[i] + k4[i]) / 6.0;
    }
}

function f(x, y, i, damping = false) {
    if (i === 0) {
        return y[1]; // derivative of first equation (velocity)
    }
    if (i === 1) {
        if (damping) {
            return -10 * y[0] - 0.5 * y[1]; // with damping
        } else {
            return -10 * y[0]; // without damping
        }
    }
    return 0;
}

function simulateMotion() {
    let t = 0.0;
    let yDamping = [0.2, 0.0]; // initial position and velocity with damping
    let yNoDamping = [0.2, 0.0]; // initial position and velocity without damping

    for (let j = 1; j * dist &lt;= MAX; j++) {
        t = j * dist;
        runge4(t, yDamping, dist, true); // simulate with damping
        runge4(t, yNoDamping, dist, false); // simulate without damping
        outputDataDamping.push([t, yDamping[0]]);
        output1DataDamping.push([t, yDamping[1]]);
        outputDataNoDamping.push([t, yNoDamping[0]]);
        output1DataNoDamping.push([t, yNoDamping[1]]);
    }

    // Plot the data using Plotly.js
    plotMotion();
}

function plotMotion() {
    // Create traces for displacement and velocity with damping
    const displacementTraceDamping = {
        x: outputDataDamping.map((dataPoint) =&gt; dataPoint[0]),
        y: outputDataDamping.map((dataPoint) =&gt; dataPoint[1]),
        mode: 'lines',
        name: 'Displacement (Damping)',
    };

    const velocityTraceDamping = {
        x: output1DataDamping.map((dataPoint) =&gt; dataPoint[0]),
        y: output1DataDamping.map((dataPoint) =&gt; dataPoint[1]),
        mode: 'lines',
        name: 'Velocity (Damping)',
    };

    // Create traces for displacement and velocity without damping
    const displacementTraceNoDamping = {
        x: outputDataNoDamping.map((dataPoint) =&gt; dataPoint[0]),
        y: outputDataNoDamping.map((dataPoint) =&gt; dataPoint[1]),
        mode: 'lines',
        name: 'Displacement (No Damping)',
    };

    const velocityTraceNoDamping = {
        x: output1DataNoDamping.map((dataPoint) =&gt; dataPoint[0]),
        y: output1DataNoDamping.map((dataPoint) =&gt; dataPoint[1]),
        mode: 'lines',
        name: 'Velocity (No Damping)',
    };

    const data = [
        displacementTraceDamping,
        velocityTraceDamping,
        displacementTraceNoDamping,
        velocityTraceNoDamping,
    ];

    // Layout configuration
    const layout = {
        title: 'Displacement and Velocity vs. Time',
        xaxis: {
            title: 'Time (s)',
        },
        yaxis: {
            title: 'Displacement / Velocity',
        },
    };

    // Plot the graph
    Plotly.newPlot('rkmotionPlot', data, layout);
}

// Call the simulation function when the page loads
window.onload = simulateMotion;
&lt;/script&gt;</pre>
<p></p>
<p>最後, 將 Javascript 改為可以讓使用者選擇模擬參數以及起始條件:</p>
<p></p>
<div><label for="mass">質量 (m):</label> <input id="mass" type="number" value="1.0"/></div>
<div><label for="springConstant">彈簧常數 (k):</label> <input id="springConstant" type="number" value="10.0"/></div>
<div><label for="dampingCoefficient">阻尼係數 (c):</label> <input id="dampingCoefficient" type="number" value="0.5"/></div>
<div><label for="initialDisplacement">初始位移 (x0):</label> <input id="initialDisplacement" type="number" value="0.2"/></div>
<div><label for="initialVelocity">初始速度 (v0):</label> <input id="initialVelocity" type="number" value="0.0"/></div>
<div><label for="endTime">模擬時間 (endTime):</label> <input id="endTime" type="number" value="10.0"/></div>
<p><button id="withDamping">模擬運動 (有阻尼)</button> <button id="withoutDamping">模擬運動 (無阻尼)</button></p>
<!-- 請注意!! 每一個 plotly.js 繪圖必須有各自的 id 名稱 -->
<div id="rkmotionPlot2"></div>
<script>
// 函數包裝，避免變數衝突
    (function () {
        const N = 2; // number of first order equations
        const dist = 0.01; // stepsize in t
        //const MAX = 10.0; // max for t
        const endTime = parseFloat(document.getElementById('endTime').value);

        // for debuging
        const mass = parseFloat(document.getElementById('mass').value);
        const springConstant = parseFloat(document.getElementById('springConstant').value);
        const dampingCoefficient = parseFloat(document.getElementById('dampingCoefficient').value);
        const initialDisplacement = parseFloat(document.getElementById('initialDisplacement').value);
        const initialVelocity = parseFloat(document.getElementById('initialVelocity').value);
        /*
            console.log('Mass:', mass);
            console.log('Spring Constant:', springConstant);
            console.log('Damping Coefficient:', dampingCoefficient);
            console.log('Initial Displacement:', initialDisplacement);
            console.log('Initial Velocity:', initialVelocity);
         */


        let outputDataWithDamping = []; // to store data for displacement and velocity with damping
        let outputDataWithoutDamping = []; // to store data for displacement and velocity without damping

        function runge4(x, y, step, damping = false) {
            let h = step / 2.0;
            let t1 = [];
            let t2 = [];
            let t3 = [];
            let k1 = [];
            let k2 = [];
            let k3 = [];
            let k4 = [];

            for (let i = 0; i < N; i++) {
                t1[i] = y[i] + 0.5 * (k1[i] = step * f(x, y, i, damping));
            }

            for (let i = 0; i < N; i++) {
                t2[i] = y[i] + 0.5 * (k2[i] = step * f(x + h, t1, i, damping));
            }

            for (let i = 0; i < N; i++) {
                t3[i] = y[i] + (k3[i] = step * f(x + h, t2, i, damping));
            }

            for (let i = 0; i < N; i++) {
                k4[i] = step * f(x + step, t3, i, damping);
            }

            for (let i = 0; i < N; i++) {
                y[i] += (k1[i] + 2 * k2[i] + 2 * k3[i] + k4[i]) / 6.0;
            }
        }

        function f(x, y, i, damping = false) {
            if (i === 0) {
                return y[1]; // derivative of first equation (velocity)
            }
            if (i === 1) {
                if (damping) {
                    return (-springConstant * y[0] - dampingCoefficient * y[1])/mass; // with damping
                } else {
                    return (-springConstant * y[0])/mass; // without damping
                }
            }
            return 0;
        }

        function simulateMotionWithDamping() {
            let t = 0.0;
            let y = [
                parseFloat(document.getElementById('initialDisplacement').value),
                parseFloat(document.getElementById('initialVelocity').value)
            ];

            outputDataWithDamping = []; // Clear previous data
            simulateMotion(t, y, true); // Simulate with damping
        // for debuging, yes we got the values
        //console.log('outputDataWithDamping:', outputDataWithDamping); 
            plotMotion(true); // Plot with damping
        }

        function simulateMotionWithoutDamping() {
            let t = 0.0;
            let y = [
                parseFloat(document.getElementById('initialDisplacement').value),
                parseFloat(document.getElementById('initialVelocity').value)
            ];

            outputDataWithoutDamping = []; // Clear previous data
            simulateMotion(t, y, false); // Simulate without damping
        // for debuging, we got the values
        //console.log('outputDataWithoutDamping:', outputDataWithoutDamping); 
            plotMotion(false); // Plot without damping
        }

        // for debuging
        function simulateMotion(t, y, damping = false) {
            for (let j = 1; j * dist <= endTime; j++) {
                t = j * dist;
                runge4(t, y, dist, damping);
                if (damping) {
                    outputDataWithDamping.push([t, y[0], y[1]]);
                } else {
                    outputDataWithoutDamping.push([t, y[0], y[1]]);
                }

                // Log the data for debugging
                //console.log('t:', t);
                //console.log('y:', y);
            }
                // we do get the array values
                //console.log('outputDataWithDamping:', outputDataWithDamping);
                //console.log('outputDataWithoutDamping:', outputDataWithoutDamping); 
        }


        function plotMotion(damping = false) {
            let data = [];
            if (damping) {
                // Create traces for displacement and velocity with damping
                data.push({
                    x: outputDataWithDamping.map((dataPoint) => dataPoint[0]),
                    y: outputDataWithDamping.map((dataPoint) => dataPoint[1]),
                    mode: 'lines',
                    name: 'Displacement (Damping)',
                });
                data.push({
                    x: outputDataWithDamping.map((dataPoint) => dataPoint[0]),
                    y: outputDataWithDamping.map((dataPoint) => dataPoint[2]),
                    mode: 'lines',
                    name: 'Velocity (Damping)',
                });
            } else {
                // Create traces for displacement and velocity without damping
                data.push({
                    x: outputDataWithoutDamping.map((dataPoint) => dataPoint[0]),
                    y: outputDataWithoutDamping.map((dataPoint) => dataPoint[1]),
                    mode: 'lines',
                    name: 'Displacement (No Damping)',
                });
                data.push({
                    x: outputDataWithoutDamping.map((dataPoint) => dataPoint[0]),
                    y: outputDataWithoutDamping.map((dataPoint) => dataPoint[2]),
                    mode: 'lines',
                    name: 'Velocity (No Damping)',
                });
            }

            // Layout configuration
            const layout = {
                title: 'Displacement and Velocity vs. Time',
                xaxis: {
                    title: 'Time (s)',
                },
                yaxis: {
                    title: 'Displacement / Velocity',
                },
            };

            // Plot the graph
            Plotly.newPlot('rkmotionPlot2', data, layout);
        }

        // for debuging
        //console.log(outputDataWithDamping);
        //console.log(outputDataWithoutDamping);

        // Call the simulation function when the page loads
        //simulateMotionWithDamping(); // Initial simulation with damping
        // Attach an event listener to the button
        document.getElementById("withDamping").addEventListener("click", function () {
            //console.log("Button with damping clicked.");
            simulateMotionWithDamping();
        });

        document.getElementById("withoutDamping").addEventListener("click", function () {
            //console.log("Button without damping clicked.");
            simulateMotionWithoutDamping();
        });

    })();
</script>
<p>上列可輸入模擬參數與起始條件的 html 程式碼:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;div&gt;&lt;label for="mass"&gt;質量 (m):&lt;/label&gt; &lt;input id="mass" type="number" value="1.0"&gt;&lt;/div&gt;
&lt;div&gt;&lt;label for="springConstant"&gt;彈簧常數 (k):&lt;/label&gt; &lt;input id="springConstant" type="number" value="10.0"&gt;&lt;/div&gt;
&lt;div&gt;&lt;label for="dampingCoefficient"&gt;阻尼係數 (c):&lt;/label&gt; &lt;input id="dampingCoefficient" type="number" value="0.5"&gt;&lt;/div&gt;
&lt;div&gt;&lt;label for="initialDisplacement"&gt;初始位移 (x0):&lt;/label&gt; &lt;input id="initialDisplacement" type="number" value="0.2"&gt;&lt;/div&gt;
&lt;div&gt;&lt;label for="initialVelocity"&gt;初始速度 (v0):&lt;/label&gt; &lt;input id="initialVelocity" type="number" value="0.0"&gt;&lt;/div&gt;
    
&lt;div&gt;&lt;label for="endTime"&gt;模擬時間 (endTime):&lt;/label&gt; &lt;input id="endTime" type="number" value="10.0"&gt;&lt;/div&gt;
    
&lt;p&gt;&lt;button id="withDamping"&gt;模擬運動 (有阻尼)&lt;/button&gt; &lt;button id="withoutDamping"&gt;模擬運動 (無阻尼)&lt;/button&gt;&lt;/p&gt;
&lt;!-- 請注意!! 每一個 plotly.js 繪圖必須有各自的 id 名稱 --&gt;
&lt;div id="rkmotionPlot2"&gt;&lt;/div&gt;
&lt;script&gt;// &lt;![CDATA[
// 函數包裝，避免變數衝突
    (function () {
        const N = 2; // number of first order equations
        const dist = 0.01; // stepsize in t
        //const MAX = 10.0; // max for t
        const endTime = parseFloat(document.getElementById('endTime').value);

        // for debuging
        const mass = parseFloat(document.getElementById('mass').value);
        const springConstant = parseFloat(document.getElementById('springConstant').value);
        const dampingCoefficient = parseFloat(document.getElementById('dampingCoefficient').value);
        const initialDisplacement = parseFloat(document.getElementById('initialDisplacement').value);
        const initialVelocity = parseFloat(document.getElementById('initialVelocity').value);
        /*
            console.log('Mass:', mass);
            console.log('Spring Constant:', springConstant);
            console.log('Damping Coefficient:', dampingCoefficient);
            console.log('Initial Displacement:', initialDisplacement);
            console.log('Initial Velocity:', initialVelocity);
         */


        let outputDataWithDamping = []; // to store data for displacement and velocity with damping
        let outputDataWithoutDamping = []; // to store data for displacement and velocity without damping

        function runge4(x, y, step, damping = false) {
            let h = step / 2.0;
            let t1 = [];
            let t2 = [];
            let t3 = [];
            let k1 = [];
            let k2 = [];
            let k3 = [];
            let k4 = [];

            for (let i = 0; i &lt; N; i++) {
                t1[i] = y[i] + 0.5 * (k1[i] = step * f(x, y, i, damping));
            }

            for (let i = 0; i &lt; N; i++) {
                t2[i] = y[i] + 0.5 * (k2[i] = step * f(x + h, t1, i, damping));
            }

            for (let i = 0; i &lt; N; i++) {
                t3[i] = y[i] + (k3[i] = step * f(x + h, t2, i, damping));
            }

            for (let i = 0; i &lt; N; i++) {
                k4[i] = step * f(x + step, t3, i, damping);
            }

            for (let i = 0; i &lt; N; i++) {
                y[i] += (k1[i] + 2 * k2[i] + 2 * k3[i] + k4[i]) / 6.0;
            }
        }

        function f(x, y, i, damping = false) {
            if (i === 0) {
                return y[1]; // derivative of first equation (velocity)
            }
            if (i === 1) {
                if (damping) {
                    return (-springConstant * y[0] - dampingCoefficient * y[1])/mass; // with damping
                } else {
                    return (-springConstant * y[0])/mass; // without damping
                }
            }
            return 0;
        }

        function simulateMotionWithDamping() {
            let t = 0.0;
            let y = [
                parseFloat(document.getElementById('initialDisplacement').value),
                parseFloat(document.getElementById('initialVelocity').value)
            ];

            outputDataWithDamping = []; // Clear previous data
            simulateMotion(t, y, true); // Simulate with damping
        // for debuging, yes we got the values
        //console.log('outputDataWithDamping:', outputDataWithDamping); 
            plotMotion(true); // Plot with damping
        }

        function simulateMotionWithoutDamping() {
            let t = 0.0;
            let y = [
                parseFloat(document.getElementById('initialDisplacement').value),
                parseFloat(document.getElementById('initialVelocity').value)
            ];

            outputDataWithoutDamping = []; // Clear previous data
            simulateMotion(t, y, false); // Simulate without damping
        // for debuging, we got the values
        //console.log('outputDataWithoutDamping:', outputDataWithoutDamping); 
            plotMotion(false); // Plot without damping
        }

        // for debuging
        function simulateMotion(t, y, damping = false) {
            for (let j = 1; j * dist &lt;= endTime; j++) {
                t = j * dist;
                runge4(t, y, dist, damping);
                if (damping) {
                    outputDataWithDamping.push([t, y[0], y[1]]);
                } else {
                    outputDataWithoutDamping.push([t, y[0], y[1]]);
                }

                // Log the data for debugging
                //console.log('t:', t);
                //console.log('y:', y);
            }
                // we do get the array values
                //console.log('outputDataWithDamping:', outputDataWithDamping);
                //console.log('outputDataWithoutDamping:', outputDataWithoutDamping); 
        }


        function plotMotion(damping = false) {
            let data = [];
            if (damping) {
                // Create traces for displacement and velocity with damping
                data.push({
                    x: outputDataWithDamping.map((dataPoint) =&gt; dataPoint[0]),
                    y: outputDataWithDamping.map((dataPoint) =&gt; dataPoint[1]),
                    mode: 'lines',
                    name: 'Displacement (Damping)',
                });
                data.push({
                    x: outputDataWithDamping.map((dataPoint) =&gt; dataPoint[0]),
                    y: outputDataWithDamping.map((dataPoint) =&gt; dataPoint[2]),
                    mode: 'lines',
                    name: 'Velocity (Damping)',
                });
            } else {
                // Create traces for displacement and velocity without damping
                data.push({
                    x: outputDataWithoutDamping.map((dataPoint) =&gt; dataPoint[0]),
                    y: outputDataWithoutDamping.map((dataPoint) =&gt; dataPoint[1]),
                    mode: 'lines',
                    name: 'Displacement (No Damping)',
                });
                data.push({
                    x: outputDataWithoutDamping.map((dataPoint) =&gt; dataPoint[0]),
                    y: outputDataWithoutDamping.map((dataPoint) =&gt; dataPoint[2]),
                    mode: 'lines',
                    name: 'Velocity (No Damping)',
                });
            }

            // Layout configuration
            const layout = {
                title: 'Displacement and Velocity vs. Time',
                xaxis: {
                    title: 'Time (s)',
                },
                yaxis: {
                    title: 'Displacement / Velocity',
                },
            };

            // Plot the graph
            Plotly.newPlot('rkmotionPlot2', data, layout);
        }

        // for debuging
        //console.log(outputDataWithDamping);
        //console.log(outputDataWithoutDamping);

        // Call the simulation function when the page loads
        //simulateMotionWithDamping(); // Initial simulation with damping
        // Attach an event listener to the button
        document.getElementById("withDamping").addEventListener("click", function () {
            //console.log("Button with damping clicked.");
            simulateMotionWithDamping();
        });

        document.getElementById("withoutDamping").addEventListener("click", function () {
            //console.log("Button without damping clicked.");
            simulateMotionWithoutDamping();
        });

    })();
// ]]&gt;&lt;/script&gt;</pre>
<p></p>
<p>Question: 如何讓模擬變數表單值變更後, 無需重新 refresh 頁面即可繪出運算結果?</p><h3>on_linux</h3>
<p><img alt="" height="601" src="/images/Replit_c_on_linux.png" width="800"/></p><h3>on_windows</h3>
<p>何謂編譯?</p>
<p>利用 Tiny C Compiler 編譯</p>
<p>利用 MSYS2 中的 GNU C Compiler 編譯</p>
<p>利用 Visual Studio C Compiler 編譯</p><h2>開發工具</h2>
<p>3. 開發程式工具 (解決特定問題)</p>
<p>References:</p>
<p style="padding-left: 30px;"><a href="https://www.codecademy.com/resources/blog/20-code-challenges/">https://www.codecademy.com/resources/blog/20-code-challenges/</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-projects-for-beginners/">https://www.freecodecamp.org/news/python-projects-for-beginners/</a> </p><h3>程式專案</h3>
<p><span>機械設計工程師專業的計算機程式初學者被要求必須透過開發一組程式來解決問題, 比較適合朝那些方向進行此一專案?</span></p>
<h4><span>初階 - 中階</span></h4>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-projects-for-beginners/">https://www.freecodecamp.org/news/python-projects-for-beginners/</a> </p>
<p style="padding-left: 30px;"><span></span></p>
<h4>進階自學系統</h4>
<p style="padding-left: 30px;"><a href="https://www.coppeliarobotics.com/coppeliaSim">CoppeliaSim</a></p>
<p style="padding-left: 60px;">2023.03 最新版本為 4.5.1</p>
<p style="padding-left: 60px;">4.4.0 則發布於 2022.09</p>
<p style="padding-left: 60px;"><a href="https://github.com/CoppeliaRobotics/zmqRemoteApi">ZeroMQ Remote API for CoppeliaSim</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/CoppeliaRobotics/simWS">WebSocket plugin for CoppeliaSim</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/CoppeliaRobotics/threejsFrontend">three.js Frontend</a></p>
<p style="padding-left: 30px;"><a href="https://robodk.com/">RoboDK</a></p>
<p style="padding-left: 60px;">2023.07 最新的版本為<span> </span><a href="https://robodk.com/downloads/Install-RoboDK-64-v5.6.2.exe">Download 5.6.2</a></p>
<p style="padding-left: 60px;"><a href="https://robodk.com/downloads-v/Install-RoboDK-64-v5.2.2.exe">Download 5.2.2</a><span> </span>則發布於 2021.03.22</p>
<p style="padding-left: 60px;">RoboDK 源自<span> </span><a href="https://www.parallemic.org/RoKiSim.html">https://www.parallemic.org/RoKiSim.html</a></p>
<p style="padding-left: 60px;">在計算機程式課程中, 我們可以利用 RoboDK 中的 Robot 控制來練習 Python 各種語法的應用, 其中也將牽涉一些線性代數 (Linear Algebra,<span> </span><a href="https://realpython.com/python-linear-algebra/">1</a>,<span> </span><a href="https://pythonnumericalmethods.berkeley.edu/notebooks/chapter14.01-Basics-of-Linear-Algebra.html">2</a>) 與幾何 (Geometry,<span> </span><a href="https://open.umn.edu/opentextbooks/textbooks/508">1</a>,<span> </span><a href="https://open.umn.edu/opentextbooks/subjects/geometry-and-trigonometry">2</a>,<span> </span><a href="https://www.lakelandschools.org/lakelandhigh/academics/geometry_online_text_book.php">3</a>) 的應用.</p>
<h3>課程座次</h3>
<p>2023.09.11 從 <a href="https://qry.nfu.edu.tw/teacher.php?selyr=1121&amp;teacher=%E5%9A%B4%E5%AE%B6%E9%8A%98">112 學年度第一學期教師授課表</a>中, 擷取各班修課名單如下:</p>
<p><a href="/downloads/cp2023_a_studno.txt">cp2023_a_studno.txt</a></p>
<p><a href="/downloads/cp2023_b_studno.txt">cp2023_b_studno.txt</a></p>
<p><a href="/downloads/cad2023_a_studno.txt">cad2023_a_studno.txt</a></p>
<p><a href="/downloads/cad2023_b_studno.txt">cad2023_b_studno.txt</a></p>
<p>若以 Python 讀取上列學員名單, 並依照順序排入電腦輔助設計室後, 可得到各班在開學週時的座位表:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">with open("cp2023_a_studno.txt", encoding="utf-8") as file:
    data = file.read().splitlines()
#print(data)
# Define the number of elements to print in each row
elements_per_row = 9
# Iterate through the list and print elements
for i, item in enumerate(data, 1):
    print(item, end='\t')  # Print the element followed by a tab character
    if i % elements_per_row == 0:
        # If we've printed 9 elements, start a new line
        print()
    
    
</pre>
<p></p><h2>課程總結</h2>
<p>4. 課程總結</p>
<p>錄製簡報影片</p>
<p style="padding-left: 30px;">mp4</p>
<p>編寫總結報告</p>
<p style="padding-left: 30px;">pdf</p>
<p>將課程摘要納入個人領英</p>
<p style="padding-left: 30px;"><a href="https://www.linkedin.com/">https://www.linkedin.com/</a></p>
<h1>QandA</h1>
<p>如何利用 Github 建立網站?</p>
<p><button id="myButton">Click me</button></p>
<script>
(function () {
    // Your big anonymous function

    function myFunction() {
        // Your function logic here
        alert("Button clicked!");
    }

    // Attach an event listener to the button
    document.getElementById("myButton").addEventListener("click", myFunction);
})();
</script><h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>