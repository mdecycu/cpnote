<h1>About</h1>
<p><a href="https://mde.tw/cpnote">https://mde.tw/cpnote</a>, 若 s1511 伺服器提供服務, 經由 IPv6 可連線 <a href="https://s1511.cycu.org/~pj2022/cpnote">https://s1511.cycu.org/~pj2022/cpnote</a>.</p>
<p>這是國立虎尾科技大學 (National Formosa University, Taiwan) 機械設計工程系大一計算機程式課堂筆記網站。</p>
<p>課程內容將從基本的 C 程式語言練習起，主要目的是讓學員了解編譯程式語言的特性及基本用法。</p>
<p>C 程式語言範例，包括如何利用數值分析流程，解出 mass-spring-damper 系統運動程式，並將質量的運動位移及速度，以 Gnuplot 圖表列出。</p>
<p>接著將數值分析運算移至瀏覽器時，要求學員試著將 C 程式改寫為 Javascript， 並加上 plotly.js 進行繪圖。</p>
<p>之後在 plotly.js 的運算繪架構下，嘗試利用 Brython 取代 Javascript。</p>
<p>最後，希望透過一組包含網路前後端的 Python 語法程式範例，說明計算機程式語言在現階段機電資整合設計中的相關應用。</p>
<p>下載可攜程式套件:</p>
<p style="padding-left: 30px;"><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EbxsXK5kkU1ImhJ_HcYPnTcB9MboGQcfs6FuojXRPlhInA?e=wzLQFt">basic_portable_python.7z</a> (下載 15MB, 解開後 55MB)</p>
<p style="padding-left: 30px;">下載 <a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EQTW-mq62DpFtw5It9ao-PIBPXW7z5z8oVsW5gd8zbDXOQ?e=q6gHgf">Portable_2023_fall_1.3g_5g.7z</a> (需要下載密碼)</p>
<p style="padding-left: 30px;">也可以直接使用電腦輔助設計室中 C:\Portable_2023_fall 目錄中的檔案</p><h2>s1511</h2>
<p>2022.08.30 Replit 趁 Heroku <a href="https://blog.heroku.com/next-chapter">中止提供免費帳號</a>時, 順勢接收許多免費用戶之後, Replit 在 2023.04.13 正式推出 Deployment. 並且允許免費用戶使用. 但在 2023.09.28 卻<a href="https://blog.replit.com/hosting-changes">宣布</a>此一部署服務, 最遲在 2024.01.01 將只提供給付費用戶使用. 意即之後使用者<span style="background-color: #ccffcc;">無法再經由 python3 main.py 在廣域網路中使用 repl.co 網址進行編輯</span> (<span style="background-color: #ffcc99;">假如 Webview 仍在, 或許可以在啟動編輯網站後, 在 Webview tag 中登入系統編輯, 但無法在全螢幕中進行編輯</span>).</p>
<p>2023.10.20 收到 Replit 告知 repl.co 網域服務改變的 email 內容, 其中的 <a href="https://blog.replit.com/hosting-changes">Learn More</a> 就是 2023.08.28 的網誌<a href="https://blog.replit.com/hosting-changes">宣布</a>:</p>
<p><img alt="" class="add_border" height="284" src="/images/2023_10_20_mail_from_replit.png" width="400"/></p>
<p>註: w8 在內部 Replit Webview 使用"在新分頁開啟", 得到的外部網址為: repl_名稱--repl_username.repl.co</p>
<p>使用 Replit 內部 Webview 編輯動態網站並執行 C 程式的畫面:</p>
<p><img caption="false" class="add_border" height="380" src="/images/cp2023_w8_replit_webview.png" width="600"/></p>
<p>因此各學員除了使用<span style="background-color: #ffff00;">近端隨身系統</span>進行 cp2023 倉儲與網站的改版之外, 只能在<span style="background-color: #ffff00;">自架伺服器</span>中採遠端登入的方式在 s1511.cycu.org 主機中維護個人與分組網站.</p>
<p><span style="background-color: #ccffff;">s1511 如何建立?</span></p>
<p>建立伺服器:</p>
<p style="padding-left: 30px;">s1511 是一台安裝 Ubuntu 操作系統的虛擬主機, 為了能讓 cp2023 網站編輯程式能在伺服器中啟動, 擬採下列方式設定:</p>
<p style="padding-left: 60px;">1. 伺服器的符號名稱為 s1511.cycu.org 表示是 151 實體伺服器上的第一台 Virtualbox 虛擬主機, 並使用 <a href="https://nssm.cc/download">nssm</a> 設定隨實體主機啟動時開啟.</p>
<p style="padding-left: 60px;">2. 各班學員在 s1511 伺服器中的登入帳號將設為其班級代號加上學號, 以計算機程式課程為例, 學員的帳號將設為 cp 加上學號</p>
<p style="padding-left: 60px;">3. 各學員將經由學校的電子郵箱接收 s1511 伺服器中的帳號、密碼以及所分配使用的伺服器埠號</p>
<p style="padding-left: 60px;">4. 9 開頭的埠號將用於 cp2023 倉儲中 server.py 設定用, 屬於內部網路埠號, 由 <a href="https://pypi.org/project/waitress/">waitress</a> 負責啟動 <a href="https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface">WSGI 服務</a></p>
<p style="padding-left: 60px;">5. 各學員登入 s1511.cycu.org 之後, 擬採 SSH 設定方式對 Github 主機進行 git push</p>
<p style="padding-left: 60px;">6. nginx 全球資訊網伺服器中將包含 http, https 與 public_html 等三種<a href="https://geekrewind.com/configure-nginx-userdir-feature-on-ubuntu-16-04-lts-servers/">服務設定</a></p>
<p style="padding-left: 60px;">7. waitress wsgi 伺服器經由 9 開頭內部埠號所送出的 http 動態網站內容, 將由各學員在 s1511.cycu.org 中所啟動 8 開頭外部埠號承接, 且此 http proxy 至 https 的服務將採 stunnel 完成</p>
<hr/>
<p><span>建立使用者帳號:</span></p>
<p style="padding-left: 30px;">取得修課學員名單:</p>
<p style="padding-left: 60px;">為能直接從學校教務主機取得各課程班級的即時修課名單, 以 Python + WSGI 建立全球資訊網服務 <span>(原始碼: <a href="/downloads/nfulist_wsgi_and_server.7z">nfulist_wsgi_and_server.7z</a>, <a href="/downloads/wsgi.py">wsgi.py</a>)</span></p>
<p style="padding-left: 60px;">從 <a href="https://stud.cycu.org:8800?semester=1121&amp;courseno=0813&amp;column=True">https://stud.cycu.org:8800?semester=1121&amp;courseno=0813&amp;column=True</a> 就可以取得 1a 計算機程式課程的即時修課學員名單, 其中帶有三個輸入參數:</p>
<p style="padding-left: 90px;">semester 變數,  1121 為 112 學年第 1 學期</p>
<p style="padding-left: 90px;">courseno 變數, 1a: <a href="https://stud.cycu.org:8800/?semester=1121&amp;courseno=0813&amp;column=True">0813</a>, 1b: <a href="https://stud.cycu.org:8800/?semester=1121&amp;courseno=0826&amp;column=True">0826</a>, 2a: <a href="https://stud.cycu.org:8800/?semester=1121&amp;courseno=0838&amp;column=True">0838</a>, 2b: <a href="https://stud.cycu.org:8800/?semester=1121&amp;courseno=0851&amp;column=True">0851</a>, 每一個學期各課程都有不同代號 (有沒有更好的設計?)</p>
<p style="padding-left: 90px;">column 變數, True or False(default), True 表示要以行格式, 上下列出學號, 內定為橫向列印</p>
<hr/>
<p><span>建立各課程對應的 Ubuntu 學員帳號、密碼檔案:</span></p>
<p>程式碼 <a href="/downloads/gen_s1511_username_password.py">gen_s1511_username_password.py</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># Brython 程式碼
# 導入亂數模組
import random
# 導入字串模組
import string
# 利用 def 關鍵字定義函式
# 函式的輸入變數可以設定初始值
def password_generator(size=4, chars=string.ascii_lowercase + string.digits):
    # 函式內以多行註解說明函式功能
    """Generate random password
    """
    # 利用 return 關鍵字將所產生的亂數字串傳回
    return ''.join(random.choice(chars) for _ in range(size))
# 建立一個變數與隨後的字串對應
pass_string = "abcdefhkrstuwxyz"
cp_num = ["0813", "0826"]
cad_num = ["0838", "0851"]
connect_port = 8001
internal_port = 9001
def gen_acc_pass(course, course_num):
    global connect_port, internal_port
    stud_list =[]
    for num in course_num:
        url = "https://stud.cycu.org:8800?semester=1121&amp;courseno=" + num + "&amp;column=True"
        class_list = open(url).read().split("\n")[:-1]
        stud_list += class_list
        #print(stud_list)
    for stud_num in stud_list:
        password = password_generator(4, pass_string)
        #print(password)
        account = course + stud_num
        #print(account)
        print(stud_num + "\t" + account + "\t" + password + "\t" + str(connect_port) + "\t" + str(internal_port))
        connect_port += 1
        internal_port += 1
gen_acc_pass("cp", cp_num)
gen_acc_pass("cad", cad_num)</pre>
<p><a href="/downloads/create_users_txt.py">create_users_txt.py</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">with open("2023_fall_s1511_account_pass.txt") as f:
    data = f.readlines()
# use "cut -d: -f1,3 /etc/passwd" to make sure used uid range
# newusers format:  
# pw_name:pw_passwd:pw_uid:pw_gid:pw_gecos:pw_dir:pw_shell
# uid starts from 1003
uid_starts = 1002
users = ""
send = ""
 
for i in data:
    #stud_num \t account \t password \n
    stud = i.split("\t")
    stud_num = stud[0]
    account = stud[1]
    password = stud[2]
    port1 = stud[3]
    port2 = stud[4].rstrip()
    uid_starts += 1
    uid = str(uid_starts)
    gid = uid
    gecos = account
    home_dir = "/home/" + account
    shell = "/bin/bash"
    #print(stud_num, account, password)
    users += account + ":" + password + ":" + uid + ":" + gid + ":" + gecos + ":" + home_dir + ":" + shell + "\n"
    send += stud_num + ":" + account + ":" + password + ":" + port1 + ":" + port2 + "\n"
 
with open("users.txt", "w", encoding="utf-8", newline='\n') as f:
        f.write(users)
 
with open("send.txt", "w", encoding="utf-8", newline='\n') as f:
        f.write(send)</pre>
<p>若要修正跳行符號錯誤, 可以採用:</p>
<p>change_shell.py</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import os
with open("users.txt", "r", encoding="UTF-8") as f:
    data = f.read().splitlines()
for i in data:
    account = i.split(":")[0]
    print(account)
    os.system("sudo chsh -s /bin/bash " + account)</pre>
<p><span>當執行上列程式時, 為避免在程式中列出管理者密碼, 可以編輯 /etc/sudoers 並加入:</span></p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false"># only require a password once every 60 minutes
Defaults timestamp_timeout=60</pre>
<p><span>可以讓 sudo python3 change_shell.py 執行時無需輸入管理者密碼.</span></p>
<hr/>
<p>s1511 虛擬主機環境與使用流程:</p>
<p style="padding-left: 30px;">1. s1511 主機只有 IPv6 網路協定, 因此 ssh, sftp 以及 https 等連線的使用都必須透過雙協定支援代理主機設定, 才能與僅支援 IPv4 的電腦相連. 使用電腦輔助設計室的電腦, 只要下載<a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/Eck0KdLe1uZEk_LJ2tkEf4ABZyW32cmq5WZVl52Fww9C2A?e=i5Dm3t">2023_fall_w7_cadlab_network_setup.7z</a> <span>(需要下載密碼), 放入隨身碟, 然後根據說明納入自己所分配到的固定 IPv6, 就可以採管理者身分執行批次檔的方式完成網路設定.</span></p>
<p style="padding-left: 30px;">2. 利用 ssh 協定取下個人的代理主機, 其設定必須先用 ssh-keygen 在 .ssh 目錄中建立 private key (id_rsa) 以及 public key (id_rsa.pub), 並且將 id_rsa.pub 登錄到個人 github.com 帳號下 Settings 下的 SSH and GPG keys 設定區. 而且需要在 .ssh 目錄中, 利用 config 設定檔案, 指定 Host 以及代理主機, 此 Host 名稱可以視為 Linux 操作系統下, 以 ssh 對 github.com 連線的 session 名稱.</p>
<p style="padding-left: 30px;">3. 當使用 python3 server.py &amp; 執行 process 後, ps -axo pid,comm,uid | grep "python3" 的指令, 可以列出各自帳號下所 background 執行的 process pid, 若需要列出執行 process 對應目錄, 則可以利用 pwdx 加上 pid 後執行取得.</p>
<p>.ssh 目錄中的 <a href="/downloads/config">config</a>, 將 SSH session 名稱設為 github.com:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">Host github.com
User git
Hostname github.com
ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p
</pre>
<p>public_html 中以 cpnote 名稱建立目錄後, 必須以 https 格式取下 cp2023 倉儲內容作為靜態網站</p>
<p>acp 必須納入 public_html 目錄中的靜態網站 git pull, 且利用 chmod u+x acp 令其可以執行</p>
<p><a href="/downloads/acp">acp</a> 內容:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">#! /bin/bash
git add .
git commit -m "$1"
git push
cd ./../public_html/cp2023
git pull</pre>
<p><a href="/downloads/cp2023_1101_last.txt">cp2023_1101_last.txt</a></p><h3>linux</h3>
<p>練習登入 s1511.cycu.org 與退出 s1511.cycu.org:</p>
<p style="padding-left: 30px;">以命令列登入與退出: 從 Windows, ssh 帳號@s1511.cycu.org 登入, 進入後, 以 exit 退出.</p>
<p style="padding-left: 30px;">以 putty 登入與退出: 設定 putty session 登入, open 後可輸入帳號密碼登入, 進入後, 以 exit 退出.</p>
<p style="padding-left: 30px;">登入後, 學習如何利用 mkdir 建立目錄, 如何利用 cp 複製檔案, 如何利用 mv 移動檔案, 如何利用 rm 刪除檔案, 如何利用 cd 在各目錄中遊走, 如何利用 vi 建立及編輯檔案.</p>
<p style="padding-left: 30px;">登入後, 學習如何利用 chmod 針對特定目錄或檔案設定存取權, 例如: chmod 711 /home/your_account, 其中的 7 為 r = read 以 4 代表, w = write 以 2 代表, x = execute 以 1 代表, 且 Linux 中每一個檔案或目錄都用 10 個字元代表其屬性, 第一個字元若為 d = directory 表示該名稱為目錄, 隨後的 2-4 字元代表 user 對該檔案或目錄的 rwx 存取權, 5-7 字元則代表 group = 同一群組用戶對該檔案或目錄的存取權, 8-10 字元則代表 others = 非用戶非同一群組的其他身分使用者對該檔案或目錄的存取權.</p>
<p style="padding-left: 30px;">因此, chmod 711 /home/your_account, 表示要將帳號對應目錄設為 user 可以 rwx, 而同一群組及其他用戶則只能 x = execute 執行.</p>
<p style="padding-left: 30px;">若使用 chmod 755 /home/your_account/public_html 進行設定, 表示該目錄中的所有內容, user 可以 rwx, 而同一群組及其他用戶則只能 r = read 以 4 代表, 然後加上 x = execute 以 1 代表, 也就是 4 + 1 = 5 的 r-x 權限, 即可以讀取與執行的權限.</p>
<p>練習利用 sftp 指令從 s1511.cycu.org 取下或放上檔案:</p>
<p style="padding-left: 30px;">在近端執行 gd in C 繪製 ROC Flag 後, 取得 roc_flag.png, 以 sftp 送進自己位於 s1511.cycu.org 主機中 cp2023 倉儲 images 目錄中.</p>
<p style="padding-left: 30px;">從 s1511.cycu.org 取下自己 cp2023 倉儲 downloads 中的某一個 .c 程式碼.</p>
<p style="padding-left: 30px;">從 Windows 將 ssh session 設定檔案 config, 送到 s1511.cycu.org 主機中帳號下的 .ssh 目錄</p>
<p>練習建立 s1511.cycu.org 中帳號下的 private key 與 public key:</p>
<p style="padding-left: 30px;">遠端登入 s1511.cycu.org 之後, 利用 ssh-keygen 指令在 ~/.ssh 目錄中建立 id_rsa 與 id_rsa.pub</p>
<p style="padding-left: 30px;">以 sftp 從 s1511.cycu.org 主機取下 .ssh 目錄中的 id_rsa.pub public key</p>
<p style="padding-left: 30px;">將 id_rsa.pub public key 的內容登錄到 Github 帳號 settings 中的 SSH and GPG keys 中</p>
<p>練習在 s1511.cycu.org 中設定提交 github 倉儲用的 .gitconfig 檔案:</p>
<p style="padding-left: 30px;">登入 s1511.cycu.org 後, 利用 git config --global user.email 與 user.name 設定在 Github 帳號所登記的電子郵箱與 username</p>
<p>由於 s1511.cycu.org 是一台 Ubuntu 伺服器, 使用者登入之後必須熟悉以下 Linux 操作系統上的指令:</p>
<p style="padding-left: 30px;">ls: ls -l, ls -la, ls -l *.png</p>
<p style="padding-left: 30px;">cd: cd ../, cd</p>
<p style="padding-left: 30px;">cp: cp ./gd_ex1.c ../downloads/</p>
<p style="padding-left: 30px;">vi: <a href="https://code.yidas.com/linux-vi-vim-command/">https://code.yidas.com/linux-vi-vim-command/</a></p>
<p style="padding-left: 30px;">其他 Linux commands:</p>
<p style="padding-left: 60px;"><a href="https://bjpcjp.github.io/pdfs/devops/linux-commands-handbook.pdf">https://bjpcjp.github.io/pdfs/devops/linux-commands-handbook.pdf</a></p>
<p style="padding-left: 60px;"><a href="https://buildmedia.readthedocs.org/media/pdf/lym/latest/lym.pdf">https://buildmedia.readthedocs.org/media/pdf/lym/latest/lym.pdf</a></p>
<p style="padding-left: 60px;"><a href="http://cc.iiti.ac.in/docs/linuxcommands.pdf">http://cc.iiti.ac.in/docs/linuxcommands.pdf</a></p><h3>cp2023</h3>
<p>使用 s1511.cycu.org 伺服器的目的是希望讓各學員登入此電腦後, 能夠以服務啟動個人位於 Github 上的 cp2023 執行編輯後, 能夠將動態網站與靜態網站的改版資料推送回 Github, 並在 s1511 伺服器上即時展示個人的 cp2023 靜態網站內容.</p>
<p>有關 s1511 伺服器:</p>
<p style="padding-left: 30px;">s1511.cycu.org 是一台在 Windows 環境中使用 Virtualbox 建立的虛擬主機, 其操作系統為 Ubuntu 22.04 LTS (<a href="https://ubuntu.com/about/release-cycle">Ubuntu 各版次的生命週期</a>), 而 <a href="https://ubuntu.com/">Ubuntu</a> 則是 Linux 操作系統中的一個分支.</p>
<p style="padding-left: 30px;">因為這台主機已經配置能夠讓 cp2023 執行動態編輯程式的環境, 所以只要使用者能夠利用 OpenSSH 協定, 連結 s1511 與 github.com, 就可以利用 ssh 協定將倉儲 git clone 到 s1511 主機中.</p>
<p style="padding-left: 30px;">所謂"<span>連結 s1511 與 github.com", 就是指使用者已經將帳號下的 .ssh/id_rsa.pub 的內容送到 Github 帳號 settings 對應的 SSH and GPG keys 中進行登錄, 且 .ssh/config 已經設定從 IPv6 以 ssh 協定透過代理主機連線到 github.com 的內容.</span></p>
<p><span>.ssh 目錄中的 <a href="https://mde.tw/cpnote/downloads/config">config</a>, 將 SSH session 名稱設為 github.com:</span></p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">Host github.com
User git
Hostname github.com
ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p</pre>
<p><span>所謂"這台主機已經配置能夠讓 cp2023 執行動態編輯程式的環境", 指的是這台主機已經在 Python3 環境安裝 cp2023 啟動所需的模組.</span></p>
<p><span> 也就是已經透過管理者執行 pip install flask <span class="tipue_search_content_bold">flask_cors</span><span><span> </span>bs4 lxml pelican markdown pyopenssl</span></span></p>
<p><span><span>而且透過 WSGI 讓使用者只要執行 cp2023 倉儲中的 server.py, 就能開啟動態網頁編輯器. </span></span></p>
<p><span><span>但多人存在同一台伺服器使用 WSGI 服務時, 則必須各用戶使用不同的內部與外部埠號, 因此只要各用戶使用分配到的內部 port 與外部 port 進行設定, 各用戶就可以在 cp2023 倉儲啟動編輯後, 登入修改內建的 admin 管理者密碼, 並且以 chmod o-r config/config 指令, 取消 others (也就是 Linux 操作系統下的所有帳號) 的 read 權限, 以保全管理者帳號的編碼. (在 Replit 是透過  Secrets 中的 config 變數設定進行保全).</span></span></p><h3>SSH keys</h3>
<p>在 Windows 或 Linux 建立 openssh keys 都可以使用 ssh-keygen 指令</p>
<p>在 Windows 環境下, 希望遠端登入 (remote login) 到另外一台已經啟動 ssh server 的主機, 可以使用 ssh 指令外 (此地的 ssh 指令為 client) , 在 Windows 也可以使用 putty 套件工具進行遠端登入.</p>
<p>另外 Windows  sftp (安全的檔案傳輸協定 client) <span>除了透過命令列指令, 在 Windows 也可以使用 filezilla 套件工具, 能夠以 sftp client 指令遠端登入到 s1511.cycu.org, 表示遠端伺服器已經安裝 sftp 伺服器並且啟動.</span></p>
<p>在 s1511.cycu.org 建立 keys 的原因, 是希望能夠直接利用 OpenSSH 的協定, 對 github 中的倉儲 push.</p>
<p>因為 github.com 只支援 IPv4, 而 s1511.cycu.org 只支援 IPv6, 因此在 s1511 主機上要利用各種網路 client 對 github.com 進行連結或交換檔案, 都必須針對各種 client 設定代理主機, 其中包括 ssh client, sftp client, git client, https client (也就是全球資訊網瀏覽器)等.</p>
<p>但 s1511.cycu.org 主機中已經透過 /etc/environment 設定 http 與 https 連線所需的代理主機, 使用者只需要自行處理 ~.ssh/config 中的 ssh 協定代理主機設定即可.</p>
<p>/etc/environment 中有關 http 與 https 的代理主機設定:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin"
http_proxy=http://p4.cycu.org:3128
https_proxy=http://p4.cycu.org:3128
</pre><h3>git clone</h3>
<p>SSH 代理主機與 https 代理主機設定</p>
<p>假如處理好 .ssh/config, .ssh/id_rsa 與 .ssh/id_rsa.pub 的設定, 各用戶就可以利用下列指令, 以 SSH 協定取下 cp2023:</p>
<p style="padding-left: 30px;">git clone --recurse-submodules <a href="mailto:git@github.com:scrum-1/cp2023.git">git@github.com:scrum-1/cp2023.git</a></p>
<p>取下的倉儲內容, 包含子模組將會放入 cp2023 目錄.</p><h3>server.py</h3>
<p>內部埠號與外部埠號</p>
<p>列出使用 python3 啟動的服務:</p>
<p>ps -ef | grep python3</p>
<p>當使用 python3 server.py &amp; 執行 process 後, ps -axo pid,comm,uid | grep "python3" 的指令, 可以列出各自帳號下所 background 執行的 process pid, 若需要列出執行 process 對應目錄, 則可以利用 pwdx 加上 pid 後執行取得.</p>
<p>ps -axo : <a href="https://explainshell.com/explain?cmd=ps+-axo+pid%2Crss%2Ccommand">https://explainshell.com/explain?cmd=ps+-axo+pid%2Crss%2Ccommand</a></p>
<p>pwdx : <a href="https://www.cyberciti.biz/faq/unix-linux-pwdx-command-examples-usage-syntax/">https://www.cyberciti.biz/faq/unix-linux-pwdx-command-examples-usage-syntax/</a></p>
<p>kill: <a href="https://www.geeksforgeeks.org/kill-command-in-linux-with-examples/">https://www.geeksforgeeks.org/kill-command-in-linux-with-examples/</a></p><h3>git commit</h3>
<p>git config --global user.email and user.name</p>
<p>acp 權限與 public_html 目錄中的倉儲內容</p>
<p>使用者目錄 (711) 與 public_html (755) 目錄權限</p>
<p></p><h1>上課內容</h1>
<p>教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> </p>
<p><span>評分網站與倉儲:</span></p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cpnote/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9215c7c160119721ded887018cda8f4e/raw/593a8e462e0d8e7996f0bca3dd922adfdd4962e0/generate_cp2023_1a_site_repo.py">cp2023 1a 學員網站與倉儲連結</a></p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cpnote/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9215c7c160119721ded887018cda8f4e/raw/593a8e462e0d8e7996f0bca3dd922adfdd4962e0/generate_cp2023_1b_site_repo.py">cp2023 1b 學員網站與倉儲連結</a></p>
<p style="padding-left: 30px;">1a 學員展示用 IPv6 位址: 2001:288:6004:17:2023:cba::<a href="https://mde.tw/cpnote/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9215c7c160119721ded887018cda8f4e/raw/593a8e462e0d8e7996f0bca3dd922adfdd4962e0/generate_cp2023_1a_site_repo.py">班級名單序號</a></p>
<p style="padding-left: 30px;"><span>2b 學員展示用 IPv6 位址: 2001:288:6004:17:2023:cbb::</span><a href="https://mde.tw/cpnote/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9215c7c160119721ded887018cda8f4e/raw/593a8e462e0d8e7996f0bca3dd922adfdd4962e0/generate_cp2023_1b_site_repo.py">班級名單序號</a></p>
<hr/>
<p>112 學年度第一學期 (2023 Fall) 機械設計工程系 - 計算機程式課程的上課內容與進度.</p>
<p>有關 Replit 與近端可攜系統的相關操作, 請參考 cadnote 中的內容: <a href="https://mde.tw/cadnote/content/Replit.html">Replit</a>, <a href="https://mde.tw/cadnote/content/%E8%BF%91%E7%AB%AF%E5%8F%AF%E6%94%9C.html">近端可攜</a>, <a href="https://mde.tw/cadnote/content/Git.html">Git</a>.</p>
<p>手機建議安裝以下 Apps:</p>
<p style="padding-left: 30px;">ChatGPT, Github mobile, Replit, Authy, Teams, Onshape</p>
<p style="padding-left: 30px;">各 Apps 的功能與目的:</p>
<p style="padding-left: 60px;">本課程允許學員從 ChatGPT 以 GPT-3.5 preview 對話過程取出內容, 納入個人與評分網站中.</p>
<p style="padding-left: 60px;">手機上的 Github mobile App 可用於 Github 帳號中的 2FA 流程, 幫助 Github 阻絕不當的 robot 濫用.</p>
<p style="padding-left: 60px;">Replit App 則可讓學員利用手機 Run 倉儲網站, 並以手機或平板瀏覽器管理較少量的網站編輯.</p>
<p style="padding-left: 60px;">Authy App 允許使用者利用手機或數位手錶取得 2FA 登入流程所需的 verification code.</p>
<p style="padding-left: 60px;">Teams App 可以讓學員利用手機參與 Microsoft 線上團隊課程.</p>
<p style="padding-left: 60px;">Onshape App 則可讓使用者利用手機或平面檢視或修改協同產品設計流程中的零組件.</p>
<p>說明 Win 11 網路設定:</p>
<p style="padding-left: 30px;">由於電腦輔助設計室可以透過單一網卡, 啟動 IPv4 網路與 IPv6 網路連線, 除了利用 Win11 設定編輯相關網路內容外, 也可以在命令搜尋區輸入 Control Panel (或控制台), 帶出控制台, 從"控制台\網路和網際網路\網路和共用中心\變更介面卡設定"中的乙太網路進行設定.</p>
<p style="padding-left: 30px;">電腦中的網路設定內容除了透過 GUI 介面查詢外, 也可以在命令搜尋區輸入 cmd (command 命令提示字元), 後利用 ipconfig /all 指令取得目前的網路設定.</p>
<p style="padding-left: 30px;">IP - Internet Protocol (網際網路協定)</p>
<p style="padding-left: 30px;">IP address (網路位址, 機械設計工程系主幹網路 IPv4 網路位址區段 140.130.17.xxx, IPv6 網路區段2001:288:6004:17:xxxx:xxxx:xxxx:xxxx)</p>
<p>各班學員在電腦輔助設計室至加退選結束之前的<a href="https://mde.tw/cpnote/content/%E8%AA%B2%E7%A8%8B%E5%BA%A7%E6%AC%A1.html">暫時座位表</a> (<span style="background-color: #ffff00;">如何利用程式即時在網頁中列出各班座位表, 並納入後續延伸應用, 是一個不錯的探討主題</span>), 因為目前 Win11 電腦只有 52 台, 因此學員若自帶筆記型電腦, 則可以讓出固定式電腦, 或者選擇多人 (2-3人) 共用一台電腦 (備註: 學校不是沒有經費添購教學電腦, 而是希望讓學員提早進入共享電腦時代, 並體會如何在協同模式下進行創新產品開發:-)</p>
<p>首先說明<a href="https://mde.tw/cpnote/content/%E8%AA%B2%E7%A8%8B%E8%A9%95%E5%88%86.html">課程評分方式</a></p>
<p>Teaching Methods (教學方法):</p>
<ol>
<li>lectures (講課)</li>
<li>instruction (導引)</li>
<li>projects (專案)</li>
<li>self-study (自學)</li>
</ol>
<p>第一階段任務:</p>
<p>完成本節中的各項任務後, 表示你將可以登入:</p>
<ol>
<li>學校 email 帳號郵箱</li>
<li>個人Gmail 帳號郵箱</li>
<li>Replit IDE 系統 (以 個人Gmail 帳號登入)</li>
<li>個人 Github 系統</li>
<li>以學校 email 帳號設定的 Onedrive 系統</li>
</ol>
<h4><span style="background-color: #ffff99;">登入學校 Email 郵箱:</span></h4>
<p style="padding-left: 30px;">學校 Webmail: <a href="https://mail.nfu.edu.tw">https://mail.nfu.edu.tw</a> (帳號為: 學號@nfu.edu.tw, 用來通知 <a href="http://s1511.cycu.org">http://s1511.cycu.org</a>  主機上的帳號密碼與學期成績)</p>
<h4><span style="background-color: #ffff99;">申請或登入 Gmail:</span></h4>
<p style="padding-left: 30px;">假如尚未擁有 Gmail 帳號, 請自行<a href="https://accounts.google.com/SignUp">申請一個 Gmail 帳號</a>, 可用來<a href="https://replit.com/login">登入 Replit</a> 線上 IDE 系統.</p>
<h4><span style="background-color: #ffff99;">申請 Github 帳號:</span></h4>
<p style="padding-left: 30px;">請利用"學號@nfu.edu.tw"在 Github <a href="https://github.com/join">註冊</a>一個帳號, 帳號名稱可以選擇<span style="background-color: #ccffcc;">學號</span>, 或者用<span style="background-color: #ccffcc;">英文姓名的三個字母縮寫加上學號</span>作為 Github 帳號. 帳號建立後必須進入 <a href="https://mail.nfu.edu.tw">https://mail.nfu.edu.tw</a> 回覆確認信件後, 才能開始使用 Github.</p>
<p style="padding-left: 30px;">由於 Github 要求所有用戶在 2023 年底之前要使用 2FA 認證方式登入, 使用者可以在手機中先安裝 Github Mobile App, 假如只希望利用手機取得 2FA token (六個阿拉伯數字) 則可以在手機中安裝 Google Authenticator App, 若也希望利用 Apple Watch 取得 2FA token, 則可以在手機中安裝 Authy App.</p>
<p style="padding-left: 30px;">將 Github 帳號登入所需的 2FA 認證設定於手機的 Google Authenticator 或 Authy 的流程為:</p>
<p style="padding-left: 60px;">1. 登入 Github 後, 進入帳號 Settings - Password and authentication - Two-factor authentication 下, 若此時手機已經安裝 Github Mobile App, 且以 Github 帳號登入, 則 Preferred 2FA methods 選項中將會顯示 Github Mobile, 表示此時啟動 2FA 認證流程, 則使用者登入 Github 時, 除了必須輸入帳號密碼外, 還需要在手機的 Github Mobile App 中確認同意該使用者登入 Github, 系統才會允許登入.</p>
<p style="padding-left: 60px;">2. 接下來, 在 Two-factor methods 下點選 Authenticator app 右方的 Add (若要變更手機所使用的 2FA token 產生程式, 則點選 Edit), 視窗中將會出現一組二維條碼, 使用者可以利用手機開啟 Google Authenticator 或 Authy 中的 account add 功能開啟相機拍二維條碼後, 將 Github 帳號登錄至手機認證套件中.</p>
<p style="padding-left: 60px;">3. 一旦上述 Github 帳號在手機中的 2FA 認證設定完成, 使用者可以將前述內建為 Github Mobile 的 Preferred 2FA methods 改為 Authenticator app, 之後再登入 Github, 除了必須輸入對應的帳號密碼之外, 還需要輸入在特定時段內輸入手機或手錶中對應帳號所顯示的六個數字 (即 2FA token), 才能登入 Github.</p>
<p style="padding-left: 60px;">4. 至於手機中的 Authenticator 也可以再利用 Pin 密碼、指紋或人臉辨識流程加入安全保護, 一旦手機或手錶毀損, 就可以藉以登入 Github 帳號修改設定.</p>
<p>Github 帳號在計算機程式課程中的用途:</p>
<ol>
<li><span style="text-decoration: line-through;">領取 <a href="https://classroom.github.com">Github Classroom</a> 系統所指定的作業</span>, 為了整合 Replit, 本課程將放棄使用 Github Classroom, 因為 GitHub Classroom 作業倉儲的使用與 Replit 的結合應用流程, 將加重管理者的負擔, 因此本課程的評分網站將改由學員自行在 GitHub 帳號下, 建立名稱為 cp2023 的評分倉儲, 且透過 GitHub Pages 伺服器呈現網站內容.</li>
<li>建立個人網站: <a href="https://github_帳號.github.io">https://github_帳號.github.io</a></li>
<li>將計算機程式課程中所編寫的程式與相關資料存入 Github 帳號下的 Gist</li>
</ol>
<p>在 Github 中, 若需要將所建立的倉儲以 Github Pages 功能轉為網站, 可以在建立倉儲時, 以 <a href="https://github.com/mdecycu/cmsite">https://github.com/mdecycu/cmsite</a> 作為 template, 首先學習如何利用 Replit 維護網站內容, 隨後則可利用 s1511 伺服器中的帳號進行 Github 倉儲與網站內容的維護, 最後也可以在近端可攜程式環境中維護 Github 倉儲與網站內容.</p>
<p>利用 Github 建立個人網站 (透過 <a href="https://pages.github.com/">Github Pages</a>) 有以下目標:</p>
<ol>
<li>可在網站中自我介紹 (<a href="https://www.betterup.com/blog/how-to-introduce-yourself">https://www.betterup.com/blog/how-to-introduce-yourself</a>)</li>
<li>可在網站中展示並介紹自己寫過的程式</li>
<li>可在網站中簡介自己修過的課程內容</li>
<li>可在網站中說明自己曾經參與過的專題</li>
<li>可在網站中介紹自己未來的生涯規劃</li>
</ol>
<h4><span style="background-color: #ffff99;">申請 onedrive 帳號:</span></h4>
<ol>
<li>登入學校郵箱 (用來收帳號建立確認信)</li>
<li>至 <a href="https://www.microsoft.com/zh-tw/education/products/office">https://www.microsoft.com/zh-tw/education/products/office</a>, 以 學號@nfu.edu.tw 帳號申請 OneDrive 帳號 (登入教育版 onedirve 密碼由學校電算中心寄出, 請由 <a href="https://mail.nfu.edu.tw">https://mail.nfu.edu.tw</a> 登入信箱查閱)</li>
</ol>
<p>onedrive 帳號在計算機程式課程中的用途:</p>
<ol>
<li>擁有線上 5TB 的儲存空間, 可用來儲存個人所建立的流程操作 mp4 影片, 並嵌入個人網頁或作業網站中</li>
<li>擁有線上 5TB 的儲存空間, 可用來儲存與課程相關的<a href="https://software.nfu.edu.tw/">教育版授權軟體</a> (例如: <a href="https://software.nfu.edu.tw/Windows/tw/Win_10_22H2.4_64BIT_Ch.ISO">Windows 10 64位元 22H2.4</a>, <a href="https://software.nfu.edu.tw/Windows/tw/Win_11_22H2.6_64BIT_Ch.ISO">Windows 11 64位元 22H2.6</a>, <a href="https://software.nfu.edu.tw/KMS/windows_kms.bat">windows_kms.bat</a>) 或可攜程式系統檔案與<a href="https://link.springer.com">電子書</a></li>
<li>登入後可參與計算機程式課程 Teams (2023 計算機程式 MS Teams 代碼為: plmm43c)</li>
<li>登入後可下載計算機程式課程網站中的相關檔案 (下載連結將公布在 Teams)</li>
</ol>
<hr/>
<p>Replit 的應用:</p>
<p style="padding-left: 30px;">當使用者利用 Gmail 帳號登入 Replit 之後, 可以選擇以 C 作為 Template, 就可以直接利用瀏覽器執行 ANSI C 程式 (也可以選擇 C++, Javascript, Python 或其他程式語言 Template 執行該程式內容, 惟在免費 Replit 帳號下, 並不開放讓使用者透過 80 與 443 以外的 Ports, 因此無法在虛實整合機電控制流程中充當 Server).</p>
<p style="padding-left: 30px;">C 程式語言是 1970 年代創建 Unix 操作系統時所發明, 而 C++ 則是在 1980 年代在 C 的基礎上加上物件導向相關的語法以及相關程式庫, 一般將 C++ 視為帶有 Class 的 C.</p>
<p style="padding-left: 30px;">C++ = C with Class (物件導向式的 C)</p>
<p style="padding-left: 30px;">Replit 則是一套可讓用戶直接在瀏覽器中協同開發各種程式套件的 IDE.</p>
<p style="padding-left: 30px;">Replit = Web-based IDE (Integrated Development Environment, 整合開發環境)</p>
<p style="padding-left: 30px;"><a href="https://ece.uwaterloo.ca/~ece150/Lecture_materials/pdfs/Using%20replit.pdf">利用 Replit 執行 C++</a></p>
<p>以下將練習如何在 Replit 以及近端編譯執行一個簡單的 C 程式:</p>
<p style="padding-left: 30px;">可以在 Replit 與近端 C:\Portable_2023_fall (必須在檢視-顯示項目下勾選"副檔名"與"隱藏的項目")</p>
<p style="padding-left: 30px;">雙點擊 <span>C:\Portable_2023_fall\start_ipv6.bat 後, 可以在近端啟動可攜程式環境, 其中已經設定透過 Tiny C Compiler 編譯執行副檔名為 .c 的程式, 使用者可以利用 SciTE 編輯器中的 Tools - Go 功能表執行 ANSI C 程式:</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main(void) {
  printf("Hello World中文\n");
  return 0;
}</pre>
<p>與 ChatGPT 對話範例:</p>
<ol>
<li>目前的 C 程式如下"#include &lt;stdio.h&gt;<br/><br/>int main(void) {<br/>  printf("Hello World中文\n");<br/>  return 0;<br/>}", 請利用重複迴圈列印出 10 行相同字串</li>
<li>請使用繁體中文重新說明一遍</li>
<li>請逐行詳細說明程式用法</li>
<li>何謂 stdio.h, 為什麼要 include &lt;stdio.h&gt;?</li>
<li>int 代表甚麼?</li>
<li>為什麼每一行一定要有";"</li>
<li>main(void) 代表甚麼?</li>
<li>編譯與解譯有何不同?</li>
</ol>
<p>Exercises:</p>
<p style="padding-left: 30px;"><a href="https://nfuedu-my.sharepoint.com/:b:/g/personal/yen_nfu_edu_tw/EWd1cR2zOStOjVSduSw6pQMBv1fB6tWu-P9qfVH2YxbDPw?e=uOZW7N">jsliu_c_programming.pdf</a> (需要下載密碼)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/chapter/10.1007/978-1-4612-1484-7_2">The Basics of C Programming</a> (經由校園網路或 VPN 下載)</p>
<p style="padding-left: 30px;">請從 <a href="https://www.w3resource.com/c-programming-exercises/">https://www.w3resource.com/c-programming-exercises/</a> 網頁中自選 10 個練習範例, 分別在 Replit, Windows 與 Linux (or macOS) 中執行後, 取下執行畫面放入個人的 Github Pages 網頁 (即帳號.github.io 網站), 以 ANSIC 作為頁面標題並詳細說明每一行的程式語法.</p>
<p style="padding-left: 30px;">延伸參考:</p>
<p style="padding-left: 60px;"><a href="https://codeforwin.org/c-programming-examples-exercises-solutions-beginners">https://codeforwin.org/c-programming-examples-exercises-solutions-beginners</a></p>
<p style="padding-left: 60px;"><a href="https://techstudy.org/clanguage/c-programming-examples">https://techstudy.org/clanguage/c-programming-examples</a></p>
<p style="padding-left: 60px;"><a href="https://www.w3schools.com/c/c_exercises.php">https://www.w3schools.com/c/c_exercises.php</a></p>
<p style="padding-left: 60px;"><a href="https://pythonistaplanet.com/c-programming-exercises/">https://pythonistaplanet.com/c-programming-exercises/</a></p>
<p style="padding-left: 60px;"><a href="https://www.youtube.com/watch?v=qM53ZW41U5M&amp;list=PLOvZ8aEg7xDmRtTbeWHGKAkXI8ZkcyAhe">C programming</a> (教學影片)</p>
<p style="padding-left: 30px;">進階自學內容:</p>
<p style="padding-left: 60px;">主要以 C 開發的系統: <a href="https://fossil-scm.org/">Fossil SCM</a> and <a href="https://www.sqlite.org">SQLite</a></p>
<p style="padding-left: 60px;">由 C++ 發明人所寫的 <a href="https://www.researchgate.net/publication/269031890_A_history_of_C">A history of C++: 1979-1991</a></p>
<p style="padding-left: 60px;"><a href="https://learncplusplus.org/what-is-the-story-of-c-programming-history/?amp=1">C++ 編譯器進展</a></p>
<p style="padding-left: 60px;"><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EYiiTE_K1mJJqLdHffx2F48BNXgILSYhCemEmL4Yfpon6w?e=L8elhR">Introduction to C++</a> (pdf files) (需要下載密碼)</p>
<p style="padding-left: 60px;">Intro to C++: <a href="https://docs.replit.com/teaching-curriculum/intro-cpp">https://docs.replit.com/teaching-curriculum/intro-cpp</a></p>
<p style="padding-left: 60px;"><a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines">C++ Core Guideline</a></p>
<p style="padding-left: 60px;">2013 <a href="https://link.springer.com/book/10.1007/978-1-4302-6095-0">Moving from C to C++</a> (在校園網路或經由 VPN 下載)</p>
<p style="padding-left: 60px;">2014 <a href="https://link.springer.com/book/10.1007/978-1-4302-6668-6">Advanced C and C++ Compilin</a>g (在校園網路或經由 VPN 下載)</p>
<p style="padding-left: 60px;">2017 <a href="https://link.springer.com/book/10.1007/978-3-319-73132-2">Guide to Scientific Computing in C++</a> (在校園網路或經由 VPN 下載)</p>
<p style="padding-left: 60px;">2018 <a href="https://link.springer.com/book/10.1007/978-1-4842-3366-5">Beginning C++17</a> (在校園網路或經由 VPN 下載)</p>
<p style="padding-left: 60px;">2023 <a href="https://link.springer.com/book/10.1007/978-1-4842-9274-7">Modern C++ for Absolute Beginners</a> (在校園網路或經由 VPN 下載)</p>
<p style="padding-left: 60px;">下載 <a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EQHpkbGf-iFAnvQpjr6YpvoBT5IGyhc7zkRFldLb9gzumQ?e=07fTJm">msys64_20230718_cmake.7z</a> (需要下載密碼)</p>
<p style="padding-left: 60px;">設法利用 Msys2 編譯 SciTE, Solvespace 與 CoppeliaSim</p><h2>w2-w5</h2>
<p>本課程所謂個人網站, 即 github帳號.github.io, 可由使用者自行設定內容, 建議長期維護後可用於研究所推甄, 或求職時使用.</p>
<p>本課程所謂評分網站, 即 github帳號.github.io/cp2023, 內容及維護歴程資料將用於課程評分.</p>
<p>w2</p>
<p><a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/EflMzDYwTjdIm2KJB7SCYkwB1_6UTQ4mzUdDx-bwN22E8A?nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0RpcmVjdCJ9fQ&amp;e=ZN0EPP">說明安裝 Apps, 如何設定網路, 查驗是否正確連網</a></p>
<p><a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/Ef4xqA-zGsxFlnrsIq1WhRQBt7HalMhjXLb5hzLRmprYOQ?nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0RpcmVjdCJ9fQ&amp;e=a7Oaxo">說明如何利用近端可攜系統執行 C 程式, 如何利用 ChatGPT 進行對話</a></p>
<p><a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/EZ97ogpobtpCv2BxYJfDGjEBgadG6gPZJYN5TbB7clrMtA?nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0RpcmVjdCJ9fQ&amp;e=PcbKn5">說明如何利用 Replit 協助編輯網頁內容</a></p>
<p><a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/EW-FcfDAaMZPjdA8nFjgCHEBpp8yPr7wSoi9RsxmyLbZpA?nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0RpcmVjdCJ9fQ&amp;e=E1T3vG">說明如何 connect Replit to Github, 如何建立個人網站並利用 Replit 啟動編輯網站</a></p>
<p>w3</p>
<p><a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/EbXrVO6Jeb5Gnn47Dvpv7pYBftMz4z9evscZ-Spxxmk7mw?nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0RpcmVjdCJ9fQ&amp;e=RiZ5wB">有關電腦輔助設計室網路設定說明</a></p>
<p><a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/Eb1u9lGQSotOpxiJTQeFVwEBq-FxJEDTnTkuUL0jlGdnFQ?nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0RpcmVjdCJ9fQ&amp;e=zcA6Qt">處理 .replit 與 replit.nix 中的舊 Python 設定問題</a></p>
<p><a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/EUVPlEOxYxdCkQyT9rX-B64BK_SNHRJaz52HloupubxlMw?nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0RpcmVjdCJ9fQ&amp;e=W03gHn">說明如何為 site-個人github帳號 倉儲設定 Github Pages</a></p>
<p>採用 Github Classroom 建立作業倉儲的問題:</p>
<p style="padding-left: 30px;">2023/09/26 在 1a w3 課程進行到建立各學員 site 作業時發現, 將 Replit 導入 Github 倉儲的流程中, 所產生的系統間權限設定, 必須由 Github Classroom 管理帳號 (以 cp2023 為例, 附屬在 mdecp2023 帳號下), 針對各用戶所提出的個別 Replit 權限 requests (以 site-scrum-1 倉儲為例, 只能透過 Replit 提出控管 mdecp2023/site-scrum-1 倉儲的權限) <span style="background-color: #ffff00;">逐一進行設定</span>.</p>
<p style="padding-left: 30px;"><img alt="" class="add_border" height="310" src="/images/mdecp2023_replit_requests.png" width="400"/></p>
<p style="padding-left: 30px;">(上圖顯示共有三名用戶針對 mdecp2023 帳號下的 Github Classroom 倉儲提出 Replit 連線要求, 其中只有最上方用戶的 request 取得 mdecp2023/site-scrum-1 倉儲的維護權限, 其餘兩則 requests 則仍處於待審核階段. 意即若要讓各用戶整合 Replit, <span style="background-color: #ffff00;">每一個 Github Classroom 作業, 管理者都必須手動處理超過兩百則的 requests</span>)</p>
<p style="padding-left: 30px;">為去除管理者的手動設定負擔, 決定 2023 cp 與 cad 等課程將放棄使用 Github Classroom. 改為由各學員自行針對課程建立用來評分的課程倉儲與網站 (cp 課程建立 cp2023 倉儲, cad 課程則建立 cad2023 倉儲), 直接附屬在學員的 Github 帳號下, 後續的 submodule 設定與倉儲協同權限則統一由各學員自行負責.</p>
<hr/>
<p>w4-w5</p>
<p>第四與第五週任務:</p>
<p style="padding-left: 30px;"><span style="background-color: #ccffcc;">各學員自行建立線上考試帳號</span></p>
<p style="padding-left: 30px;"><span style="background-color: #ccffcc;">依據 <a href="https://qry.nfu.edu.tw/teacher.php?selyr=1121&amp;teacher=%E5%9A%B4%E5%AE%B6%E9%8A%98">112 學年度第一學期教師授課表</a>中的學員修課名單, 利用 Teams 中的 Excel 取學員 Github 帳號.</span></p>
<p style="padding-left: 30px;"><span style="background-color: #ccffcc;">各學員自行建立 Github 評分倉儲 cp2023, 並設定 Github Pages</span></p>
<p style="padding-left: 60px;">登入 Github 後, 以 <a href="https://github.com/mdecycu/cmsite">https://github.com/mdecycu/cmsite</a> 作為 Template 建立 cp2023 倉儲</p>
<p style="padding-left: 30px;"><span style="background-color: #ccffcc;">在 Replit IDE 上啟動 cp2023 內容編輯網站, 並將改版內容推送至 Github</span></p>
<p style="padding-left: 60px;">在同時登入 Github 與 Replit 的情況下, 將 Replit 帳號 connect 至 Github 帳號</p>
<p style="padding-left: 60px;">利用 import 將 cp2023 倉儲導入 Replit</p>
<p style="padding-left: 60px;">設定 .replit 為 python3 main.py</p>
<p style="padding-left: 60px;">根據 cp2023 倉儲中的 README.md 在 Shell 區執行 git submodule 與 pip install</p>
<p style="padding-left: 60px;">以 Run 執行 main.py 啟動倉儲內容編輯網頁</p>
<p style="padding-left: 60px;">利用<a href="https://mde.tw/cpnote/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py">密碼產生程式</a>將所選定的管理者密碼字串存入 Tool - Secrets 頁面中的 config 變數 (若無 config 環境變數設定, 動態網站登入管理者密碼將交由倉儲中的 config/config 字串進行驗證)</p>
<p style="padding-left: 60px;">重新啟倉儲內容編輯網頁後, 以新管理者密碼登入後改版並 Convert 為靜態內容後, 在 Git 頁面中將改版內容推至 Github</p>
<p style="padding-left: 30px;"><span style="background-color: #ccffcc;">在 Replit cp2023 專案中設定 C 程式與 Gnuplot 執行環境, 完成<a href="https://mde.tw/cpnote/content/%E4%B8%8A%E8%AA%B2%E5%85%A7%E5%AE%B9.html" style="background-color: #ccffcc;">上課內容中的練習</a></span></p>
<p style="padding-left: 60px;">replit.nix <a href="https://mde.tw/cpnote/content/w2-w5.html">納入 gnuplot 套件</a></p>
<p style="padding-left: 60px;"><span style="background-color: #ffff00;"><a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/EZYZvhkOEnxFrCnVI_VuvpYBIqzEWtPCWnyvqhrRqC_TgQ?nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0RpcmVjdCJ9fQ&amp;e=1axakq" style="background-color: #ffff00;">w5 1b cp2023 與 Replit C 程式執行環境說明影片.mp4</a></span></p>
<p style="padding-left: 90px;"><span style="background-color: #ffff00;">設定過程使用的參考網站: <a href="https://scrum-1.github.io/cp2023/content/w5.html">https://scrum-1.github.io/cp2023/content/w5.html</a> </span></p>
<p style="padding-left: 90px;"><span style="background-color: #ffff00;">設定過程使用的 Repl: <a href="https://replit.com/@scrum1/cp2023">https://replit.com/@scrum1/cp2023</a> (包含 <a href="https://replit.com/@scrum1/cp2023#replit.nix">replit.nix</a> 設定檔案)</span></p>
<p style="padding-left: 30px;"><span style="background-color: #ccffcc;">蒐集牛頓第二運動定律、mass-spring-damper 系統、Euler's Method 數值分析相關資料</span></p>
<p style="padding-left: 60px;">將 <a href="https://mde.tw/cpnote/content/MSD.html">euler_gnuplot_msd_ex1.c</a><span> 放入 downloads 目錄中, 以 cc euler_gnuplot_msd_ex1.c -o euler_gnuplot_msd_ex1 產生 euler_gnuplot_msd_ex1 可執行檔案後, 以 ./euler_gnuplot_msd_ex1 執行</span></p>
<p style="padding-left: 60px;"><span>最後可以在 images 目錄中得到 <a href="https://mde.tw/cpnote/images/motion_plot.png">motion_plot.png</a> 模擬結果</span></p>
<p><a href="https://nfuedu-my.sharepoint.com/:b:/g/personal/yen_nfu_edu_tw/EWd1cR2zOStOjVSduSw6pQMBv1fB6tWu-P9qfVH2YxbDPw?e=uOZW7N">jsliu_c_programming.pdf</a> (需要下載密碼)</p>
<p><a href="https://link.springer.com/content/pdf/10.1007/978-1-4842-5064-8_1.pdf?pdf=inline%20link">Introduction to C</a> (經由校園網路或 VPN 下載)</p>
<p><span style="text-decoration: line-through;">指定 Github Classroom 作業: 取得 <a href="https://github.com/mdecp2023">https://github.com/mdecp2023</a> 帳號下的 "site-個人github帳號" 倉儲 (用於學員簡報以及期中期末評分用)<br/></span></p>
<p> <span style="background-color: #ccffcc;">改由學員自行利用 <a href="https://github.com/mdecycu/cmsite" style="background-color: #ccffcc;">https://github.com/mdecycu/cmsite</a> 倉儲作為 template, 建立名稱為 cp2023 的評分倉儲</span>.</p>
<p>近端執行:</p>
<p style="padding-left: 30px;">SciTE 與 Tiny C Compiler 若要設定為 Tools - Compile 之後產生可執行檔案 a.out, cpp.properties 設定檔案必須修改如下:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">ccopts=-pedantic -Os
#cc=g++ $(ccopts) -c $(FileNameExt) -o $(FileName).o
#ccc=gcc $(ccopts) -c $(FileNameExt) -o $(FileName).o
cc=tcc.exe -run 
ccc=tcc.exe -o a.out

make.command=make
#command.compile.*.c=$(ccc) -std=c99
command.compile.*.c=$(ccc) $(FileNameExt)
command.build.*.c=$(make.command)
command.build.*.h=$(make.command)
command.clean.*.c=$(make.command) clean
command.clean.*.h=$(make.command) clean
# use tcc to run .c program
#command.go.*.c=./$(FileName)
command.go.*.c=$(cc) $(FileNameExt)</pre>
<p>雲端執行:</p>
<p style="padding-left: 30px;">範例: <a href="https://replit.com/@wcms/cjavascriptpython">https://replit.com/@wcms/cjavascriptpython</a></p>
<p style="padding-left: 30px;">將位於個人 Github 帳號下的 cp2023 倉儲 (建議以 <a href="https://github.com/mdecycu/cmsite">https://github.com/mdecycu/cmsite</a> 作為 template) import 進入 Replit, 以 git submodule update --init 取下子模組, 然後以 pip install flask flask_cors bs4 lxml pelican markdown gevent 安裝啟動編輯網站所需模組後, 將 config/config 密碼編碼移至 Secrets 頁面中的 config 變數後啟動.</p>
<p style="padding-left: 30px;">修改 replit.nix 如下, 表示要安裝 gnuplot 套件:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">{ pkgs }: {
  deps = [
    pkgs.gnuplot
  ];
}</pre>
<p style="padding-left: 30px;">之後將所練習的 C 程式置於 downloads 目錄中, 其執行影像結果存入 images 後, 分別在網頁中引用.</p>
<p>Exercises:</p>
<p>請從 <a href="https://nfuedu-my.sharepoint.com/:b:/g/personal/yen_nfu_edu_tw/EWd1cR2zOStOjVSduSw6pQMBv1fB6tWu-P9qfVH2YxbDPw?e=uOZW7N">jsliu_c_programming.pdf</a> (需要下載密碼)與 <a href="https://link.springer.com/content/pdf/10.1007/978-1-4842-5064-8_1.pdf?pdf=inline%20link">Introduction to C</a> (經由校園網路或 VPN 下載)電子書中各擷取 10 個 C 程式範例, 分別:</p>
<ol>
<li>在可攜程式環境中以 SciTE + Tiny C Compiler 編譯系統, 使用 Tools - Go 類編譯方式執行.</li>
<li>在可攜程式環境中以 SciTE + Tiny C Compiler 編譯系統, 使用 Tools - Compile 編譯連結後取得 a.out, 然後在命令列中以 a.out 執行.</li>
<li>在 Replit 全球資訊網 IDE 環境中的 Shell 頁面, 以 cc ex1.c 產生可執行檔案 a.out, 並以 ./a.out 執行, 或者以 cc ex1.c -o ex1 指定編譯連結後的可執行檔案名稱為 ex1 後, 以 ./ex1 執行.</li>
</ol>
<p>最後將所選擇的 C 程式範例執行過程與相關說明內容, 整理在<span style="background-color: #ccffcc;">個人 github 帳號下的 cp2023 倉儲網頁</span>中的 c_ex 頁面中.</p>
<p>參考:</p>
<p style="padding-left: 30px;">Introduction to the C programming Language (<a href="https://inst.eecs.berkeley.edu/~cs61c/su21/pdfs/lectures/fa20-trimmed/lec03.pdf">1</a>, <a href="https://inst.eecs.berkeley.edu/~cs61c/su21/pdfs/lectures/fa20-trimmed/lec04.pdf">2</a>, <a href="https://inst.eecs.berkeley.edu/~cs61c/su21/pdfs/lectures/fa20-trimmed/lec05.pdf">3</a>, or <a href="https://nfuedu-my.sharepoint.com/:b:/g/personal/yen_nfu_edu_tw/ET9_kFFrXg1DslVFqcV9hRABUcxDKnKsdnPyB6nsQFQKdQ?e=k6DGWl">download with password</a>)</p>
<p style="padding-left: 30px;">使用者輸入兩個整數後相加的 C 程式範例:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* Read in two integers , add them and display the answer */
#define _CRT_SECURE_NO_WARNINGS
#include&lt;stdio.h&gt;
int main()
{
int this_is_a_number1, this_is_a_number2, total;
printf("Please enter an integer number:\n ");
/* read number in */
if (scanf("%d", &amp;this_is_a_number1) == 1) {
      printf("%d", this_is_a_number1);
    } else {
        printf("Failed to read integer.\n");
    }

printf("You entered %d\n", this_is_a_number1);
printf("Please enter another number: \n");
if (scanf("%d", &amp;this_is_a_number2) == 1) {
      printf("%d", this_is_a_number1);
    } else {
      printf("Failed to read integer.\n");
    }
printf("You entered %d\n", this_is_a_number2);
total = this_is_a_number1 + this_is_a_number2;/* add two numbers */
printf("total is %d\n", total);
return 0;
}</pre>
<p style="padding-left: 30px;"></p>
<h2>w6-w7</h2>
<p>w5 之前的教學影片:</p>
<p style="padding-left: 30px;"><a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/EflMzDYwTjdIm2KJB7SCYkwB1_6UTQ4mzUdDx-bwN22E8A?nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0RpcmVjdCJ9fQ&amp;e=ZN0EPP">說明安裝 Apps, 如何設定網路, 查驗是否正確連網</a></p>
<p style="padding-left: 30px;"><a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/Ef4xqA-zGsxFlnrsIq1WhRQBt7HalMhjXLb5hzLRmprYOQ?nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0RpcmVjdCJ9fQ&amp;e=a7Oaxo">說明如何利用近端可攜系統執行 C 程式, 如何利用 ChatGPT 進行對話</a></p>
<p style="padding-left: 30px;"><a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/EZ97ogpobtpCv2BxYJfDGjEBgadG6gPZJYN5TbB7clrMtA?nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0RpcmVjdCJ9fQ&amp;e=PcbKn5">說明如何利用 Replit 協助編輯網頁內容</a></p>
<p style="padding-left: 30px;"><a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/EW-FcfDAaMZPjdA8nFjgCHEBpp8yPr7wSoi9RsxmyLbZpA?nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0RpcmVjdCJ9fQ&amp;e=E1T3vG">說明如何 connect Replit to Github, 如何建立個人網站並利用 Replit 啟動編輯網站</a></p>
<p style="padding-left: 30px;"><a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/EbXrVO6Jeb5Gnn47Dvpv7pYBftMz4z9evscZ-Spxxmk7mw?nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0RpcmVjdCJ9fQ&amp;e=RiZ5wB">有關電腦輔助設計室網路設定說明</a></p>
<p style="padding-left: 30px;"><a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/Eb1u9lGQSotOpxiJTQeFVwEBq-FxJEDTnTkuUL0jlGdnFQ?nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0RpcmVjdCJ9fQ&amp;e=zcA6Qt">處理 .replit 與 replit.nix 中的舊 Python 設定問題</a></p>
<p style="padding-left: 30px;"><a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/EUVPlEOxYxdCkQyT9rX-B64BK_SNHRJaz52HloupubxlMw?nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0RpcmVjdCJ9fQ&amp;e=W03gHn">說明如何為 site-個人github帳號 倉儲設定 Github Pages</a> (已經放棄使用 site- 倉儲, 改用學員帳號下的 cp2023 倉儲)</p>
<p style="padding-left: 30px;"><a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/EZYZvhkOEnxFrCnVI_VuvpYBIqzEWtPCWnyvqhrRqC_TgQ?nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0RpcmVjdCJ9fQ&amp;e=1axakq">w5 1b cp2023 與 Replit C 程式執行環境說明影片.mp4</a></p>
<p><a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/EVLjdagaxnVMk8wE5HO8QSUB1qGBFeAnHirQLSxNNWjSHQ?nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0RpcmVjdCJ9fQ&amp;e=iopvVp">說明如何進行倉儲的 pull request</a></p>
<p><span>評分網站與倉儲:</span></p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cpnote/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9215c7c160119721ded887018cda8f4e/raw/593a8e462e0d8e7996f0bca3dd922adfdd4962e0/generate_cp2023_1a_site_repo.py">cp2023 1a 學員網站與倉儲連結</a></p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cpnote/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9215c7c160119721ded887018cda8f4e/raw/593a8e462e0d8e7996f0bca3dd922adfdd4962e0/generate_cp2023_1b_site_repo.py">cp2023 1b 學員網站與倉儲連結</a></p>
<p><span>學員展示用 IPv6 位址, 請利用<a href="https://mde.tw/cpnote/content/setup.html"> setup</a> 進行網路設定:</span></p>
<p style="padding-left: 30px;">1a 學員展示用 IPv6 位址: 2001:288:6004:17:2023:cba::<a href="https://mde.tw/cpnote/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9215c7c160119721ded887018cda8f4e/raw/593a8e462e0d8e7996f0bca3dd922adfdd4962e0/generate_cp2023_1a_site_repo.py">班級名單序號</a> (原先使用 cpa, 因為 p 並非 16 位元的合法字元, 因此將 p 向上翻轉成為 b, 2023 之後接 cba)</p>
<p style="padding-left: 30px;"><span>2b 學員展示用 IPv6 位址: 2001:288:6004:17:2023:cbb::</span><a href="https://mde.tw/cpnote/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9215c7c160119721ded887018cda8f4e/raw/593a8e462e0d8e7996f0bca3dd922adfdd4962e0/generate_cp2023_1b_site_repo.py">班級名單序號</a></p>
<p>建立線上考試題目</p>
<p>從 gnuplot 到 gd 利用 C 程式繪圖設定<a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/EcN_ZOJU_n5PqudKHHD1934B_oynSHASndPVJ2_WSx6KKg?nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0RpcmVjdCJ9fQ&amp;e=m8Md1v">說明影片</a></p>
<p>各學員評分倉儲與網站的內容維護 (<a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/EQW8qQv3EENEgj5tPPsII-IB2-ck9cJaTP_ghrOYrF0BLA?nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0RpcmVjdCJ9fQ&amp;e=hMNc0O">說明影片</a>, 抱歉, 影片大約在 8:30 之後沒有聲音, <a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/ERBbUKL7pflAr_BR9hRaoxMBybhoarOmXrh_0BSmum8ryg?nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0RpcmVjdCJ9fQ&amp;e=aViZGu">1b 相同進度的說明影片</a>):</p>
<p style="padding-left: 30px;">SMap: site map 網站所有頁面</p>
<p style="padding-left: 30px;">EditA: edit all pages, 使用時機為(1)解決多人共用網站時的衝突, 或(2)刪除特定頁面</p>
<p style="padding-left: 30px;">Edit: edit one page, 先選頁面, 再選 Edit 然後才能進入編輯模式</p>
<p style="padding-left: 30px;">Config: 編輯網站標題, 若要編輯 site title, 必須更改 init.py 中的 site_title 字串內容</p>
<p style="padding-left: 30px;">Search: 頁面資料 html 原始碼內容搜尋</p>
<p style="padding-left: 30px;">IUpload: image upload, 影像檔案上傳, 資料會放入 images 目錄中</p>
<p style="padding-left: 30px;">IList: image file list, 列出存在 images 目錄下的影像檔案</p>
<p style="padding-left: 30px;">FUpload: file upload, 一般檔案上傳功能, 資料會放入 downloads 目錄中</p>
<p style="padding-left: 30px;">FList: file list, 列出位於 downloads 目錄下的檔案</p>
<p style="padding-left: 30px;">Logout: 登出</p>
<p style="padding-left: 30px;">Convert: 將 config/content.htm 經過分頁程式處理後, 轉為 content 目錄下的超文件</p>
<p>C 程式練習一:</p>
<p style="padding-left: 30px;"><span>請從 </span><a href="https://www.w3resource.com/c-programming-exercises/">https://www.w3resource.com/c-programming-exercises/</a><span><span> </span>網頁中自選 10 個練習範例, 分別在 Replit, Windows 與 Linux (or macOS) 中執行後, 取下執行畫面放入個人的 Github Pages 網頁 (即帳號.github.io 網站), 以 <span style="background-color: #ffff00;">ANSIC</span> 作為頁面標題並詳細說明每一行的程式語法.</span></p>
<p><span>C 程式練習二:</span></p>
<p style="padding-left: 30px;">請從 <a href="https://nfuedu-my.sharepoint.com/:b:/g/personal/yen_nfu_edu_tw/EWd1cR2zOStOjVSduSw6pQMBv1fB6tWu-P9qfVH2YxbDPw?e=uOZW7N">jsliu_c_programming.pdf</a><span> </span>(需要下載密碼)與 <a href="https://link.springer.com/content/pdf/10.1007/978-1-4842-5064-8_1.pdf?pdf=inline%20link">Introduction to C</a> (經由校園網路或 VPN 下載)電子書中各擷取 10 個 C 程式範例, 分別:</p>
<p style="padding-left: 30px;">1. 在可攜程式環境中以 SciTE + Tiny C Compiler 編譯系統, 使用 Tools - Go 類編譯方式執行.</p>
<p style="padding-left: 30px;">2. 在可攜程式環境中以 SciTE + Tiny C Compiler 編譯系統, 使用 Tools - Compile 編譯連結後取得 a.out, 然後在命令列中以 a.out 執行.</p>
<p style="padding-left: 30px;">3. 在 Replit 全球資訊網 IDE 環境中的 Shell 頁面, 以 cc ex1.c 產生可執行檔案 a.out, 並以 ./a.out 執行, 或者以 cc ex1.c -o ex1 指定編譯連結後的可執行檔案名稱為 ex1 後, 以 ./ex1 執行.</p>
<p style="padding-left: 30px;">最後將所選擇的 C 程式範例執行過程與相關說明內容, 整理在<span>個人 github 帳號下的 cp2023 倉儲網頁</span>中的 <span style="background-color: #ffff00;">c_ex</span> 頁面中.</p>
<p><a href="/downloads/gnuplot_ex1.c">gnuplot_ex1.c</a> 原始碼如下:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// 包含標準輸出入程式庫的標頭文件
// https://blog.csdn.net/weixin_38468077/article/details/101069365
// http://www.gnuplot.info/demo/
// https://github.com/sysprog21/rv32emu
// https://github.com/sysprog21/semu 
// https://docs.google.com/presentation/d/14N0cWG2SnBSqhc2cLF0_2VerB9FF8JN3
// https://cs61c.org/fa23/
// https://greenteapress.com/wp/think-python-2e/
// https://github.com/ecalvadi/c99-examples
// https://github.com/gouravthakur39/beginners-C-program-examples
// https://github.com/ergenekonyigit/Numerical-Analysis-Examples
// https://www.che.ncku.edu.tw/facultyweb/changct/html/teaching/CPPandMATLAB/Past/pdf%20Files/Chap02-Ling.pdf
// https://gteceducation.com.sg/Brochures/PROGRAMMING/C%20PROGRAMMING%20FULL.pdf
// https://jsommers.github.io/cbook/cbook.pdf
// https://jsommers.github.io/cbook/index.html
// http://student.itee.uq.edu.au/courses/csse2310/CProgrammingNotes.pdf
// http://cslibrary.stanford.edu/101/EssentialC.pdf
// https://publications.gbdirect.co.uk/c_book/
// https://www.fossil-scm.org/fossil-book/doc/2ndEdition/fossilbook.pdf
// ***** execute on replit 
// cd downloads
// cc gnuplot_ex1.c -o gnuplot_ex1
// ./gnuplot_ex1
#include &lt;stdio.h&gt;
 
// 主函式
int main() {
    // Start a Gnuplot process using popen
    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");
    if (!gnuplotPipe) {
        fprintf(stderr, "Failed to start Gnuplot.\n");
        return 1;
    }
 
    // Use Gnuplot plotting commands, specify font and output as PNG
    fprintf(gnuplotPipe, "set terminal png font 'default,10' size 800,400\n");
    fprintf(gnuplotPipe, "set output './../images/gnuplot_ex1.png'\n");
    fprintf(gnuplotPipe, "plot sin(x)");
    // Close popen
    pclose(gnuplotPipe);
 
    return 0;
}</pre>
<p>執行結果位於 images:</p>
<p><img alt="" height="200" src="/images/gnuplot_ex1.png" width="400"/></p>
<p><a href="http://www.gnuplot.info/docs_5.0/gnuplot.pdf">gnuplot 5.0 參考手冊.pdf</a></p>
<p><a href="http://personalpages.to.infn.it/~mignone/Numerical_Algorithms/gnuplot.pdf">Quick guide to gnuplot.pdf</a></p>
<p><a href="https://wiki.csie.ncku.edu.tw/embedded/2016q1h1">從今天起忘記 MicroSoft Excel</a> (!)</p>
<hr/>
<p>前述 Replit 平台環境中, 已經加入 Gnuplot 繪圖程式庫, 若循相同設定, 在 replit.nix 中加入 gd 繪圖程式庫以及 ncurses 終端機圖形介面程式庫, 則可結合 C/C++ 進行各式靜態與動態繪圖練習:</p>
<p>replit.nix</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">{ pkgs }: {
    deps = [
      pkgs.gnuplot
      pkgs.ncurses.dev
      pkgs.gd
    ];
}</pre>
<p>納入 ncurses 後的 C 程式編譯連結指令為: cc ncurses_ex1.c -lncurses -lm</p>
<p>其中 -lncurses 會在連結階段導入所需的 ncurses 程式庫, 而 -lm 則導入 math.h 時連結數學程式庫之用.</p>
<p>至於納入 gd 繪圖程式庫後的編譯連結指令為: cc gd_ex1.c -lgd -lm</p>
<p>其中 -lgd 會在連結階段導入所需的 gd 程式庫, 而 -lm 則導入數學程式庫.</p>
<p>gd 程式庫繪圖練習:</p>
<p style="padding-left: 30px;"><a href="/downloads/gd_roc_flag.c">gd_roc_flag.c</a></p>
<p style="padding-left: 30px;"><a href="/downloads/gd_usa_flag.c">gd_usa_flag.c</a></p>
<p style="padding-left: 30px;">目前所得到的繪圖結果如下:</p>
<p style="padding-left: 30px;"><img caption="false" height="134" src="/images/roc_flag1.png" width="200"/> 與 <img caption="false" height="133" src="/images/usa_flag.png" width="253"/></p>
<p style="padding-left: 30px;">請完成上列兩國國旗的繪製.</p>
<p><a href="https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China">ROC 國旗定義</a></p>
<p><a href="https://en.wikipedia.org/wiki/File:Republic_of_China(Taiwan)_sheet.svg">青天白日格式定義</a></p>
<p><a href="https://en.wikipedia.org/wiki/Flag_of_the_United_States">USA 國旗定義</a></p>
<p><a href="http://web.mit.edu/spin_v4.2.5/share/graphviz/doc/html/gd.html">gd 2.0.31 (mit.edu)</a></p>
<p>ROC 國旗繪製, 可以先從目前已知的線架構點座標:</p>
<p><img alt="" height="67" src="/images/roc_flag1.png" width="100"/></p>
<p>設法先對單一菱形著色:</p>
<p><img alt="" height="67" src="/images/roc_flag2.png" width="100"/></p>
<p>之後旋轉六次, 再疊上藍色光環:</p>
<p><img alt="" height="67" src="/images/roc_flag3.png" width="100"/></p>
<p>進階練習:</p>
<p style="padding-left: 30px;">C 與 gnuplot 及 gd 繪圖程式庫的結合, 除了在 Replit 平台上執行外, 如何在 Windows 可攜系統中以 Tiny C Compiler 完成相同的運算與繪圖流程?</p>
<hr/>
<p>w7</p>
<p><a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/EYSoaecwXNlEg6KPxXltyK4BfgCwjLoxbtgvOGUlgjOx2w?nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0RpcmVjdCJ9fQ&amp;e=GIvuYT">如何建立各組協同網站說明影片</a></p>
<p><a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/EX1-yNrRODZFgaer3c34nXEBSdqo5HNepKT1HmDKLpwsFQ?nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0RpcmVjdCJ9fQ&amp;e=rYtLhr">如何將協同網站設定協同者後, import 進入 Replit 說明影片</a></p>
<p><a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/EXNCbyBWtGRCuO_4RBxsB80B4nROo5aZ6O0DFhRw9bDNFw?nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0RpcmVjdCJ9fQ&amp;e=981Q1G">說明如何進行基本的 gd 繪圖</a></p>
<p>進行九人一排分組, 期中成績預計送出個人期望成績.</p>
<p>cp2023 計算機程式教學內容 check list:</p>
<ol>
<li>各學員要有 github 帳號, 且將 user name 登錄到 <a href="https://raw.githubusercontent.com/mdecycu/studlist/main/2023fall/1a.txt">1a</a> 與 <a href="https://raw.githubusercontent.com/mdecycu/studlist/main/2023fall/1b.txt">1b</a> 的倉儲, 內容必須與個人的 github 帳號相同 (<a href="https://mde.tw/studlist/2023fall/1a.txt">1a</a> 與 <a href="https://mde.tw/studlist/2023fall/1b.txt">1b</a>), 各用戶若修改帳號, 必須透過 Pull Requests 要求將新資料合併 (<a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/EVLjdagaxnVMk8wE5HO8QSUB1qGBFeAnHirQLSxNNWjSHQ?nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0RpcmVjdCJ9fQ&amp;e=iopvVp">Pull Requests 說明</a>).</li>
<li>各學員要有 <span style="background-color: #ffff00;">Replit</span> 帳號且與 Github connect, 能夠從 Replit 啟動網頁編輯, 轉為靜態網站內容後, 送回 Github 的個人 cp2023 倉儲與網站. (還有兩種方式可以維護倉儲與網站, <span style="background-color: #ffff00;">近端</span>與<span style="background-color: #ffff00;">自架主機</span>上進行內容維護)</li>
<li>目前會經常使用的 git add, git commit, git push, git pull, git status, git branch, git checkout</li>
<li>C 程式的繪圖 - Gnuplot, gd, raylib (<a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/yen_nfu_edu_tw/EUjYvX4V6-1GoeM3sEQXn1IBwMZ3jzKnqYJ0OPZLD8gL_A?nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0RpcmVjdCJ9fQ&amp;e=AdBz8j">近端繪圖說明</a>)</li>
</ol>
<hr/>
<p>第七週練習</p>
<p>已知利用下列的 ANSI C 程式, 結合 gd 繪圖程式庫可以畫出 ROC Flag, 請循相同方法, 畫出 PROC, United Kingdom, Japan 與 Korea Flags.</p>
<p>ROC Flag in gd: <a href="/downloads/roc_flag_in_gd.c">roc_flag_in_gd.c</a></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China
// 內政部國旗參考資料: https://www.moi.gov.tw/cp.aspx?n=10621
// cc roc_flag_in_gd.c -lgd -lm to link with gd and math library
// https://www.rapidtables.com/web/color/RGB_Color.html
// 幾何形狀著色與繪圖練習
// 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖
#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_roc_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int x, int y, int size, int color);

int main() {
    // width 3: height 2
    int width = 1200;
    // 國旗長寬比為 3:2
    int height = (int)(width*2.0 / 3.0);

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_roc_flag(img);

    FILE *outputFile = fopen("./../images/roc_flag_in_gd.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}

void draw_roc_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white, blue;
    // 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處
    int center_x = (int)(width/4);
    int center_y = (int)(height/4);
    // gdImageFilledEllipse 需以長寬方向的 diameter 作圖
    // 由於中央白日圓形的半徑為青天寬度的 1/8
    // 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8
    // 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8
    int sun_radius = (int)(width/8);
    // 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑
    int white_circle_dia = sun_radius;
    // 中央藍色圓形半徑為中央白日的 1又 2/15
    int blue_circle_dia = white_circle_dia +  white_circle_dia*2/15;
    // 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值
    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色
    white = gdImageColorAllocate(img, 255, 255, 255); // 白色
    blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色
    // 根據畫布大小塗上紅色長方形區域
    gdImageFilledRectangle(img, 0, 0, width, height, red);
    // 青天面積為整面國旗的 1/4, 也是採用長方形塗色
    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);
    // 先設法以填色畫出六個白色堆疊菱形
    draw_white_sun(img, center_x, center_y, sun_radius, white);
    // 利用一個藍色大圓與白色小圓畫出藍色環狀
    gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);
    gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);
  
}

void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {
    // M_PI 大小定義於 math.h 標頭檔中, 因為三角函數中採用徑度為角度單位
    // 因此定義將角度轉為徑度的轉換變數為 deg, 角度值乘上 deg 就可轉為徑度
    float deg = M_PI/180;
    // 根據十二道光芒的每一尖角的角度為 15 度, 求出其對應直角三角形的另一角度為 75 度
    // 求出十二道光芒中任一菱形的 small radius, 也就是菱形的另一個對應小圓的半徑大小
    float sr = sun_radius/tan(75*deg);
    int ax, ay, bx, by, dx, dy, ex, ey;
    gdPoint points[4];
    /* 在塗上十二道光芒中的單一菱形區域之前, 先以座標點畫線測試是否正確
    ax = center_x;
    ay = center_y - sun_radius;
    bx = center_x - sun_radius*tan(15*deg);
    by = center_y;
    ex = center_x;
    ey = center_y + sun_radius;
    dx = center_x + sun_radius*tan(15*deg);
    dy = center_y;
    // AB
    gdImageLine(img, ax, ay, bx, by, color);
    // BE
    gdImageLine(img, bx, by, ex, ey, color);
    // ED
    gdImageLine(img, ex, ey, dx, dy, color);
    // DA
    gdImageLine(img, dx, dy, ax, ay, color);
    */
    ax = center_x;
    ay = center_y - sun_radius;
    bx = center_x - sun_radius*tan(15*deg);
    by = center_y;
    ex = center_x;
    ey = center_y + sun_radius;
    dx = center_x + sun_radius*tan(15*deg);
    dy = center_y;
    // 確定單一菱形區域的塗色正確後, 利用迴圈每次轉動 30 度, 總共轉六次即可塗上十二道光芒區域
    for (int i=1;i&lt;=6;i++){
    // A
    points[0].x = ax+sun_radius*sin(30*deg*i);
    points[0].y = ay+sun_radius-sun_radius*cos(30*deg*i);
    // B
    points[1].x = bx+sr-sr*cos(30*deg*i);
    points[1].y = by-sr*sin(30*deg*i);
    // E
    points[2].x = ex-sun_radius*sin(30*deg*i);
    points[2].y = ey-(sun_radius-sun_radius*cos(30*deg*i));
    // D
    points[3].x = dx-(sr-sr*cos(30*deg*i));
    points[3].y = dy+sr*sin(30*deg*i);
    // 對菱形區域範圍塗色
    gdImageFilledPolygon(img, points, 4, color);
    // 在菱形區域外圍畫線, 明確界定菱形範圍
    gdImagePolygon(img, points, 4, color);
    }
}</pre>
<p></p><h3>replit_github</h3>
<p><a href="https://mde.tw/cpnote/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9215c7c160119721ded887018cda8f4e/raw/ae4f22fca4d70678714fe1c5fc74cf6255a322d1/cp2023_w6_1a_elite.py">1a 完成利用 Replit 將改版資料推向 Github 學員名單</a></p>
<p><a href="https://mde.tw/cpnote/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9215c7c160119721ded887018cda8f4e/raw/ae4f22fca4d70678714fe1c5fc74cf6255a322d1/cp2023_w6_1b_elite.py">1b 完成利用 Replit 將改版資料推向 Github 學員名單</a></p>
<p>w6 上課後, 1a 已經完成 Replit 資料推向 Github 學員:</p>
<p style="padding-left: 30px;"><a href="https://cyg41223103.github.io/cp2023">41223103</a><span><span> </span>(</span><a href="https://github.com/CYG41223103/cp2023">repo</a><span>)</span></p>
<p>w6 上課前, 1b 已經完成 Replit 資料推向 Github 學員:</p>
<p style="padding-left: 30px;"><a href="https://mch40930151.github.io/cp2023">40930151</a><span><span> </span>(</span><a href="https://github.com/mch40930151/cp2023">repo</a><span>)</span><br/><a href="https://41223201.github.io/cp2023">41223201</a><span><span> </span>(</span><a href="https://github.com/41223201/cp2023">repo</a><span>)</span><br/><a href="https://41223205.github.io/cp2023">41223205</a><span><span> </span>(</span><a href="https://github.com/41223205/cp2023">repo</a><span>)</span><br/><a href="https://41223206.github.io/cp2023">41223206</a><span><span> </span>(</span><a href="https://github.com/41223206/cp2023">repo</a><span>)</span><br/><a href="https://41223209.github.io/cp2023">41223209</a><span><span> </span>(</span><a href="https://github.com/41223209/cp2023">repo</a><span>)</span><br/><a href="https://ray41223215.github.io/cp2023">41223215</a><span><span> </span>(</span><a href="https://github.com/RAY41223215/cp2023">repo</a><span>)</span><br/><a href="https://41223217.github.io/cp2023">41223217</a><span><span> </span>(</span><a href="https://github.com/41223217/cp2023">repo</a><span>)</span><br/><a href="https://41223224.github.io/cp2023">41223224</a><span><span> </span>(</span><a href="https://github.com/41223224/cp2023">repo</a><span>)</span><br/><a href="https://41223225.github.io/cp2023">41223225</a><span><span> </span>(</span><a href="https://github.com/41223225/cp2023">repo</a><span>)</span><br/><a href="https://lin41223226.github.io/cp2023">41223226</a><span><span> </span>(</span><a href="https://github.com/Lin41223226/cp2023">repo</a><span>)</span><br/><a href="https://hyy41223228.github.io/cp2023">41223228</a><span><span> </span>(</span><a href="https://github.com/hyy41223228/cp2023">repo</a><span>)</span><br/><a href="https://41223234.github.io/cp2023">41223234</a><span><span> </span>(</span><a href="https://github.com/41223234/cp2023">repo</a><span>)</span><br/><a href="https://41223235.github.io/cp2023">41223235</a><span><span> </span>(</span><a href="https://github.com/41223235/cp2023">repo</a><span>)</span><br/><a href="https://41223246.github.io/cp2023">41223246</a><span><span> </span>(</span><a href="https://github.com/41223246/cp2023">repo</a><span>)</span></p>
<h3>replit_html</h3>
<p><a href="https://docs.replit.com/teaching-curriculum/intro-python">Intro to Python | Replit Docs</a></p>
<h3>replit_python</h3>
<p><a href="https://docs.replit.com/teaching-curriculum/intro-python">Intro to Python | Replit Docs</a></p>
<h3>replit_cpp</h3>
<p>以下為 C++ 進階課程, 僅提供參考.</p>
<p><a href="https://docs.replit.com/teaching-curriculum/intro-cpp">Intro to C++ | Replit Docs</a>, 針對有 C++ 以外程式基礎的學員, 除了基本 C++ 語法外還介紹指標 (pointers) 與資料結構 (data structures).</p>
<p>C++ 程式範例: <a href="https://replit.com/teams/import/afurhdoyyeyvpxbo-SeaPlusPlus">Project copying - Replit</a></p>
<h2>w8</h2>
<p>s1511 伺服器中的分組埠號:</p>
<p>計算機程式課程:</p>
<p style="padding-left: 30px;">cp2023_ag1: 8220, 9220</p>
<p style="padding-left: 30px;">cp2023_ag2: 8221, 9221</p>
<p style="padding-left: 30px;"><span>cp2023_ag3: 8222, 9222</span></p>
<p style="padding-left: 30px;"><span>cp2023_ag4: 8223, 9223</span></p>
<p style="padding-left: 30px;"><span>cp2023_ag5: 8224, 9224</span></p>
<p style="padding-left: 30px;"><span>cp2023_ag6: 8225, 9225</span></p>
<hr style="padding-left: 30px;"/>
<p style="padding-left: 30px;"><span>cp2023_bg1: 8226, 9226</span></p>
<p style="padding-left: 30px;"><span>cp2023_bg2: 8227, 9227</span></p>
<p style="padding-left: 30px;"><span>cp2023_bg3: 8228, 9228</span></p>
<p style="padding-left: 30px;"><span>cp2023_bg4: 8229, 9229</span></p>
<p style="padding-left: 30px;"><span>cp2023_bg5: 8230, 9230</span></p>
<p style="padding-left: 30px;"><span>cp2023_bg6: 8231, 9231</span></p>
<hr/>
<p>電腦輔助設計與實習課程:</p>
<p style="padding-left: 30px;">cad2023_ag1: 8232, 9232</p>
<p style="padding-left: 30px;">cad2023_ag2: 8233, 9233</p>
<p style="padding-left: 30px;"><span>cad2023_ag3: 8234, 9234</span></p>
<p style="padding-left: 30px;"><span>cad2023_ag4: 8235, 9235</span></p>
<p style="padding-left: 30px;"><span>cad2023_ag5: 8236, 9236</span></p>
<p style="padding-left: 30px;"><span>cad2023_ag6: 8237, 9237</span></p>
<hr/>
<p style="padding-left: 30px;"><span>cad2023_bg1: 8238, 9238</span></p>
<p style="padding-left: 30px;"><span>cad2023_bg2: 8239, 9239</span></p>
<p style="padding-left: 30px;"><span>cad2023_bg3: 8240, 9240</span></p>
<p style="padding-left: 30px;"><span>cad2023_bg4: 8241, 9241</span></p>
<p style="padding-left: 30px;"><span>cad2023_bg5: 8242, 9242</span></p>
<p style="padding-left: 30px;"><span>cad2023_bg6: 8243, 9243</span></p>
<hr/>
<p>在 Ubuntu 安裝 gd 程式庫套件:</p>
<p>sudo apt update</p>
<p>sudo apt upgrade</p>
<p>sudo apt install libgd-dev</p>
<p>cd downloads</p>
<p>cc gd_ex1.c -lm -lgd</p>
<p>./a.out</p>
<p>在 Ubuntu 安裝 gnuplot 套:</p>
<p>sudo apt install gnuplot</p>
<p>因為 s1511 伺服器並沒有安裝 X11, 因此 raylib 相關範例只能在近端可攜環境中執行.</p>
<hr/>
<p><span style="background-color: #ffff00;">w8 之前所指令的程式練習作業</span>:</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cpnote/content/%E4%B8%8A%E8%AA%B2%E5%85%A7%E5%AE%B9.html">上課內容</a>中的 Exercises</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cpnote/content/w2-w5.html">w2-w5</a> 週任務中的 Exercises</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cpnote/content/w6-w7.html">w6-w7</a> 週任務中的練習一與練習二</p>
<p style="padding-left: 30px;">請利用 C 結合 gd 繪圖程式庫, 畫出 <a href="https://en.wikipedia.org/wiki/Flag_of_China">PROC</a>, <a href="https://en.wikipedia.org/wiki/Flag_of_the_United_Kingdom">United Kingdom</a>, <a href="https://en.wikipedia.org/wiki/Flag_of_Japan">Japan</a> 與 <a href="https://en.wikipedia.org/wiki/Flag_of_South_Korea">South Korea</a> Flags.</p>
<p style="padding-left: 30px;">各分組成員協同將 <a href="https://nfuedu-my.sharepoint.com/:b:/g/personal/yen_nfu_edu_tw/EWd1cR2zOStOjVSduSw6pQMBv1fB6tWu-P9qfVH2YxbDPw?e=uOZW7N">jsliu_c_programming.pdf</a><span> </span>(需要下載密碼) 內容整理後, 放入各分組網站.</p><h2>C_lib</h2>
<p>本課程針對 C 程式語言的教學將使用下列程式庫:</p>
<p>gnuplot: <a href="https://github.com/gnuplot/gnuplot">https://github.com/gnuplot/gnuplot</a></p>
<p><span style="background-color: #ffff00;">數值分析繪圖程式庫</span> - 在機電設計流程中, 工程師運用數值分析法進行設計與模擬運算後, 將數據存檔, 可利用 gnuplot 繪圖指令, 以令人容易理解的圖形呈現數值分析結果.</p>
<p>範例:</p>
<p><a href="/downloads/euler_gnuplot_msd_ex1.c">euler_gnuplot_msd_ex1.c</a></p>
<p>執行結果:</p>
<p><img alt="" height="200" src="/images/motion_plot.png" width="400"/></p>
<p></p>
<hr/>
<p>gd: <a href="https://github.com/libgd/libgd">https://github.com/libgd/libgd</a></p>
<p>泛用繪圖程式庫 - 工程師在產品開發或製造程序中, 可利用線條(例如: 特殊齒輪外型)、字串(例如: 製造日期或保固訊息)或塗色區域(特定標誌、二維條碼或 QRCode)進行一般標誌或圖像繪圖.</p>
<p>範例:</p>
<p><a href="/downloads/gd_ex1.c">gd_ex1.c</a></p>
<p>執行結果:</p>
<p><img alt="" height="200" src="/images/gd_ex1.png" width="200"/> gd_ex1.png</p>
<p><img alt="" height="200" src="/images/gd_ex1.jpg" width="200"/> gd_ex1.jpg</p>
<hr/>
<p>raylib: <a href="https://github.com/raysan5/raylib">https://github.com/raysan5/raylib</a></p>
<p>raygui: <a href="https://github.com/raysan5/raygui">https://github.com/raysan5/raygui</a></p>
<p><a href="https://www.raylib.com/cheatsheet/raylib_cheatsheet_v4.0.pdf">https://www.raylib.com/cheatsheet/raylib_cheatsheet_v4.0.pdf</a></p>
<p>電玩程式庫 - 工程師可將機電流程中與產品設計或製造程序有關的系統, 透過與使用者互動呈現逼真的模擬過程或結果, 也可用來開發與機電系統有關的虛擬整合套件(例如: 透過與實體感測器或影像辨識系統結合, 將實時運動競賽中的運動員動作與虛擬實境或擴增實境系統結合), 也可用來<a href="https://itch.io/games/made-with-raylib">開發電動遊戲</a>(<a href="https://github.com/raysan5/raylib-games">raylib-games</a>).</p>
<p>下載 <a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EX_rMe3i3pZCre5j6UaLxPQB3WchJTfnd1v1KtaJ32dQ_w?e=Qmd9HT">Tiny C Compiler with gd and raylib 程式庫.7z</a> (需要下載密碼)</p>
<p>範例:</p>
<p><a href="/downloads/move_red_dot.c">move_red_dot.c</a></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/*******************************************************************************************
*
*   raylib [core] example - Keyboard input
*
*   Example originally created with raylib 1.0, last time updated with raylib 1.0
*
*   Example licensed under an unmodified zlib/libpng license, which is an OSI-certified,
*   BSD-like license that allows static linking with closed source software
*
*   Copyright (c) 2014-2023 Ramon Santamaria (@raysan5)
*
********************************************************************************************/
// move_red_dot.c
/* on Replit, add pkgs.raylib to replit.nix
   use cc move_red_dot.c -lraylib to compile and link
use ./a.out to execute and move the red dot with arrow keys
*/
// on Portable system, use cc=tcc.exe -run -lgd -lraylib to run

#include "raylib.h"

//------------------------------------------------------------------------------------
// Program main entry point
//------------------------------------------------------------------------------------
int main(void)
{
    // Initialization
    //--------------------------------------------------------------------------------------
    const int screenWidth = 800;
    const int screenHeight = 450;

    InitWindow(screenWidth, screenHeight, "raylib [core] example - keyboard input");

    Vector2 ballPosition = { (float)screenWidth/2, (float)screenHeight/2 };

    SetTargetFPS(60);               // Set our game to run at 60 frames-per-second
    //--------------------------------------------------------------------------------------

    // Main game loop
    while (!WindowShouldClose())    // Detect window close button or ESC key
    {
        // Update
        //----------------------------------------------------------------------------------
        if (IsKeyDown(KEY_RIGHT)) ballPosition.x += 2.0f;
        if (IsKeyDown(KEY_LEFT)) ballPosition.x -= 2.0f;
        if (IsKeyDown(KEY_UP)) ballPosition.y -= 2.0f;
        if (IsKeyDown(KEY_DOWN)) ballPosition.y += 2.0f;
        //----------------------------------------------------------------------------------

        // Draw
        //----------------------------------------------------------------------------------
        BeginDrawing();

            ClearBackground(RAYWHITE);

            DrawText("move the ball with arrow keys", 10, 10, 20, DARKGRAY);

            DrawCircleV(ballPosition, 50, MAROON);

        EndDrawing();
        //----------------------------------------------------------------------------------
    }

    // De-Initialization
    //--------------------------------------------------------------------------------------
    CloseWindow();        // Close window and OpenGL context
    //--------------------------------------------------------------------------------------

    return 0;
}</pre>
<p>在 Replit 與近端程式環境執行結果:</p>
<p>啟動後以鍵盤方向鍵上下左右控制紅點.</p>
<p><img alt="" height="236" src="/images/raylib_move_red_dot_with_arrow_keys.gif" width="400"/></p><h2>setup</h2>
<p>利用隨身碟中的批次檔案, 設定所需的網路環境.</p>
<p><a href="/downloads/cadlab_network_setup.7z">cadlab_network_setup.7z</a></p>
<p>納入個別學員所分配到的 IPv6 固定網址設定: <a href="/downloads/2023_fall_cadlab_network_setup.7z">2023_fall_cadlab_network_setup.7z</a></p>
<p>1_network_setup.bat (需要管理者身分執行, 才能關閉 IPv4 網路, 啟動 IPv6 網路)</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">echo "disable ipv4 and setup proxy for ipv6"
SET CurrentDir=%~dp0
%windir%\system32\reg.exe import %CurrentDir%1_2023_cadlab_network_setup.reg
powershell -executionpolicy bypass -File %CurrentDir%1_disable_ipv4.ps1
rem mstsc /admin /v:your_server
exit</pre>
<p>其中包含以下兩個設定檔案:</p>
<p>1_2023_cadlab_network_setup.reg 用於關閉自動 Proxy 搜尋, 開啟手動設定 Proxy server.</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">Windows Registry Editor Version 5.00

 [HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings]
 ; disable AutoDetect
"AutoDetect"=dword:00000000
"MigrateProxy"=dword:00000001
; enable Proxy
"ProxyEnable"=dword:00000001 
"ProxyHttp1.1"=dword:00000000 
"ProxyServer"="http://[2001:288:6004:17::4]:3128"
"ProxyOverride"="localhost;192.168.1.0/24;&lt;local&gt;"</pre>
<p>1_disable_ipv4.ps1 用於關閉 IPv4 網路協定, 開啟 IPv6 網路協定.</p>
<p>對 ChatGPT 提問:</p>
<p style="padding-left: 30px;">powershell "Disable-NetAdapterBinding -Name "*" -ComponentID ms_tcpip<br/>Enable-NetAdapterBinding -Name "*" -ComponentID ms_tcpip6"可以關閉 IPv4 網路, 開啟 IPv6, 如何同時設定 IPv6 所使用的兩台 DNS servers?</p>
<p>原先設定:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">Disable-NetAdapterBinding -Name "*" -ComponentID ms_tcpip
Enable-NetAdapterBinding -Name "*" -ComponentID ms_tcpip6</pre>
<p>修改後的 1_disable_ipv4.ps1 Powershell 設定檔案:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false"># 關閉 IPv4 網路
Disable-NetAdapterBinding -Name "*" -ComponentID ms_tcpip

# 啟用 IPv6 網路
Enable-NetAdapterBinding -Name "*" -ComponentID ms_tcpip6

# 設置 IPv6 網路中的兩個 DNS 伺服器 (hinet)
$dnsServers = "2001:b000:168::1", "2001:b000:168::2"
Set-DnsClientServerAddress -InterfaceAlias "*" -ServerAddresses $dnsServers
</pre>
<p>對 ChatGPT 提問:</p>
<p style="padding-left: 30px;">the following powershell script can setup windows network connection "# 關閉 IPv4 網路<br/>Disable-NetAdapterBinding -Name "*" -ComponentID ms_tcpip<br/> <br/># 啟用 IPv6 網路<br/>Enable-NetAdapterBinding -Name "*" -ComponentID ms_tcpip6<br/> <br/># 設置 IPv6 網路中的兩個 DNS 伺服器 (hinet)<br/>$dnsServers = "2001:b000:168::1", "2001:b000:168::2"<br/>Set-DnsClientServerAddress -InterfaceAlias "*" -ServerAddresses $dnsServers" what if the ipv6 address need set to 2001:288:6004:17:1234::1234 and subnet prefix as 64 and ipv6 gateway as 2001:288:6004:17::254</p>
<p>可以得到下列回應答案:</p>
<p>加上個別學員所分配到的 IPv6 固定網址設定後的 1_disable_ipv4.ps1 Powershell 設定檔案 (必須自行更改固定 Ipv6 位址):</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false"># 關閉 IPv4 網路
Disable-NetAdapterBinding -Name "*" -ComponentID ms_tcpip
  
# 啟用 IPv6 網路
Enable-NetAdapterBinding -Name "*" -ComponentID ms_tcpip6
  
# 設置 IPv6 網路中的兩個 DNS 伺服器 (hinet)
$dnsServers = "2001:b000:168::1", "2001:b000:168::2"
Set-DnsClientServerAddress -InterfaceAlias "*" -ServerAddresses $dnsServers


# 設定 IPv6 固定位址 (fixed address), 子網路首碼長度 (subnet prefix) 與網路預設閘道 (gateway) 等三個變數
$ipv6Address = "2001:288:6004:17:請使用個人所分配到的 IPv6 位址"
$subnetPrefixLength = 64
$gateway = "2001:288:6004:17::254"
 
# 參考 https://serverfault.com/questions/427234/getting-network-interface-device-name-in-powershell
$query = "SELECT * FROM Win32_NetworkAdapter WHERE Manufacturer != 'Microsoft' AND NOT PNPDeviceID LIKE 'ROOT\\%'"
$interfaces = Get-WmiObject -Query $query | Sort index
$interfaces | ForEach{
    $friendlyname = $_ | ForEach-Object { $_.NetConnectionID }
    New-NetIPAddress -AddressFamily "IPv6" -InterfaceAlias $friendlyname -IPAddress $ipv6Address -PrefixLength $subnetPrefixLength -DefaultGateway $gateway
}

 
# 列出所使用的 IPv6 網路通訊協定內容
Write-Host "IPv6 Address: $ipv6Address/$subnetPrefixLength"
Write-Host "IPv6 Gateway: $gateway"</pre>
<p>下載 <a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/Eck0KdLe1uZEk_LJ2tkEf4ABZyW32cmq5WZVl52Fww9C2A?e=i5Dm3t">2023_fall_w7_cadlab_network_setup.7z</a> <span>(需要下載密碼), 必須先放入個人所分配到的 IPv6 位址後, 以管理者身分執行批次檔案, 就能直接完成電腦輔助設計室中電腦的網路連線設定.</span></p>
<p><span>各學員所分配的固定 IPv6 位址如下:</span></p>
<p style="padding-left: 30px;">1a 學員展示用 IPv6 位址: 2001:288:6004:17:2023:cba::<a href="https://mde.tw/cpnote/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9215c7c160119721ded887018cda8f4e/raw/593a8e462e0d8e7996f0bca3dd922adfdd4962e0/generate_cp2023_1a_site_repo.py">班級名單序號</a></p>
<p style="padding-left: 30px;"><span>2b 學員展示用 IPv6 位址: 2001:288:6004:17:2023:cbb::</span><a href="https://mde.tw/cpnote/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9215c7c160119721ded887018cda8f4e/raw/593a8e462e0d8e7996f0bca3dd922adfdd4962e0/generate_cp2023_1b_site_repo.py">班級名單序號</a></p><h2>replit</h2>
<p><a href="https://docs.replit.com/">https://docs.replit.com/</a></p>
<p>w8: 為了強化保全, Replit 目前只能透過 Gmail 或 Github 帳號登入, 無法直接利用帳號與密碼登入.</p>
<p>請注意: 原本 Replit Python 3.8 虛擬環境的目錄為 venv, 但是 Python 3.10 虛擬環境的目錄已經改用 .pythonlibs, 因此倉儲若不希望帶著此一虛擬環境檔案, 則可以將 .pythonlibs 附加到 .gitignore</p>
<p>另外在近端必須處理 Python 3.12.0 版本中的 <a href="https://docs.python.org/3/library/ssl.html">https://docs.python.org/3/library/ssl.html</a> </p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">httpd.socket = ssl.wrap_socket(httpd.socket,
                   ^^^^^^^^^^^^^^^
AttributeError: module 'ssl' has no attribute 'wrap_socket'
</pre>
<p>將 GitHub cmsimde 倉儲導入 Replit 的方法, 請參考 <a href="https://mde.tw/cadnote/content/Replit.html">https://mde.tw/cadnote/content/Replit.html</a> 中的說明.</p>
<p>備註：建立 yengm (at gm.nfu) 帳號, for Replit <a href="https://replit.com/site/teams-for-education">Teams for Education</a>.</p>
<p>在 Replit C 程式環境中額外納入 gnuplot 套件的 replit.nix 設定:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">{ pkgs }: {
	deps = [
		pkgs.sudo
        pkgs.clang_12
		pkgs.ccls
		pkgs.gdb
		pkgs.gnumake
        pkgs.gnuplot
	];
}</pre>
<p>C with gnuplot:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() {
    // Open a file to write displacement and velocity data
    FILE *outputFile = fopen("motion_data.txt", "w");
    if (!outputFile) {
        fprintf(stderr, "Failed to create data file.\n");
        return 1;
    }

    // Simulate motion for 10 seconds and calculate displacement and velocity, while writing data to the file
    double x = 0.2;  // Initial displacement
    double v = 0.0;  // Initial velocity
    double dt = 0.01; // Time step
    double t = 0.0;  // Time

    while (t &lt;= 10.0) {
        double acceleration = (-10.0 * x - 0.5 * v) / 1.0; // Modified system parameters here
        v += acceleration * dt;
        x += v * dt;

        fprintf(outputFile, "%lf %lf %lf\n", t, x, v);

        t += dt;
    }

    // Close the data file
    fclose(outputFile);

    // Start a Gnuplot process using popen
    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");
    if (!gnuplotPipe) {
        fprintf(stderr, "Failed to start Gnuplot.\n");
        return 1;
    }

    // Use Gnuplot plotting commands, specify font and output as PNG
    fprintf(gnuplotPipe, "set terminal pngcairo enhanced font 'default,10' size 800,400\n");
    fprintf(gnuplotPipe, "set output 'motion_plot.png'\n");
    fprintf(gnuplotPipe, "set title 'Displacement and Velocity vs. Time'\n");
    fprintf(gnuplotPipe, "set xlabel 'Time (s)'\n");
    fprintf(gnuplotPipe, "set ylabel 'Displacement (m)'\n");
    fprintf(gnuplotPipe, "plot 'motion_data.txt' using 1:2 with lines lw 2 title 'Displacement', \
                             'motion_data.txt' using 1:3 with lines lw 2 title 'Velocity'\n");

    // Close the Gnuplot process
    fprintf(gnuplotPipe, "exit\n");
    pclose(gnuplotPipe);

    return 0;
}
</pre>
<p>在選擇 Python 作為 Language 的 repl 專案中, cc 已經內建, 若要加裝 gnuplot 套件則可在 replit.nix 設定檔案中加入 pkgs.<a href="http://www.gnuplot.info/">gnuplot</a>, pkgs.<a href="https://invisible-island.net/ncurses/">ncurses</a>.dev, pkgs.<a href="https://github.com/libgd/libgd">gd</a>, pkgs.<a href="https://www.vim.org/">vim</a>HugeX 與 pkgs.<a href="https://github.com/raysan5/raylib">raylib</a>:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">{ pkgs }: {
    deps = [
      pkgs.gnuplot
      pkgs.ncurses.dev
      pkgs.gd
      pkgs.vimHugeX
      pkgs.raylib
    ];
}</pre>
<p>gnuplot: 數值分析繪圖程式庫</p>
<p>gd: 泛用型繪圖程式庫</p>
<p>ncurses: 文字型類 GUI 程式庫</p>
<p>vim: 指令模式編輯器</p>
<p>raylib: 電動遊戲程式庫</p>
<p></p>
<p></p><h2>MSD</h2>
<p>學習要點(以下各項提問, 可以透過與 ChatGPT 的對話, 取得相關參考內容):</p>
<p style="padding-left: 30px;">何謂微分方程式(Differential Equations)?何謂常微分方程式(Ordinary Differential Equations)?</p>
<p style="padding-left: 30px;">為何要解出系統運動方程式(System Equations of Motion)的結果?</p>
<p style="padding-left: 30px;">何謂牛頓運動定律?</p>
<p style="padding-left: 30px;">工程師通常可以採甚麼方法解常微分方程式?</p>
<p style="padding-left: 30px;">何謂數值分析(Numerical Analysis)?與計算機程式有何關聯?</p>
<p style="padding-left: 30px;">工程師為什麼要在網頁中呈現系統的分析過程?</p>
<p style="padding-left: 30px;">何謂 Euler's Method?</p>
<p style="padding-left: 30px;">為什麼可以利用 Euler's Method 解常微分方程式?</p>
<p style="padding-left: 30px;">何謂 Runge-Kutta Method?</p>
<p style="padding-left: 30px;">Euler's Method 與 Runge-Kutta Method 有沒有關聯?</p>
<p style="padding-left: 30px;">可以將 Euler's Method 視為一階 Runge-Kutta Method 嗎?</p>
<p style="padding-left: 30px;">Runge-Kutta Method 是如何推導出來的?</p>
<p style="padding-left: 30px;">為什麼要利用計算機程式語言, 採數值分析法解系統的運動方程式?</p>
<p style="padding-left: 30px;">工程師在設計產品之前的理論分析重要嗎?</p>
<p>Mass-Spring-Damper 是一個典型的物理模型, 由質量-彈簧-阻尼器等三個元件組成, 若將彈簧其拉力與變形量成正比, 若假設阻尼器的阻力大小則與其受力方向的速度成正比, 根據牛頓運動定律, 就可以從物理模型的自由體圖導入系統的運動方程式. 接下來就要利用計算機程式, 解此一系統的微分方程式.</p>
<p>計算機程式課程主要從基本的 C 語法開始, 設法利用數值分析法解簡單的 <a href="https://en.wikipedia.org/wiki/Mass-spring-damper_model">mass-spring-damper</a> 運動方程式, 並將質量運動的位移與速度, 以 Gnuplot 畫出後, 將 C 程式改寫為 Javascript, 以便能直接將質量運動的位移與速度圖顯示在網頁中.</p>
<p><img caption="false" height="159" src="/images/mass_spring_damper.png" width="250"/></p>
<p>in png:</p>
<p style="padding-left: 30px;"><img caption="false" height="36" src="/images/mass_spring_damper_eom.png" width="200"/></p>
<p>in <a href="https://www.mathjax.org/#gettingstarted">MathJax</a> v3:</p>
<p style="padding-left: 30px;">\(m.\ddot{x}(t) = -c.\dot{x}(t) - k.x(t)\)</p>
<p>Solve <a href="https://nfuedu-my.sharepoint.com/:b:/g/personal/yen_nfu_edu_tw/EZ222iTCfJdJjLNS6a55IDoBs74yVGLWuAxN-1VTJE2PNQ?e=ZbhQyw">spring-mass-damper problem in Matlab.pdf</a> (需要下載密碼)</p>
<p>接續 Javascript 基本數值分析方法的學習, 將採 Brython 語法改寫後, 希望能直接在網頁中透過類似 Python 的語法, 進行數值分析運算與繪圖. 最後再將 Brython 語法轉為 CPython 程式, 讓使用者可以直接在電腦操作系統中進行數值分析與繪圖.</p>
<p>上述從 C, Javascript, Brython 到 Python 的範例練習, 主要目的是希望呈現最基本的網際機電資整合系統設計流程, 讓機械設計工程師能夠將所設計的產品 3D 零組件完成後, 轉入機電模擬系統 (CoppeliaSim, Webots 或 Robodk), 設法編寫或運用既有的全球資訊網前後端程式架構, 結合近端的實體模型與全球資訊網端的機電控制系統模擬, 進行機械、電子、電機與資工領域工程師協同產品設計.</p>
<p>由於 CoppeliaSim、Webots 以及 Solvespace 都是採用 C++ 程式語言編寫, 且都屬開放源程式套件, 使用者若要更進一步了解此類工具的設計與配置方法, 可以自行透過進階內容學習.</p>
<p>Euler's Method(<a href="https://youtu.be/Atvaac3_NlM">教學影片</a>, <a href="https://www.freecodecamp.org/news/eulers-method-explained-with-examples/">說明1</a>, <a href="https://web.uvic.ca/~tbazett/diffyqs/numer_section.html">說明2</a> in English):</p>
<p><a href="https://tutorial.math.lamar.edu/classes/de/eulersmethod.aspx">https://tutorial.math.lamar.edu/classes/de/eulersmethod.aspx</a></p>
<p><img alt="" height="227" src="/images/Euler_method__plot.png" width="400"/></p>
<p>針對常微分方程式: \(\frac{dy}{dx}=f(x,y)\)</p>
<p>假如 \(x_{n+1}\) 與 \(x_{n}\) 之間的距離非常接近, 則 \(\frac{y_{n+1}-y_{n}}{x_{n+1}-x_{n}}\approx f(x_{n},y_{n})\)</p>
<p>若取 \(h=x_{n+1}-x_{n}\) 作為 x 座標在每一次計算過程的增量值.</p>
<p>則可以在已知此一常微分方程式的起始值之後, 逐一透過 h 增量值計算此常微分方程式在各 x 座標點上的對應值:</p>
<p>\(y_{n+1}-y_{n}\approx f(x_{n},y_{n})h\)</p>
<p>
<script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
<script src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
</p>
<p>此外, 只要在網頁中導入:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;script src="https://polyfill.io/v3/polyfill.min.js?features=es6"&gt;&lt;/script&gt;
&lt;script src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"&gt;&lt;/script&gt;</pre>
<p>就可以利用 MathJax v3 的 \(\LaTeX\) 語法, 輸入所需要呈現的數學方程式.</p>
<p><a href="https://twiki.cern.ch/twiki/pub/Main/CollaborativeProjects/7_Application_-_1.pdf">Runge-Kutta Method</a>:</p>
<p style="padding-left: 30px;"><a href="https://www.researchgate.net/publication/340027249_Developments_in_Runge-Kutta_Method_to_Solve_Ordinary_Differential_Equations">Developments in Runge–Kutta Method to Solve Ordinary Differential Equations</a></p>
<p style="padding-left: 30px;"><a href="https://www.me.psu.edu/cimbala/Learning/General/Runge_Kutta_Technique.pdf">https://www.me.psu.edu/cimbala/Learning/General/Runge_Kutta_Technique.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://homepage.math.uiowa.edu/~atkinson/papers/NAODE_Book.pdf">NUMERICAL SOLUTION OF ORDINARY DIFFERENTIAL EQUATIONS</a> (from one of the authors)</p>
<hr/>
<p>將 euler_gnuplot_msd_ex1.c 存入 downloads 目錄, 然後在 replit.nix 中進行 C 與 gnuplot 套件的設置:</p>
<p>replit.nix 設定內容:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">{ pkgs }: {
    deps = [
  pkgs.qtile
  pkgs.sudo
  pkgs.clang_12
        pkgs.ccls
        pkgs.gdb
        pkgs.gnumake
        pkgs.gnuplot
    ];
}</pre>
<p>euler_gnuplot_msd_ex1.c 程式內容:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// 包含標準輸出入程式庫的標頭文件
#include &lt;stdio.h&gt;

// 主函式
int main() {
    // Open a file to write displacement and velocity data
    FILE *outputFile = fopen("motion_data.txt", "w");
    if (!outputFile) {
        fprintf(stderr, "Failed to create data file.\n");
        return 1;
    }

    // Simulate motion for 10 seconds and calculate displacement and velocity, while writing data to the file
    double x = 0.2;  // Initial displacement
    double v = 0.0;  // Initial velocity
    double dt = 0.01; // Time step
    double t = 0.0;  // Time

    while (t &lt;= 10.0) {
        double acceleration = (-10.0 * x - 0.5 * v) / 1.0; // Modified system parameters here
        v += acceleration * dt;
        x += v * dt;

        fprintf(outputFile, "%lf %lf %lf\n", t, x, v);

        t += dt;
    }

    // Close the data file
    fclose(outputFile);

    // Start a Gnuplot process using popen
    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");
    if (!gnuplotPipe) {
        fprintf(stderr, "Failed to start Gnuplot.\n");
        return 1;
    }

    // Use Gnuplot plotting commands, specify font and output as PNG
    fprintf(gnuplotPipe, "set terminal pngcairo enhanced font 'default,10' size 800,400\n");
    fprintf(gnuplotPipe, "set output './../images/motion_plot.png'\n");
    fprintf(gnuplotPipe, "set title 'Displacement and Velocity vs. Time'\n");
    fprintf(gnuplotPipe, "set xlabel 'Time (s)'\n");
    fprintf(gnuplotPipe, "set ylabel 'Displacement (m)'\n");
    fprintf(gnuplotPipe, "plot 'motion_data.txt' using 1:2 with lines lw 2 title 'Displacement', \
                             'motion_data.txt' using 1:3 with lines lw 2 title 'Velocity'\n");

    // Close the Gnuplot process
    fprintf(gnuplotPipe, "exit\n");
    pclose(gnuplotPipe);

    return 0;
}
</pre>
<p>在 Shell 工具頁面:</p>
<p>cd downloads</p>
<p>cc euler_gnuplot_msd_ex1.c</p>
<p>經過編譯與連結後取得 a.out</p>
<p>然後利用 ./a.out 執行, 就可以在 images 目錄下得到 mass-spring-damper 微分運動方程式採 Euler's Method 模擬數值分析結果, motion_plot.png:</p>
<p><img alt="" height="200" src="/images/motion_plot.png" width="400"/></p>
<p>假如程式中需要使用數學函數運算則可 #include &lt;math.h&gt;, 並在編譯時納入 -lm, 亦即連結數程式庫.</p>
<p>cc ex_with_math.c -lm -o ex_with_math</p>
<p>然後以 ./ex_with_math 執行</p>
<h3>clang</h3>
<p>利用 cc 執行編譯 C程式, 請參考 <a href="https://replit.com/@wcms/cjavascriptpython?v=1#README.txt">https://replit.com/@wcms/cjavascriptpython?v=1#README.txt</a> </p>
<p>以下為與 clang 有關的進階自學內容:</p>
<p><a href="https://opensource.apple.com/source/clang/clang-23/clang/tools/clang/www/comparison.html">clang 與其他開源編譯器的比較</a></p>
<p>安裝 clang (801MB) 與 valgrind (91.8MB):</p>
<p style="padding-left: 30px;">Ubuntu:</p>
<p style="padding-left: 60px;">sudo apt update &amp;&amp; sudo apt upgrade</p>
<p style="padding-left: 60px;">sudo apt install clang</p>
<p style="padding-left: 60px;">sudo apt install valgrind</p>
<p style="padding-left: 30px;">Windows:</p>
<p style="padding-left: 60px;">安裝 <a href="https://learn.microsoft.com/en-us/windows/wsl/install">WSL</a> 之後, 再使用 Ubuntu 方法安裝 clang 與 valgrind</p>
<p>References:</p>
<p style="padding-left: 30px;"><a href="https://cs.indstate.edu/wiki/index.php/C_Programming_-_Getting_Started">https://cs.indstate.edu/wiki/index.php/C_Programming_-_Getting_Started</a></p>
<p style="padding-left: 30px;"><a href="https://en.wikipedia.org/wiki/Clang">https://en.wikipedia.org/wiki/Clang</a></p>
<p style="padding-left: 30px;"><a href="https://valgrind.org/">https://valgrind.org/</a></p>
<h3>編譯範例</h3>
<p>以下為 C++ 原始碼進階自學編譯範例:</p>
<p>先建立 msys64 可攜系統:</p>
<p style="padding-left: 30px;">下載 <a href="https://www.msys2.org/">https://www.msys2.org/</a> 安裝後, 將 C:\msys64_20230718, 複製到 Y:\msys64_20230718</p>
<p style="padding-left: 30px;">套件名稱帶有 mingw-w64-x86_64 表示用於 MinGW 64 bit 操作系統:</p>
<p style="padding-left: 60px;">更新系統核心組件:</p>
<p style="padding-left: 90px;">pacman -Syu</p>
<p style="padding-left: 60px;">安裝基本 C/C++ 編譯與開發工具:</p>
<p style="padding-left: 90px;">pacman -S mingw-w64-x86_64-toolchain</p>
<p style="padding-left: 60px;">安裝 CMake</p>
<p style="padding-left: 90px;">pacman -S mingw-w64-x86_64-cmake</p>
<p>下載 <a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EQHpkbGf-iFAnvQpjr6YpvoBT5IGyhc7zkRFldLb9gzumQ?e=07fTJm">msys64_20230718_cmake.7z</a> (需要下載密碼)</p>
<hr/>
<p>編譯 Solvespace:</p>
<p style="padding-left: 30px;"><a href="https://solvespace.com/index.pl">Solvespace</a> 是一套小型的開放源參數式電腦輔助設計與繪圖軟體.</p>
<p style="padding-left: 30px;">git clone --recurse-submodules https://github.com/solvespace/solvespace.git<br/><br/>cd solvespace<br/><br/>git checkout v3.1<br/><br/>mkdir build<br/><br/>cd build<br/><br/>cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release<br/><br/>mingw32-make</p>
<p style="padding-left: 30px;">下載 <a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EbxAx7kkFERGiND16jP2KG4BFt6XH7EojD5_39uk8qWihw?e=tZF6NP">solvespace_src_compiled.7z</a> (需要下載密碼)</p>
<p style="padding-left: 30px;">在 Windows 若無法以 https 取下 github.com 中的倉儲資料, 可以在 .gitconfig 中加上:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">[http "https://github.com"]
sslVerify = false</pre>
<p style="padding-left: 30px;">表示不使用 Windows 的 SChannel API 進行認證, 轉而使用 OpenSSL handshake 認證.</p>
<hr/>
<p>利用 MSYS2 編譯 SciTE 編輯器:</p>
<p style="padding-left: 30px;">從 <a href="https://www.scintilla.org/SciTE.html">https://www.scintilla.org/SciTE.html</a> 下載 Scite 原始碼.</p>
<p style="padding-left: 30px;">cd scintilla\win32</p>
<p style="padding-left: 30px;"><span>mingw32-make</span></p>
<p style="padding-left: 60px;">get Scintilla.dll and SciLexer.dll under <span>scintilla\bin</span></p>
<p style="padding-left: 30px;">cd scite\win32</p>
<p style="padding-left: 30px;">mingw32-make</p>
<p style="padding-left: 60px;">get SciTE.exe under scite\bin</p>
<p style="padding-left: 30px;">need extra libgcc_s_seh-1.dll, libstdc++-6.dll and libwinpthread-1.dll along with <span>Scintilla.dll and </span><span>SciLexer.dll </span>to execute SciTE.exe</p>
<p style="padding-left: 30px;">下載 <a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/Eai7ZaPaDzdLjObSeCYpSJoBYSyLEEq8iREAsArUVycgug?e=W7PA7x">SciTE537_src_compiled.7z</a> (需要下載密碼)</p>
<p>SciTE properties files: <a href="http://wcm.cycu.org:88/github/cad2019/downloads/SciTE_properties_files.7z">SciTE_properties_files.7z</a></p>
<hr/>
<p>利用 MSYS2 編譯 Tiny C Compiler 並配置 gd 程式庫環境:</p>
<p>從 <a href="https://github.com/Tiny-C-Compiler/mirror-repository">https://github.com/Tiny-C-Compiler/mirror-repository</a> 下載 Tiny C Compiler 0.9.27 原始碼後, 利用 win32 目錄中的 build-tcc.bat 完成編譯.</p>
<p>在 MSYS2 環境中以 pacman -S mingw-w64-x86_64-libgd 安裝 gd 程式庫後, 可以取得 2.3.3 版的 libgd.dll</p>
<p>利用 tcc -impdef -v libgd.dll -o libgd.def 取得 libgd.def 放入 Tiny C Compiler 系統中 win32 目錄中的 lib 後, 配合 gd 系統的 header 檔案後, 就可以利用 tcc gd_roc_flag.c -lgd 編譯連結後取得 gd_roc_flag.exe 可執行檔案. 之後則必須配合 libgd.dll 與 MSYS2 相關 dll 檔案執行 gd_roc_flag.exe</p>
<p>下載 <a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EbKDl4ElS8FDkrBwRbPTQCQBu-KoWRHVabZ79hwE5Woaaw?e=1obiXK">MSYS2 編譯的 Tiny C Compiler 0.9.27 與 gd 程式庫 2.3.3 可攜套件</a> (需要下載密碼)</p>
<p>假如希望利用 Visual Studio C++ 編譯 gd 2.3.3 版程式庫, 請參考<a href="https://github.com/libgd/libgd/blob/master/windows/readme.md">這裡的說明</a>.</p>
<p>Reference:</p>
<p style="padding-left: 30px;"><a href="https://github.com/phoenixthrush/Tiny-C-Compiler">https://github.com/phoenixthrush/Tiny-C-Compiler</a> </p>
<p style="padding-left: 30px;"><a href="https://packages.msys2.org/package/mingw-w64-x86_64-libgd">https://packages.msys2.org/package/mingw-w64-x86_64-libgd</a> </p>
<h1>課程評分</h1>
<p>課程評分:</p>
<p style="padding-left: 30px;">線上測驗、期中網站與簡報、期末網站與簡報.</p>
<p>線上測驗:</p>
<p style="padding-left: 30px;">建立帳號後 (<span style="background-color: #ffff99;">請將密碼寫入手機的備忘錄</span>), 每週不定時進行.</p>
<p>期中網站評分與簡報:</p>
<p style="padding-left: 30px;">期中考前兩週開始進行.</p>
<p>期末網站評分與簡報:</p>
<p style="padding-left: 30px;">期末考前兩週開始進行.</p>
<p>期中成績計算:</p>
<p style="padding-left: 30px;">期中考與之前各週線上測驗成績平均</p>
<p>學期成績計算:</p>
<p style="padding-left: 30px;">(期中成績與之後各週線上測驗成績平均)*60%+(期中網站與簡報成績)*20%+(期末網站與簡報成績)*20%</p>
<h1>課程主題</h1>
<ol>
<li>認識數位環境與資源</li>
<li>工程師的計算機程式能力</li>
<li>開發程式工具 (解決特定問題)</li>
<li>課程總結</li>
</ol>
<h2>數位環境與資源</h2>
<p>1. 認識數位環境與資源</p>
<p style="padding-left: 30px;">企業所提供的數位資源:</p>
<p style="padding-left: 60px;"><a href="https://chat.openai.com/">ChatGPT</a> (Google Bard and Perplexity AI)</p>
<p style="padding-left: 60px;"><a href="https://www.autodesk.com/education/edu-software/overview">AutoDesk</a> (Dassault Solidworks and CATIA)</p>
<p style="padding-left: 60px;"><a href="https://resources.sw.siemens.com/zh-TW/download-solid-edge-student-edition">Siemens Solid Edge</a> (NX)</p>
<p style="padding-left: 90px;"><a href="https://www.sw.siemens.com/en-US/academic/engineering-student-resources/engineering-student-software/">Engineering Student Softwares</a></p>
<p style="padding-left: 60px;"><a href="https://www.ptc.com/en/products/education/free-software/creo-college-download">PTC Creo</a></p>
<p style="padding-left: 90px;"><a href="https://www.onshape.com/en/education/">Onshape for Education</a></p>
<p style="padding-left: 60px;"><a href="https://www.ansys.com/academic/students">Ansys</a> (Comsol and SIMULIA Abaqus)</p>
<p style="padding-left: 60px;"><a href="https://www.microsoft.com/en-us/education/products/office">Office 365 for Education</a></p>
<p style="padding-left: 60px;"><a href="https://github.com">Github</a></p>
<p style="padding-left: 90px;"><a href="https://classroom.github.com">Github Classroom</a></p>
<p style="padding-left: 60px;"><a href="https://replit.com">Replit</a></p>
<p style="padding-left: 60px;"><a href="https://robodk.com/">RoboDK</a></p>
<p style="padding-left: 60px;"><a href="https://www.coppeliarobotics.com/">CoppeliaSim</a></p>
<p style="padding-left: 60px;"><a href="https://www.cyberbotics.com/">Webots</a></p>
<p style="padding-left: 30px;">學校所提供的數位資源</p>
<p style="padding-left: 60px;">軟體 <span>(</span><span>使用校園網路或 VPN 下載)</span></p>
<p style="padding-left: 90px;"><a href="https://software.nfu.edu.tw/Windows/tw/Win_10_22H2.4_64BIT_Ch.ISO">Windows 10 64位元 22H2.4</a></p>
<p style="padding-left: 90px;"><a href="https://software.nfu.edu.tw/Windows/tw/Win_11_22H2.6_64BIT_Ch.ISO">Windows 11 64位元 22H2.6</a></p>
<p style="padding-left: 90px;"><a href="https://software.nfu.edu.tw/KMS/windows_kms.bat">windows_kms.bat</a></p>
<p style="padding-left: 90px;"><span><a href="https://software.nfu.edu.tw/Office/tw/Office_Pro_2019_64Ch.iso">Office 2019 64位元</a></span></p>
<p style="padding-left: 120px;"><a href="https://software.nfu.edu.tw/KMS/Office_2019_KMS.bat">office_2019_kms.bat</a></p>
<p style="padding-left: 90px;"><span><a href="https://software.nfu.edu.tw/Office/tw/Office_Pro_Plus_2016_64Ch.iso">Office 2016 64位元</a></span></p>
<p style="padding-left: 120px;"><span><a href="https://software.nfu.edu.tw/KMS/Office_2016_KMS.bat">office_2016_kms.bat</a></span></p>
<p style="padding-left: 90px;"><a href="https://software.nfu.edu.tw/Developer/Visual%20Studio/en/Visual_Studio_Pro_2015.zip">Visual Studio Pro 2015 英文版</a></p>
<p style="padding-left: 90px;"><a href="https://software.nfu.edu.tw/MATLAB/R2023a_windows.zip">MATLAB for Windows 2023a 64位元</a></p>
<p style="padding-left: 120px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-3189-0">Introduction to MATLAB for Engineers and Scientists</a></p>
<p style="padding-left: 120px;"><a href="https://link.springer.com/book/10.1007/978-1-4612-1754-1">Introduction to Partial Differential Equations with MATLAB</a></p>
<p style="padding-left: 90px;"><a href="https://software.nfu.edu.tw/MATLAB/R2022alinux.zip">MATLAB for Linux 2022a 64位元</a></p>
<p style="padding-left: 120px;"><a href="https://software.nfu.edu.tw/files/matlab_Final.pdf">MATLAB 安裝說明</a></p>
<p style="padding-left: 120px;"><a href="https://software.nfu.edu.tw/files/matlab_ENG_final.pdf">MATLAB Guideline</a></p>
<p style="padding-left: 60px;">電子資源</p>
<p style="padding-left: 90px;">數位學習網: <a href="https://www.nfu.edu.tw/zh/elearning">https://www.nfu.edu.tw/zh/elearning</a> </p>
<p style="padding-left: 90px;">eBooks and Journals: <a href="https://link.springer.com">https://link.springer.com</a> </p>
<p style="padding-left: 120px;"><a href="https://link.springer.com/books/i/65">Introducing eBooks</a></p>
<p style="padding-left: 30px;">綜合工程第一館網路配置</p>
<p style="padding-left: 60px;">機械設計工程系</p>
<p style="padding-left: 90px;">IPv4 網段 (140.130.17.0/24)</p>
<p style="padding-left: 120px;">Gateway: 140.130.17.254</p>
<p style="padding-left: 120px;">DNS: 140.130.17.3</p>
<p style="padding-left: 90px;">IPv6 網段 (2001:288:6004:17::/32)</p>
<p style="padding-left: 120px;">Gateway: 2001:288:6004:17::254</p>
<p style="padding-left: 120px;">DNS: 2001:288:6004:17::3</p>
<p style="padding-left: 60px;">有線網路</p>
<p style="padding-left: 60px;">無線網路</p>
<p style="padding-left: 30px;">綜一館電腦資源</p>
<p style="padding-left: 60px;">可借用電腦教室</p>
<p style="padding-left: 90px;">磁區設定與所安裝軟體</p>
<p style="padding-left: 60px;">工作站中的伺服器</p>
<p style="padding-left: 90px;"><a href="https://s1511.cycu.org">https://s1511.cycu.org</a> </p>
<p style="padding-left: 120px;"><a href="https://link.springer.com/book/10.1007/978-0-230-80245-2">Introducing UNIX and Linux</a></p>
<p style="padding-left: 30px;">電腦輔助設計室</p>
<p style="padding-left: 60px;">兩種不同規格的電腦</p>
<p style="padding-left: 30px;">協同產品設計室</p>
<p style="padding-left: 60px;">虛實手足球系統</p>
<p style="padding-left: 90px;">Arduino</p>
<p style="padding-left: 90px;">CoppeliaSim</p>
<p style="padding-left: 90px;">RoboDK</p>
<p style="padding-left: 60px;">手足球檯</p>
<p style="padding-left: 90px;">Rasperry Pi</p>
<p style="padding-left: 90px;">Webcam</p>
<h3>上課系統</h3>
<p style="padding-left: 30px;"><a href="https://chat.openai.com/">ChatGPT</a> (從 <a href="https://chat.openai.com/auth/login">https://chat.openai.com/auth/login</a> 以 Gmail 帳號登入, 也可在手機安裝 ChatGPT App)</p>
<p style="padding-left: 30px;"><a href="https://www.microsoft.com/en-us/education/products/office">Office 365 for Education</a></p>
<p style="padding-left: 30px;"><a href="https://github.com">Github</a></p>
<p style="padding-left: 60px;"><a href="https://classroom.github.com">Github Classroom</a></p>
<p style="padding-left: 30px;"><a href="https://replit.com">Replit</a></p>
<p style="padding-left: 60px;"><a href="https://www.youtube.com/watch?v=D4f7_lPwXtE">Welcome to Replit</a></p>
<h4>進階自學系統</h4>
<p style="padding-left: 30px;"><a href="https://www.coppeliarobotics.com/coppeliaSim">CoppeliaSim</a></p>
<p style="padding-left: 60px;">2023.03 最新版本為 4.5.1</p>
<p style="padding-left: 60px;">4.4.0 則發布於 2022.09</p>
<p style="padding-left: 60px;"><a href="https://github.com/CoppeliaRobotics/zmqRemoteApi">ZeroMQ Remote API for CoppeliaSim</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/CoppeliaRobotics/simWS">WebSocket plugin for CoppeliaSim</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/CoppeliaRobotics/threejsFrontend">three.js Frontend</a></p>
<p style="padding-left: 30px;"><a href="https://robodk.com/">RoboDK</a></p>
<p style="padding-left: 60px;">2023.07 最新的版本為<span> </span><a href="https://robodk.com/downloads/Install-RoboDK-64-v5.6.2.exe">Download 5.6.2</a></p>
<p style="padding-left: 60px;"><a href="https://robodk.com/downloads-v/Install-RoboDK-64-v5.2.2.exe">Download 5.2.2</a><span> </span>則發布於 2021.03.22</p>
<p style="padding-left: 60px;">RoboDK 源自<span> </span><a href="https://www.parallemic.org/RoKiSim.html">https://www.parallemic.org/RoKiSim.html</a></p>
<p style="padding-left: 60px;">在計算機程式課程中, 我們可以利用 RoboDK 中的 Robot 控制來練習 Python 各種語法的應用, 其中也將牽涉一些線性代數 (Linear Algebra,<span> </span><a href="https://realpython.com/python-linear-algebra/">1</a>,<span> </span><a href="https://pythonnumericalmethods.berkeley.edu/notebooks/chapter14.01-Basics-of-Linear-Algebra.html">2</a>) 與幾何 (Geometry,<span> </span><a href="https://open.umn.edu/opentextbooks/textbooks/508">1</a>,<span> </span><a href="https://open.umn.edu/opentextbooks/subjects/geometry-and-trigonometry">2</a>,<span> </span><a href="https://www.lakelandschools.org/lakelandhigh/academics/geometry_online_text_book.php">3</a>) 的應用.</p>
<h2>程式能力</h2>
<p>2. 工程師的計算機程式能力</p>
<p style="padding-left: 30px;">C, Javascript, Brython, Python</p>
<p style="padding-left: 30px;">Windows 64 位元操作系統下的工具:</p>
<p style="padding-left: 60px;"><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EbxsXK5kkU1ImhJ_HcYPnTcB9MboGQcfs6FuojXRPlhInA?e=wzLQFt">basic_portable_python.7z</a> (下載 15MB, 解開後 55MB)</p>
<p style="padding-left: 60px;">下載 <a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EQTW-mq62DpFtw5It9ao-PIBPXW7z5z8oVsW5gd8zbDXOQ?e=q6gHgf">Portable_2023_fall_1.3g_5g.7z</a> (需要下載密碼)</p>
<p style="padding-left: 30px;">Github Classroom 作業倉儲:</p>
<p style="padding-left: 60px;">從 github classroom 取得個人課程倉儲</p>
<p style="padding-left: 90px;">將以 <a href="https://github.com/mdecycu/cmsite">https://github.com/mdecycu/cmsite</a> 作為個人作業起始 template</p>
<p>以下為簡單的線上 Python 程式執行區:</p>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>
<h3>程式語言</h3>
<p><span>機械設計工程師在甚麼情況下需要使用 C 解決問題?</span></p>
<p><span>機械設計工程師在甚麼情況下需要使用 Javascript 解決問題?</span></p>
<p><span>Brython 程式語言一般被用在那些情況下?</span></p>
<p><span>機械設計工程師在甚麼情況下需要使用 Python 解決問題?</span></p>
<h3>ANSI C</h3>
<p><a href="https://nfuedu-my.sharepoint.com/:b:/g/personal/yen_nfu_edu_tw/EWd1cR2zOStOjVSduSw6pQMBv1fB6tWu-P9qfVH2YxbDPw?e=uOZW7N">jsliu_c_programming.pdf</a> (需要下載密碼)</p>
<p><a href="https://link.springer.com/content/pdf/10.1007/978-1-4842-5064-8_1.pdf?pdf=inline%20link">Introduction to C</a> (經由校園網路或 VPN 下載)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4612-1484-7">1999 C Programming - The Essentials for Engineers and Scientists</a> (經由校園網路或 VPN 下載)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4302-0657-6">2004 Beginning C</a> (經由校園網路或 VPN 下載)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4302-6401-9">2013 Advanced Topics in C</a> (經由校園網路或 VPN 下載)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4302-5912-1">2013 Pointers in C</a> (經由校園網路或 VPN 下載)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-1371-1">2015 Learn to Program with C</a> (經由校園網路或 VPN 下載)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4302-6500-9">2015 C Quick Syntax Reference</a> (經由校園網路或 VPN 下載)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-0940-0">2015 Beginning C for Arduino, Second Edition</a> (經由校園網路或 VPN 下載)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-1769-6">2016 Practical C</a> (經由校園網路或 VPN 下載)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-2967-5">2017 C Recipes</a> (經由校園網路或 VPN 下載)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-5064-8">2019 Numerical C</a> (經由校園網路或 VPN 下載)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-4288-9">2019 Modern C Quick Syntax Reference</a> (經由校園網路或 VPN 下載) </p>
<p><a href="https://link.springer.com/book/10.1007/978-3-030-50750-3">2020 Computer Programming in C for Beginners</a> (經由校園網路或 VPN 下載)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-6128-6">2020 Practical Numerical C Programming</a> (經由校園網路或 VPN 下載)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-5976-4">2020 Beginning C</a> (經由校園網路或 VPN 下載)</p>
<p><a href="https://link.springer.com/book/10.1007/978-3-030-38897-3">2020 Robot Adventures in Python and C</a> (經由校園網路或 VPN 下載)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-6927-5">2021 Pointers in C Programming</a> (經由校園網路或 VPN 下載)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-7774-4">2022 C and Python Applications</a> (經由校園網路或 VPN 下載)</p>
<p>程式庫:</p>
<p style="padding-left: 30px;">gnuplot: <a href="https://github.com/gnuplot/gnuplot">https://github.com/gnuplot/gnuplot</a></p>
<p style="padding-left: 30px;">gd: <a href="https://github.com/libgd/libgd">https://github.com/libgd/libgd</a></p>
<p style="padding-left: 30px;">raylib: <a href="https://github.com/raysan5/raylib">https://github.com/raysan5/raylib</a></p>
<p>本頁課程內容的<a href="https://math.libretexts.org/Bookshelves/Calculus/Calculus_(OpenStax)/17%3A_Second-Order_Differential_Equations/17.03%3A_Applications_of_Second-Order_Differential_Equations">實際應用</a>.</p>
<ol>
<li>ANSI C 程式語言所謂具有可攜性, 是甚麼意思?</li>
<li>ANSI C 被定位為低階程式語言, 是甚麼意思?</li>
<li>可以用 ANSIＣ加上Gnuplot 繪圖 (<a href="http://www.gnuplot.info/docs_5.4/Gnuplot_5_4.pdf">Gnuplot Documentation</a>), 解一個質量與兩個並聯的彈簧與阻尼器連接到牆上, 且起始條件為執行被往後拉 0.2 m 後放開的常微分方程式, 並劃出該質量被釋放之後 10 秒之內的位移以及速度圖嗎?</li>
<li>請詳細解釋所謂的 Euler's Method, 並且能不能將 Gnuplot 繪圖指令直接與 C 程式合併, 執行程式後直接產生位移與速度 png 圖?</li>
<li>能不能將 gnuplot 繪圖程式碼與 Euler's Method 解微分方程式的程式碼結合在一起, 執行時直接就能繪出質量的位移與速度圖, 而且請在繪圖時直接使用位於 Y:\ 的 wqy-microhei.ttc 中文字形, 否則無法在圖面上顯示出正確的中文.</li>
<li>請將質量的位移以及速度繪製在同一個 png 圖檔上</li>
</ol>
<p>利用 Euler's Method 解 mass-spring-damper 系統的運動方程式, 並採 ANSI C 與 Gnuplot 執行運算及繪圖.</p>
<p><a href="/downloads/euler_mass_spring_damper_gnuplot.7z">euler_mass_spring_damper_gnuplot.7z</a></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() {
    // 開啟文件以寫入位移和速度數據
    FILE *outputFile = fopen("motion_data.txt", "w");
    if (!outputFile) {
        fprintf(stderr, "無法創建數據文件。\n");
        return 1;
    }

    // 模擬運動 10 秒並計算位移和速度，同時將數據寫入文件
    double x = 0.2;  // 初始位移
    double v = 0.0;  // 初始速度
    double dt = 0.01; // 時間步長
    double t = 0.0;  // 時間

    while (t &lt;= 10.0) {
        double acceleration = (-10.0 * x - 0.5 * v) / 1.0; // 這裡修改了系統的參數
        v += acceleration * dt;
        x += v * dt;

        fprintf(outputFile, "%lf %lf %lf\n", t, x, v);

        t += dt;
    }

    // 關閉數據文件
    fclose(outputFile);

    // 使用popen啟動Gnuplot進程
    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");
    if (!gnuplotPipe) {
        fprintf(stderr, "無法啟動Gnuplot。\n");
        return 1;
    }

    // 使用Gnuplot繪圖指令，指定字型文件和輸出PNG
    fprintf(gnuplotPipe, "set terminal png font 'Y:/wqy-microhei.ttc,10' size 800,400\n");
    fprintf(gnuplotPipe, "set output 'motion_plot.png'\n");
    fprintf(gnuplotPipe, "set title '位移和速度 vs. 時間'\n");
    fprintf(gnuplotPipe, "set xlabel '時間 (s)'\n");
    fprintf(gnuplotPipe, "set ylabel '位移 (m)'\n");
    fprintf(gnuplotPipe, "plot 'motion_data.txt' using 1:2 with lines lw 2 title '位移', \
                             'motion_data.txt' using 1:3 with lines lw 2 title '速度'\n");

    // 關閉Gnuplot進程
    fprintf(gnuplotPipe, "exit\n");
    pclose(gnuplotPipe);

    return 0;
}
</pre>
<p>運算結果:</p>
<p><img alt="" height="200" src="/images/Euler_Method__mass_spring_damper_motion_plot.png" width="400"/></p>
<p>假如拿掉 Damping:</p>
<p><img alt="" height="200" src="/images/Euler_Method_mass_spring_motion_plot.png" width="400"/></p>
<p>假如將 C 改寫為 Javascript, 並且使用 plotly.js 取代 Gnuplot, 可使用下列 html + Javascript 執行運算:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;script src="https://cdn.plot.ly/plotly-latest.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id="plotDamping"&gt;&lt;/div&gt;
    &lt;div id="plotNoDamping"&gt;&lt;/div&gt;

    &lt;script&gt;
        // Function to simulate motion using Euler's method
        function simulateMotion(MASS, SPRING_K, DAMPING_C, containerId) {
            // Define simulation parameters
            const totalTime = 10.0;
            const dt = 0.01;
            
            // Initialize data arrays
            const timeData = [];
            const displacementData = [];
            const velocityData = [];

            // Initial conditions
            let t = 0.0;
            let x = 0.2;
            let v = 0.0;

            while (t &lt;= totalTime) {
                timeData.push(t);
                displacementData.push(x);
                velocityData.push(v);

                // Calculate acceleration based on parameters
                const acceleration = (-SPRING_K * x - DAMPING_C * v) / MASS;
                v += acceleration * dt;
                x += v * dt;

                t += dt;
            }

            // Plot the data
            const displacementTrace = {
                x: timeData,
                y: displacementData,
                mode: 'lines',
                name: 'Displacement'
            };

            const velocityTrace = {
                x: timeData,
                y: velocityData,
                mode: 'lines',
                name: 'Velocity'
            };

            const layout = {
                title: `Displacement and Velocity vs. Time (${containerId === 'plotDamping' ? 'With Damping' : 'No Damping'})`,
                xaxis: { title: 'Time (s)' },
                yaxis: { title: 'Displacement (m) / Velocity' }
            };

            const plotData = [displacementTrace, velocityTrace];

            Plotly.newPlot(containerId, plotData, layout);
        }

        // Simulate motion with damping
        simulateMotion(1.0, 10.0, 0.5, 'plotDamping');

        // Simulate motion without damping
        simulateMotion(1.0, 10.0, 0.0, 'plotNoDamping');
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>
<p>模擬運算結果為:</p>
<p></p>
<p>
<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</p>
<div id="plotDamping"></div>
<div id="plotNoDamping"></div>
<p>
<script>
// Function to simulate motion using Euler's method
    function simulateMotion(MASS, SPRING_K, DAMPING_C, containerId) {
        // Define simulation parameters
        const totalTime = 10.0;
        const dt = 0.01;
        
        // Initialize data arrays
        const timeData = [];
        const displacementData = [];
        const velocityData = [];

        // Initial conditions
        let t = 0.0;
        let x = 0.2;
        let v = 0.0;

        while (t <= totalTime) {
            timeData.push(t);
            displacementData.push(x);
            velocityData.push(v);

            // Calculate acceleration based on parameters
            const acceleration = (-SPRING_K * x - DAMPING_C * v) / MASS;
            v += acceleration * dt;
            x += v * dt;

            t += dt;
        }

        // Plot the data
        const displacementTrace = {
            x: timeData,
            y: displacementData,
            mode: 'lines',
            name: 'Displacement'
        };

        const velocityTrace = {
            x: timeData,
            y: velocityData,
            mode: 'lines',
            name: 'Velocity'
        };

        const layout = {
            title: `Displacement and Velocity vs. Time (${containerId === 'plotDamping' ? 'With Damping' : 'No Damping'})`,
            xaxis: { title: 'Time (s)' },
            yaxis: { title: 'Displacement (m) / Velocity' }
        };

        const plotData = [displacementTrace, velocityTrace];

        Plotly.newPlot(containerId, plotData, layout);
    }

    // Simulate motion with damping
    simulateMotion(1.0, 10.0, 0.5, 'plotDamping');

    // Simulate motion without damping
    simulateMotion(1.0, 10.0, 0.0, 'plotNoDamping');
</script>
</p>
<p>假如採用 C 以 Runge-Kutta 解 mass-spring-damper 系統運動模擬:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* Runge Kutta for a set of first order differential equations */
// http://mde.tw/cad2020/content/W7.html
  
#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
  
#define N 2 /* number of first order equations */
#define dist 0.01 /* stepsize in t*/
#define MAX 10.0 /* max for t */
  
FILE *output; /* internal filename */
FILE *output1; /* internal filename */
// 利用 pipe 呼叫 gnuplot 繪圖
FILE *pipe;
  
void runge4(double x, double y[], double step); /* Runge-Kutta function */
double f(double x, double y[], int i); /* function for derivatives */
  
void main(){
  
  double t, y[N];
  int j;
  
  output=fopen("osc.dat", "w"); /* external filename */
  output1=fopen("osc1.dat", "w"); /* external filename */
  
  y[0]=0.2; /* initial position */
  y[1]=0.0; /* initial velocity */
  
  //fprintf(output, "0\t%f\n", y[0]);
  
  for (j=1; j*dist&lt;=MAX ;j++) /* time loop */{
  
    t=j*dist;
    runge4(t, y, dist);
    fprintf(output, "%f\t%f\n", t, y[0]);
    fprintf(output1, "%f\t%f\n", t, y[1]);
  }
  
  fclose(output);
  fclose(output1);
  
  pipe = popen("gnuplot -persist","w");
  //fprintf(pipe,"set term png enhanced font \"v:/fireflysung.ttf\" 18 \n");
  fprintf(pipe,"set term png enhanced font \"y:/wqy-microhei.ttc\" 18 \n");
  //fprintf(pipe,"set yrange [68:70]\n");
  fprintf(pipe,"set output \"rk_mass_spring_damper.png\"\n");
  fprintf(pipe, "plot \"osc.dat\" title \"位移\" with lines, \"osc1.dat\" title \"速度\" with lines\n");
  fprintf(pipe,"quit\n");
 
  fprintf(pipe,"quit\n");
  pclose(pipe);
}
  
void runge4(double x, double y[], double step){
  
  double h=step/2.0, /* the midpoint */
  t1[N], t2[N], t3[N], /* temporary storage arrays */
  k1[N], k2[N], k3[N],k4[N]; /* for Runge-Kutta */
  int i;
  
  for (i=0;i&lt;N;i++){
  
    t1[i]=y[i]+0.5*(k1[i]=step*f(x,y,i));
  }
  
  for (i=0;i&lt;N;i++){
  
    t2[i]=y[i]+0.5*(k2[i]=step*f(x+h, t1, i));
  }
  
  for (i=0;i&lt;N;i++){
  
    t3[i]=y[i]+ (k3[i]=step*f(x+h, t2, i));
  }
  
  for (i=0;i&lt;N;i++){
  
    k4[i]= step*f(x+step, t3, i);
  }
  
  for (i=0;i&lt;N;i++){
  
    y[i]+=(k1[i]+2*k2[i]+2*k3[i]+k4[i])/6.0;
  }
}
  
double f(double x, double y[], int i){
  
  if (i==0)
    x=y[1]; /* derivative of first equation */
  if (i==1)
    x=-10*y[0]-0.5*y[1];
  return x;
}</pre>
<p>模擬結果為:</p>
<p><img alt="" height="300" src="/images/rk_mass_spring_damper.png" width="400"/></p>
<p>假如拿掉 Damper, 則結果為:</p>
<p><img alt="" height="300" src="/images/rk_mass_spring.png" width="400"/></p>
<p>假如將 Runge-Kutta C 改寫為 Javascript, 並在網頁中直接以 plotly.js 畫圖:</p>
<!-- 引入 Plotly.js -->
<p>
<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</p>
<!-- 用於顯示運動繪圖的 div -->
<div id="rkmotionPlot"></div>
<p>
<script>
const N = 2; // number of first order equations
const dist = 0.01; // stepsize in t
const MAX = 10.0; // max for t

let outputDataDamping = []; // to store data for displacement with damping
let output1DataDamping = []; // to store data for velocity with damping
let outputDataNoDamping = []; // to store data for displacement without damping
let output1DataNoDamping = []; // to store data for velocity without damping

function runge4(x, y, step, damping = false) {
    let h = step / 2.0;
    let t1 = [];
    let t2 = [];
    let t3 = [];
    let k1 = [];
    let k2 = [];
    let k3 = [];
    let k4 = [];

    for (let i = 0; i < N; i++) {
        t1[i] = y[i] + 0.5 * (k1[i] = step * f(x, y, i, damping));
    }

    for (let i = 0; i < N; i++) {
        t2[i] = y[i] + 0.5 * (k2[i] = step * f(x + h, t1, i, damping));
    }

    for (let i = 0; i < N; i++) {
        t3[i] = y[i] + (k3[i] = step * f(x + h, t2, i, damping));
    }

    for (let i = 0; i < N; i++) {
        k4[i] = step * f(x + step, t3, i, damping);
    }

    for (let i = 0; i < N; i++) {
        y[i] += (k1[i] + 2 * k2[i] + 2 * k3[i] + k4[i]) / 6.0;
    }
}

function f(x, y, i, damping = false) {
    if (i === 0) {
        return y[1]; // derivative of first equation (velocity)
    }
    if (i === 1) {
        if (damping) {
            return -10 * y[0] - 0.5 * y[1]; // with damping
        } else {
            return -10 * y[0]; // without damping
        }
    }
    return 0;
}

function simulateMotion() {
    let t = 0.0;
    let yDamping = [0.2, 0.0]; // initial position and velocity with damping
    let yNoDamping = [0.2, 0.0]; // initial position and velocity without damping

    for (let j = 1; j * dist <= MAX; j++) {
        t = j * dist;
        runge4(t, yDamping, dist, true); // simulate with damping
        runge4(t, yNoDamping, dist, false); // simulate without damping
        outputDataDamping.push([t, yDamping[0]]);
        output1DataDamping.push([t, yDamping[1]]);
        outputDataNoDamping.push([t, yNoDamping[0]]);
        output1DataNoDamping.push([t, yNoDamping[1]]);
    }

    // Plot the data using Plotly.js
    plotMotion();
}

function plotMotion() {
    // Create traces for displacement and velocity with damping
    const displacementTraceDamping = {
        x: outputDataDamping.map((dataPoint) => dataPoint[0]),
        y: outputDataDamping.map((dataPoint) => dataPoint[1]),
        mode: 'lines',
        name: 'Displacement (Damping)',
    };

    const velocityTraceDamping = {
        x: output1DataDamping.map((dataPoint) => dataPoint[0]),
        y: output1DataDamping.map((dataPoint) => dataPoint[1]),
        mode: 'lines',
        name: 'Velocity (Damping)',
    };

    // Create traces for displacement and velocity without damping
    const displacementTraceNoDamping = {
        x: outputDataNoDamping.map((dataPoint) => dataPoint[0]),
        y: outputDataNoDamping.map((dataPoint) => dataPoint[1]),
        mode: 'lines',
        name: 'Displacement (No Damping)',
    };

    const velocityTraceNoDamping = {
        x: output1DataNoDamping.map((dataPoint) => dataPoint[0]),
        y: output1DataNoDamping.map((dataPoint) => dataPoint[1]),
        mode: 'lines',
        name: 'Velocity (No Damping)',
    };

    const data = [
        displacementTraceDamping,
        velocityTraceDamping,
        displacementTraceNoDamping,
        velocityTraceNoDamping,
    ];

    // Layout configuration
    const layout = {
        title: 'Displacement and Velocity vs. Time',
        xaxis: {
            title: 'Time (s)',
        },
        yaxis: {
            title: 'Displacement / Velocity',
        },
    };

    // Plot the graph
    Plotly.newPlot('rkmotionPlot', data, layout);
}

// Call the simulation function when the page loads
window.onload = simulateMotion;
</script>
</p>
<p>上列 Javascript 模擬運算的超文件為:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 引入 Plotly.js --&gt;
&lt;script src="https://cdn.plot.ly/plotly-latest.min.js"&gt;&lt;/script&gt;
&lt;!-- 用於顯示運動繪圖的 div --&gt;
&lt;div id="rkmotionPlot"&gt;&lt;/div&gt;
&lt;script&gt;
const N = 2; // number of first order equations
const dist = 0.01; // stepsize in t
const MAX = 10.0; // max for t

let outputDataDamping = []; // to store data for displacement with damping
let output1DataDamping = []; // to store data for velocity with damping
let outputDataNoDamping = []; // to store data for displacement without damping
let output1DataNoDamping = []; // to store data for velocity without damping

function runge4(x, y, step, damping = false) {
    let h = step / 2.0;
    let t1 = [];
    let t2 = [];
    let t3 = [];
    let k1 = [];
    let k2 = [];
    let k3 = [];
    let k4 = [];

    for (let i = 0; i &lt; N; i++) {
        t1[i] = y[i] + 0.5 * (k1[i] = step * f(x, y, i, damping));
    }

    for (let i = 0; i &lt; N; i++) {
        t2[i] = y[i] + 0.5 * (k2[i] = step * f(x + h, t1, i, damping));
    }

    for (let i = 0; i &lt; N; i++) {
        t3[i] = y[i] + (k3[i] = step * f(x + h, t2, i, damping));
    }

    for (let i = 0; i &lt; N; i++) {
        k4[i] = step * f(x + step, t3, i, damping);
    }

    for (let i = 0; i &lt; N; i++) {
        y[i] += (k1[i] + 2 * k2[i] + 2 * k3[i] + k4[i]) / 6.0;
    }
}

function f(x, y, i, damping = false) {
    if (i === 0) {
        return y[1]; // derivative of first equation (velocity)
    }
    if (i === 1) {
        if (damping) {
            return -10 * y[0] - 0.5 * y[1]; // with damping
        } else {
            return -10 * y[0]; // without damping
        }
    }
    return 0;
}

function simulateMotion() {
    let t = 0.0;
    let yDamping = [0.2, 0.0]; // initial position and velocity with damping
    let yNoDamping = [0.2, 0.0]; // initial position and velocity without damping

    for (let j = 1; j * dist &lt;= MAX; j++) {
        t = j * dist;
        runge4(t, yDamping, dist, true); // simulate with damping
        runge4(t, yNoDamping, dist, false); // simulate without damping
        outputDataDamping.push([t, yDamping[0]]);
        output1DataDamping.push([t, yDamping[1]]);
        outputDataNoDamping.push([t, yNoDamping[0]]);
        output1DataNoDamping.push([t, yNoDamping[1]]);
    }

    // Plot the data using Plotly.js
    plotMotion();
}

function plotMotion() {
    // Create traces for displacement and velocity with damping
    const displacementTraceDamping = {
        x: outputDataDamping.map((dataPoint) =&gt; dataPoint[0]),
        y: outputDataDamping.map((dataPoint) =&gt; dataPoint[1]),
        mode: 'lines',
        name: 'Displacement (Damping)',
    };

    const velocityTraceDamping = {
        x: output1DataDamping.map((dataPoint) =&gt; dataPoint[0]),
        y: output1DataDamping.map((dataPoint) =&gt; dataPoint[1]),
        mode: 'lines',
        name: 'Velocity (Damping)',
    };

    // Create traces for displacement and velocity without damping
    const displacementTraceNoDamping = {
        x: outputDataNoDamping.map((dataPoint) =&gt; dataPoint[0]),
        y: outputDataNoDamping.map((dataPoint) =&gt; dataPoint[1]),
        mode: 'lines',
        name: 'Displacement (No Damping)',
    };

    const velocityTraceNoDamping = {
        x: output1DataNoDamping.map((dataPoint) =&gt; dataPoint[0]),
        y: output1DataNoDamping.map((dataPoint) =&gt; dataPoint[1]),
        mode: 'lines',
        name: 'Velocity (No Damping)',
    };

    const data = [
        displacementTraceDamping,
        velocityTraceDamping,
        displacementTraceNoDamping,
        velocityTraceNoDamping,
    ];

    // Layout configuration
    const layout = {
        title: 'Displacement and Velocity vs. Time',
        xaxis: {
            title: 'Time (s)',
        },
        yaxis: {
            title: 'Displacement / Velocity',
        },
    };

    // Plot the graph
    Plotly.newPlot('rkmotionPlot', data, layout);
}

// Call the simulation function when the page loads
window.onload = simulateMotion;
&lt;/script&gt;</pre>
<p></p>
<p>最後, 將 Javascript 改為可以讓使用者選擇模擬參數以及起始條件:</p>
<p></p>
<div><label for="mass">質量 (m):</label> <input id="mass" type="number" value="1.0"/></div>
<div><label for="springConstant">彈簧常數 (k):</label> <input id="springConstant" type="number" value="10.0"/></div>
<div><label for="dampingCoefficient">阻尼係數 (c):</label> <input id="dampingCoefficient" type="number" value="0.5"/></div>
<div><label for="initialDisplacement">初始位移 (x0):</label> <input id="initialDisplacement" type="number" value="0.2"/></div>
<div><label for="initialVelocity">初始速度 (v0):</label> <input id="initialVelocity" type="number" value="0.0"/></div>
<div><label for="endTime">模擬時間 (endTime):</label> <input id="endTime" type="number" value="10.0"/></div>
<p><button id="withDamping">模擬運動 (有阻尼)</button> <button id="withoutDamping">模擬運動 (無阻尼)</button></p>
<!-- 請注意!! 每一個 plotly.js 繪圖必須有各自的 id 名稱 -->
<div id="rkmotionPlot2"></div>
<p>
<script>
// 函數包裝，避免變數衝突
    (function () {
        const N = 2; // number of first order equations
        const dist = 0.01; // stepsize in t
        //const MAX = 10.0; // max for t
        const endTime = parseFloat(document.getElementById('endTime').value);

        // for debuging
        const mass = parseFloat(document.getElementById('mass').value);
        const springConstant = parseFloat(document.getElementById('springConstant').value);
        const dampingCoefficient = parseFloat(document.getElementById('dampingCoefficient').value);
        const initialDisplacement = parseFloat(document.getElementById('initialDisplacement').value);
        const initialVelocity = parseFloat(document.getElementById('initialVelocity').value);
        /*
            console.log('Mass:', mass);
            console.log('Spring Constant:', springConstant);
            console.log('Damping Coefficient:', dampingCoefficient);
            console.log('Initial Displacement:', initialDisplacement);
            console.log('Initial Velocity:', initialVelocity);
         */


        let outputDataWithDamping = []; // to store data for displacement and velocity with damping
        let outputDataWithoutDamping = []; // to store data for displacement and velocity without damping

        function runge4(x, y, step, damping = false) {
            let h = step / 2.0;
            let t1 = [];
            let t2 = [];
            let t3 = [];
            let k1 = [];
            let k2 = [];
            let k3 = [];
            let k4 = [];

            for (let i = 0; i < N; i++) {
                t1[i] = y[i] + 0.5 * (k1[i] = step * f(x, y, i, damping));
            }

            for (let i = 0; i < N; i++) {
                t2[i] = y[i] + 0.5 * (k2[i] = step * f(x + h, t1, i, damping));
            }

            for (let i = 0; i < N; i++) {
                t3[i] = y[i] + (k3[i] = step * f(x + h, t2, i, damping));
            }

            for (let i = 0; i < N; i++) {
                k4[i] = step * f(x + step, t3, i, damping);
            }

            for (let i = 0; i < N; i++) {
                y[i] += (k1[i] + 2 * k2[i] + 2 * k3[i] + k4[i]) / 6.0;
            }
        }

        function f(x, y, i, damping = false) {
            if (i === 0) {
                return y[1]; // derivative of first equation (velocity)
            }
            if (i === 1) {
                if (damping) {
                    return (-springConstant * y[0] - dampingCoefficient * y[1])/mass; // with damping
                } else {
                    return (-springConstant * y[0])/mass; // without damping
                }
            }
            return 0;
        }

        function simulateMotionWithDamping() {
            let t = 0.0;
            let y = [
                parseFloat(document.getElementById('initialDisplacement').value),
                parseFloat(document.getElementById('initialVelocity').value)
            ];

            outputDataWithDamping = []; // Clear previous data
            simulateMotion(t, y, true); // Simulate with damping
        // for debuging, yes we got the values
        //console.log('outputDataWithDamping:', outputDataWithDamping); 
            plotMotion(true); // Plot with damping
        }

        function simulateMotionWithoutDamping() {
            let t = 0.0;
            let y = [
                parseFloat(document.getElementById('initialDisplacement').value),
                parseFloat(document.getElementById('initialVelocity').value)
            ];

            outputDataWithoutDamping = []; // Clear previous data
            simulateMotion(t, y, false); // Simulate without damping
        // for debuging, we got the values
        //console.log('outputDataWithoutDamping:', outputDataWithoutDamping); 
            plotMotion(false); // Plot without damping
        }

        // for debuging
        function simulateMotion(t, y, damping = false) {
            for (let j = 1; j * dist <= endTime; j++) {
                t = j * dist;
                runge4(t, y, dist, damping);
                if (damping) {
                    outputDataWithDamping.push([t, y[0], y[1]]);
                } else {
                    outputDataWithoutDamping.push([t, y[0], y[1]]);
                }

                // Log the data for debugging
                //console.log('t:', t);
                //console.log('y:', y);
            }
                // we do get the array values
                //console.log('outputDataWithDamping:', outputDataWithDamping);
                //console.log('outputDataWithoutDamping:', outputDataWithoutDamping); 
        }


        function plotMotion(damping = false) {
            let data = [];
            if (damping) {
                // Create traces for displacement and velocity with damping
                data.push({
                    x: outputDataWithDamping.map((dataPoint) => dataPoint[0]),
                    y: outputDataWithDamping.map((dataPoint) => dataPoint[1]),
                    mode: 'lines',
                    name: 'Displacement (Damping)',
                });
                data.push({
                    x: outputDataWithDamping.map((dataPoint) => dataPoint[0]),
                    y: outputDataWithDamping.map((dataPoint) => dataPoint[2]),
                    mode: 'lines',
                    name: 'Velocity (Damping)',
                });
            } else {
                // Create traces for displacement and velocity without damping
                data.push({
                    x: outputDataWithoutDamping.map((dataPoint) => dataPoint[0]),
                    y: outputDataWithoutDamping.map((dataPoint) => dataPoint[1]),
                    mode: 'lines',
                    name: 'Displacement (No Damping)',
                });
                data.push({
                    x: outputDataWithoutDamping.map((dataPoint) => dataPoint[0]),
                    y: outputDataWithoutDamping.map((dataPoint) => dataPoint[2]),
                    mode: 'lines',
                    name: 'Velocity (No Damping)',
                });
            }

            // Layout configuration
            const layout = {
                title: 'Displacement and Velocity vs. Time',
                xaxis: {
                    title: 'Time (s)',
                },
                yaxis: {
                    title: 'Displacement / Velocity',
                },
            };

            // Plot the graph
            Plotly.newPlot('rkmotionPlot2', data, layout);
        }

        // for debuging
        //console.log(outputDataWithDamping);
        //console.log(outputDataWithoutDamping);

        // Call the simulation function when the page loads
        //simulateMotionWithDamping(); // Initial simulation with damping
        // Attach an event listener to the button
        document.getElementById("withDamping").addEventListener("click", function () {
            //console.log("Button with damping clicked.");
            simulateMotionWithDamping();
        });

        document.getElementById("withoutDamping").addEventListener("click", function () {
            //console.log("Button without damping clicked.");
            simulateMotionWithoutDamping();
        });

    })();
</script>
</p>
<p>上列可輸入模擬參數與起始條件的 html 程式碼:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;div&gt;&lt;label for="mass"&gt;質量 (m):&lt;/label&gt; &lt;input id="mass" type="number" value="1.0"&gt;&lt;/div&gt;
&lt;div&gt;&lt;label for="springConstant"&gt;彈簧常數 (k):&lt;/label&gt; &lt;input id="springConstant" type="number" value="10.0"&gt;&lt;/div&gt;
&lt;div&gt;&lt;label for="dampingCoefficient"&gt;阻尼係數 (c):&lt;/label&gt; &lt;input id="dampingCoefficient" type="number" value="0.5"&gt;&lt;/div&gt;
&lt;div&gt;&lt;label for="initialDisplacement"&gt;初始位移 (x0):&lt;/label&gt; &lt;input id="initialDisplacement" type="number" value="0.2"&gt;&lt;/div&gt;
&lt;div&gt;&lt;label for="initialVelocity"&gt;初始速度 (v0):&lt;/label&gt; &lt;input id="initialVelocity" type="number" value="0.0"&gt;&lt;/div&gt;
    
&lt;div&gt;&lt;label for="endTime"&gt;模擬時間 (endTime):&lt;/label&gt; &lt;input id="endTime" type="number" value="10.0"&gt;&lt;/div&gt;
    
&lt;p&gt;&lt;button id="withDamping"&gt;模擬運動 (有阻尼)&lt;/button&gt; &lt;button id="withoutDamping"&gt;模擬運動 (無阻尼)&lt;/button&gt;&lt;/p&gt;
&lt;!-- 請注意!! 每一個 plotly.js 繪圖必須有各自的 id 名稱 --&gt;
&lt;div id="rkmotionPlot2"&gt;&lt;/div&gt;
&lt;script&gt;// &lt;![CDATA[
// 函數包裝，避免變數衝突
    (function () {
        const N = 2; // number of first order equations
        const dist = 0.01; // stepsize in t
        //const MAX = 10.0; // max for t
        const endTime = parseFloat(document.getElementById('endTime').value);

        // for debuging
        const mass = parseFloat(document.getElementById('mass').value);
        const springConstant = parseFloat(document.getElementById('springConstant').value);
        const dampingCoefficient = parseFloat(document.getElementById('dampingCoefficient').value);
        const initialDisplacement = parseFloat(document.getElementById('initialDisplacement').value);
        const initialVelocity = parseFloat(document.getElementById('initialVelocity').value);
        /*
            console.log('Mass:', mass);
            console.log('Spring Constant:', springConstant);
            console.log('Damping Coefficient:', dampingCoefficient);
            console.log('Initial Displacement:', initialDisplacement);
            console.log('Initial Velocity:', initialVelocity);
         */


        let outputDataWithDamping = []; // to store data for displacement and velocity with damping
        let outputDataWithoutDamping = []; // to store data for displacement and velocity without damping

        function runge4(x, y, step, damping = false) {
            let h = step / 2.0;
            let t1 = [];
            let t2 = [];
            let t3 = [];
            let k1 = [];
            let k2 = [];
            let k3 = [];
            let k4 = [];

            for (let i = 0; i &lt; N; i++) {
                t1[i] = y[i] + 0.5 * (k1[i] = step * f(x, y, i, damping));
            }

            for (let i = 0; i &lt; N; i++) {
                t2[i] = y[i] + 0.5 * (k2[i] = step * f(x + h, t1, i, damping));
            }

            for (let i = 0; i &lt; N; i++) {
                t3[i] = y[i] + (k3[i] = step * f(x + h, t2, i, damping));
            }

            for (let i = 0; i &lt; N; i++) {
                k4[i] = step * f(x + step, t3, i, damping);
            }

            for (let i = 0; i &lt; N; i++) {
                y[i] += (k1[i] + 2 * k2[i] + 2 * k3[i] + k4[i]) / 6.0;
            }
        }

        function f(x, y, i, damping = false) {
            if (i === 0) {
                return y[1]; // derivative of first equation (velocity)
            }
            if (i === 1) {
                if (damping) {
                    return (-springConstant * y[0] - dampingCoefficient * y[1])/mass; // with damping
                } else {
                    return (-springConstant * y[0])/mass; // without damping
                }
            }
            return 0;
        }

        function simulateMotionWithDamping() {
            let t = 0.0;
            let y = [
                parseFloat(document.getElementById('initialDisplacement').value),
                parseFloat(document.getElementById('initialVelocity').value)
            ];

            outputDataWithDamping = []; // Clear previous data
            simulateMotion(t, y, true); // Simulate with damping
        // for debuging, yes we got the values
        //console.log('outputDataWithDamping:', outputDataWithDamping); 
            plotMotion(true); // Plot with damping
        }

        function simulateMotionWithoutDamping() {
            let t = 0.0;
            let y = [
                parseFloat(document.getElementById('initialDisplacement').value),
                parseFloat(document.getElementById('initialVelocity').value)
            ];

            outputDataWithoutDamping = []; // Clear previous data
            simulateMotion(t, y, false); // Simulate without damping
        // for debuging, we got the values
        //console.log('outputDataWithoutDamping:', outputDataWithoutDamping); 
            plotMotion(false); // Plot without damping
        }

        // for debuging
        function simulateMotion(t, y, damping = false) {
            for (let j = 1; j * dist &lt;= endTime; j++) {
                t = j * dist;
                runge4(t, y, dist, damping);
                if (damping) {
                    outputDataWithDamping.push([t, y[0], y[1]]);
                } else {
                    outputDataWithoutDamping.push([t, y[0], y[1]]);
                }

                // Log the data for debugging
                //console.log('t:', t);
                //console.log('y:', y);
            }
                // we do get the array values
                //console.log('outputDataWithDamping:', outputDataWithDamping);
                //console.log('outputDataWithoutDamping:', outputDataWithoutDamping); 
        }


        function plotMotion(damping = false) {
            let data = [];
            if (damping) {
                // Create traces for displacement and velocity with damping
                data.push({
                    x: outputDataWithDamping.map((dataPoint) =&gt; dataPoint[0]),
                    y: outputDataWithDamping.map((dataPoint) =&gt; dataPoint[1]),
                    mode: 'lines',
                    name: 'Displacement (Damping)',
                });
                data.push({
                    x: outputDataWithDamping.map((dataPoint) =&gt; dataPoint[0]),
                    y: outputDataWithDamping.map((dataPoint) =&gt; dataPoint[2]),
                    mode: 'lines',
                    name: 'Velocity (Damping)',
                });
            } else {
                // Create traces for displacement and velocity without damping
                data.push({
                    x: outputDataWithoutDamping.map((dataPoint) =&gt; dataPoint[0]),
                    y: outputDataWithoutDamping.map((dataPoint) =&gt; dataPoint[1]),
                    mode: 'lines',
                    name: 'Displacement (No Damping)',
                });
                data.push({
                    x: outputDataWithoutDamping.map((dataPoint) =&gt; dataPoint[0]),
                    y: outputDataWithoutDamping.map((dataPoint) =&gt; dataPoint[2]),
                    mode: 'lines',
                    name: 'Velocity (No Damping)',
                });
            }

            // Layout configuration
            const layout = {
                title: 'Displacement and Velocity vs. Time',
                xaxis: {
                    title: 'Time (s)',
                },
                yaxis: {
                    title: 'Displacement / Velocity',
                },
            };

            // Plot the graph
            Plotly.newPlot('rkmotionPlot2', data, layout);
        }

        // for debuging
        //console.log(outputDataWithDamping);
        //console.log(outputDataWithoutDamping);

        // Call the simulation function when the page loads
        //simulateMotionWithDamping(); // Initial simulation with damping
        // Attach an event listener to the button
        document.getElementById("withDamping").addEventListener("click", function () {
            //console.log("Button with damping clicked.");
            simulateMotionWithDamping();
        });

        document.getElementById("withoutDamping").addEventListener("click", function () {
            //console.log("Button without damping clicked.");
            simulateMotionWithoutDamping();
        });

    })();
// ]]&gt;&lt;/script&gt;</pre>
<p></p>
<p>Question: 如何讓模擬變數表單值變更後, 無需重新 refresh 頁面即可繪出運算結果?</p>
<p>Exercises:</p>
<p style="padding-left: 30px;">請將上述各階段的數值分析結果與<a href="https://lampx.tugraz.at/~hadley/physikm/apps/odeanalytic/dharmonic.en.php">理論分析解</a>(<a href="https://en.wikipedia.org/wiki/Mass-spring-damper_model">Wikipedia</a>)的結果, 以圖示進行比較, 並以表列出各點的運算誤差.</p><h3>on_linux</h3>
<p><img alt="" height="601" src="/images/Replit_c_on_linux.png" width="800"/></p>
<h3>on_windows</h3>
<p>何謂編譯?</p>
<p>利用 Tiny C Compiler 編譯</p>
<p>利用 MSYS2 中的 GNU C Compiler 編譯</p>
<p>利用 Visual Studio C Compiler 編譯</p>
<h3>python</h3>
<p>單機程式轉為全球資訊網服務：</p>
<p><a href="https://mde.tw/content/PDF.html">https://mde.tw/content/PDF.html</a> </p>
<p><a href="https://mde.tw/content/CAD.html">https://mde.tw/content/CAD.html</a> </p>
<p><a href="https://mde.tw/content/cp2022.html">https://mde.tw/content/cp2022.html</a> </p>
<p>使用舊版 Python 建立新版的可攜程式系統:</p>
<p>Python 3.12.0 沒有 tools.msi</p>
<p><a href="https://www.bing.com/ck/a?!&amp;&amp;p=91ef2cbcb9cc640eJmltdHM9MTY5NzY3MzYwMCZpZ3VpZD0zYTQ3ZGJlMS1lOGQ4LTZkNDktMjYyNy1jODk3ZTk0YzZjMDcmaW5zaWQ9NTIyMA&amp;ptn=3&amp;hsh=3&amp;fclid=3a47dbe1-e8d8-6d49-2627-c897e94c6c07&amp;psq=get+pip&amp;u=a1aHR0cHM6Ly9naXRodWIuY29tL3B5cGEvZ2V0LXBpcA&amp;ntb=1">get-pip.py</a></p>
<p>generate_portable_python.py</p>
<pre class="brush:py;toolbar:false" contenteditable="false">import urllib.request
import os

dir_path = os.path.dirname(os.path.realpath(__file__))
# basic files for Python installation
# before 3.12.0
#py_list = ["core", "dev", "exe", "lib", "tcltk", "tools"]
# 3.12.0 no tools.msi
py_list = ["core", "dev", "exe", "lib", "tcltk"]
# Python version
version = "3.12.0"
# Python msi download URL
ftp = "https://www.python.org/ftp/python/" + version + "/amd64/"
# location for Portable Python
path = "y:\\tmp\\Python312"
# create directory
try:
    os.mkdir(path)
except:
    # path exists
    pass
# get Python installation msi files and extract into target dir
for i in py_list:
    filename = i + ".msi"
    url = ftp + filename
    # download basic python msi file
    urllib.request.urlretrieve(url, filename)
    os.system("msiexec.exe /a " + i + ".msi targetdir=" + path)
    # delete msi file
    os.remove(dir_path + "\\" + i + ".msi")
</pre>
<p></p>
<p></p>
<p></p>
<p></p><h2>開發工具</h2>
<p>3. 開發程式工具 (解決特定問題)</p>
<p>References:</p>
<p style="padding-left: 30px;"><a href="https://www.codecademy.com/resources/blog/20-code-challenges/">https://www.codecademy.com/resources/blog/20-code-challenges/</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-projects-for-beginners/">https://www.freecodecamp.org/news/python-projects-for-beginners/</a> </p>
<h3>程式專案</h3>
<p><span>機械設計工程師專業的計算機程式初學者被要求必須透過開發一組程式來解決問題, 比較適合朝那些方向進行此一專案?</span></p>
<h4><span>初階 - 中階</span></h4>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-projects-for-beginners/">https://www.freecodecamp.org/news/python-projects-for-beginners/</a> </p>
<p style="padding-left: 30px;"><a href="https://github.com/nayuki/QR-Code-generator">https://github.com/nayuki/QR-Code-generator</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/KaDw/genetic_maze">https://github.com/KaDw/genetic_maze</a> (利用繪圖呈現過程)</p>
<p style="padding-left: 30px;"><a href="https://github.com/m0rningdawning/tsp-genetic-algorithm">https://github.com/m0rningdawning/tsp-genetic-algorithm</a> </p>
<p style="padding-left: 30px;"><a href="https://github.com/54nd339/Algorithms">https://github.com/54nd339/Algorithms</a> </p>
<p style="padding-left: 30px;"><a href="https://github.com/Carath/GenLib">https://github.com/Carath/GenLib</a> </p>
<p style="padding-left: 30px;"><a href="https://github.com/rapiz1/DungeonRush">https://github.com/rapiz1/DungeonRush</a> </p>
<h4>進階自學系統</h4>
<p style="padding-left: 30px;"><a href="https://www.coppeliarobotics.com/coppeliaSim">CoppeliaSim</a></p>
<p style="padding-left: 60px;">2023.03 最新版本為 4.5.1</p>
<p style="padding-left: 60px;">4.4.0 則發布於 2022.09</p>
<p style="padding-left: 60px;"><a href="https://github.com/CoppeliaRobotics/zmqRemoteApi">ZeroMQ Remote API for CoppeliaSim</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/CoppeliaRobotics/simWS">WebSocket plugin for CoppeliaSim</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/CoppeliaRobotics/threejsFrontend">three.js Frontend</a></p>
<p style="padding-left: 30px;"><a href="https://robodk.com/">RoboDK</a></p>
<p style="padding-left: 60px;">2023.07 最新的版本為<span> </span><a href="https://robodk.com/downloads/Install-RoboDK-64-v5.6.2.exe">Download 5.6.2</a></p>
<p style="padding-left: 60px;"><a href="https://robodk.com/downloads-v/Install-RoboDK-64-v5.2.2.exe">Download 5.2.2</a><span> </span>則發布於 2021.03.22</p>
<p style="padding-left: 60px;">RoboDK 源自<span> </span><a href="https://www.parallemic.org/RoKiSim.html">https://www.parallemic.org/RoKiSim.html</a></p>
<p style="padding-left: 60px;">在計算機程式課程中, 我們可以利用 RoboDK 中的 Robot 控制來練習 Python 各種語法的應用, 其中也將牽涉一些線性代數 (Linear Algebra,<span> </span><a href="https://realpython.com/python-linear-algebra/">1</a>,<span> </span><a href="https://pythonnumericalmethods.berkeley.edu/notebooks/chapter14.01-Basics-of-Linear-Algebra.html">2</a>) 與幾何 (Geometry,<span> </span><a href="https://open.umn.edu/opentextbooks/textbooks/508">1</a>,<span> </span><a href="https://open.umn.edu/opentextbooks/subjects/geometry-and-trigonometry">2</a>,<span> </span><a href="https://www.lakelandschools.org/lakelandhigh/academics/geometry_online_text_book.php">3</a>) 的應用.</p><h3>課程座次</h3>
<p>2023.09.11 從 <a href="https://qry.nfu.edu.tw/teacher.php?selyr=1121&amp;teacher=%E5%9A%B4%E5%AE%B6%E9%8A%98">112 學年度第一學期教師授課表</a>中, 擷取各班修課名單如下:</p>
<p><a href="/downloads/cp2023_a_studno.txt">cp2023_a_studno.txt</a></p>
<p><a href="/downloads/cp2023_b_studno.txt">cp2023_b_studno.txt</a></p>
<p><a href="/downloads/cad2023_a_studno.txt">cad2023_a_studno.txt</a></p>
<p><a href="/downloads/cad2023_b_studno.txt">cad2023_b_studno.txt</a></p>
<p>若以 Python 讀取上列學員名單, 並依照順序排入電腦輔助設計室後, 可得到各班在開學週時的座位表:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">with open("cp2023_a_studno.txt", encoding="utf-8") as file:
    data = file.read().splitlines()
#print(data)
# Define the number of elements to print in each row
elements_per_row = 9
# Iterate through the list and print elements
for i, item in enumerate(data, 1):
    print(item, end='\t')  # Print the element followed by a tab character
    if i % elements_per_row == 0:
        # If we've printed 9 elements, start a new line
        print()
    
    
</pre>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><span style="background-color: #ffff00;">設一甲</span>計算機程式座位表:</p>
<div id="brython_div1"></div>
<p>
<script type="text/python3">
from browser import html, document
brython_div = document["brython_div1"]

data = open("https://mde.tw/cpnote/downloads/cp2023_a_studno.txt").read().splitlines()
#print(data)
# Define the number of elements to print in each row
elements_per_row = 9
row = 1
# Iterate through the list and print elements
for i, item in enumerate(data, 1):
    if i % elements_per_row == 1:
        brython_div <= "第" + str(row) + "列: "
        row = row + 1
    #print(item, end='\t')  # Print the element followed by a tab character
    brython_div <= item + "  "
    if i % elements_per_row == 0:
        # If we've printed 9 elements, start a new line
        #print()
        brython_div <= html.BR()
</script>
<span style="background-color: #ffff00;">設一乙</span>計算機程式座位表:</p>
<div id="brython_div2"></div>
<p>
<script type="text/python3">
from browser import html, document
brython_div2 = document["brython_div2"]

data = open("https://mde.tw/cpnote/downloads/cp2023_b_studno.txt").read().splitlines()
#print(data)
# Define the number of elements to print in each row
elements_per_row = 9
row = 1
# Iterate through the list and print elements
for i, item in enumerate(data, 1):
    if i % elements_per_row == 1:
        brython_div2 <= "第" + str(row) + "列: "
        row = row + 1
    #print(item, end='\t')  # Print the element followed by a tab character
    brython_div2 <= item + "  "
    if i % elements_per_row == 0:
        # If we've printed 9 elements, start a new line
        #print()
        brython_div2 <= html.BR()
</script>
</p>
<p><span style="background-color: #ffff00;">設二甲</span>電腦輔助設計與實習座位表:</p>
<div id="brython_div3"></div>
<p>
<script type="text/python3">
from browser import html, document
brython_div3 = document["brython_div3"]

data = open("https://mde.tw/cpnote/downloads/cad2023_a_studno.txt").read().splitlines()
#print(data)
# Define the number of elements to print in each row
elements_per_row = 9
row = 1
# Iterate through the list and print elements
for i, item in enumerate(data, 1):
    if i % elements_per_row == 1:
        brython_div3 <= "第" + str(row) + "列: "
        row = row + 1
    #print(item, end='\t')  # Print the element followed by a tab character
    brython_div3 <= item + "  "
    if i % elements_per_row == 0:
        # If we've printed 9 elements, start a new line
        #print()
        brython_div3 <= html.BR()
</script>
</p>
<p><span style="background-color: #ffff00;">設二乙</span>電腦輔助設計與實習座位表:</p>
<div id="brython_div4"></div>
<p>
<script type="text/python3">
from browser import html, document
brython_div4 = document["brython_div4"]

data = open("https://mde.tw/cpnote/downloads/cad2023_b_studno.txt").read().splitlines()
#print(data)
# Define the number of elements to print in each row
elements_per_row = 9
row = 1
# Iterate through the list and print elements
for i, item in enumerate(data, 1):
    if i % elements_per_row == 1:
        brython_div4 <= "第" + str(row) + "列: "
        row = row + 1
    #print(item, end='\t')  # Print the element followed by a tab character
    brython_div4 <= item + "  "
    if i % elements_per_row == 0:
        # If we've printed 9 elements, start a new line
        #print()
        brython_div4 <= html.BR()
</script>
</p>
<p>上列 Brython 程式碼範例:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;div id="brython_div1"&gt;&lt;/div&gt;
&lt;p&gt;
&lt;script type="text/python3"&gt;
from browser import html, document
brython_div = document["brython_div1"]

data = open("https://mde.tw/cpnote/downloads/cp2023_a_studno.txt").read().splitlines()
#print(data)
# Define the number of elements to print in each row
elements_per_row = 9
row = 1
# Iterate through the list and print elements
for i, item in enumerate(data, 1):
    if i % elements_per_row == 1:
        brython_div &lt;= "第" + str(row) + "列: "
        row = row + 1
    #print(item, end='\t')  # Print the element followed by a tab character
    brython_div &lt;= item + "  "
    if i % elements_per_row == 0:
        # If we've printed 9 elements, start a new line
        #print()
        brython_div &lt;= html.BR()
&lt;/script&gt;</pre>
<p>由於 <a href="/downloads/cp2023_a_studno.txt">cp2023_a_studno.txt</a> 為 w1 從 <a href="https://qry.nfu.edu.tw/studlist.php?selyr=1121&amp;seqno=0813">https://qry.nfu.edu.tw/studlist.php?selyr=1121&amp;seqno=0813</a> 取得修課學員後存檔後運用, 但是課程進行中, 學員加退選後該資料可能產生變動, 因此若後續要利用修課學員名單建立相關網際連結時, 必須設法直接從 <a href="https://qry.nfu.edu.tw/studlist.php?selyr=1121&amp;seqno=0813">https://qry.nfu.edu.tw/studlist.php?selyr=1121&amp;seqno=0813</a> 讀取資料後進行運用.</p>
<h2>課程總結</h2>
<p>4. 課程總結</p>
<p>錄製簡報影片</p>
<p style="padding-left: 30px;">mp4</p>
<p>編寫總結報告</p>
<p style="padding-left: 30px;">pdf</p>
<p>將課程摘要納入個人領英</p>
<p style="padding-left: 30px;"><a href="https://www.linkedin.com/">https://www.linkedin.com/</a></p>
<h1>QandA</h1>
<p>Q: 如何利用 Github 建立網站?</p>
<p><button id="myButton">Click me</button></p>
<p>
<script>
(function () {
    // Your big anonymous function

    function myFunction() {
        // Your function logic here
        alert("Button clicked!");
    }

    // Attach an event listener to the button
    document.getElementById("myButton").addEventListener("click", myFunction);
})();
</script>
</p>
<p>A: 使用 <a href="https://pages.github.com/">Github Pages</a>.</p>
<p>Q: cmsimde 已知 bugs.</p>
<p>A:</p>
<p style="padding-left: 30px;">特定頁面中無法讓 URL 嵌入 html 中的 anchor 標註.</p>
<p style="padding-left: 30px;">特定情況下使用者無法在編輯器最末端輸入資料, 必須透過 Source code 轉而直接利用 html 才能編輯內容.</p>
<p style="padding-left: 30px;">使用者給定無法分頁的頁面標題時, 例如: 將特定 html 或特殊符號當作頁面標題時, 會完全刪除 config/content.htm 的內容.</p>
<p></p><h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>