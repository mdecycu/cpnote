var tipuesearch = {"pages": [{'title': 'About', 'text': 'https://mde.tw/cpnote , 若 s1511 伺服器提供服務, 經由 IPv6 可連線  https://s1511.cycu.org/~pj2022/cpnote . \n 這是國立虎尾科技大學 (National Formosa University, Taiwan) 機械設計工程系大一計算機程式課堂筆記網站。 \n 本網站的對應倉儲位於  https://github.com/mdecycu/cpnote , 課程學員可以從 改版歷程 中檢視內容差異, 以便了解各階段課程重點. \n 課程內容將從基本的 C 程式語言練習起，主要目的是讓學員了解編譯程式語言的特性及基本用法。 \n C 程式語言範例，包括如何利用數值分析流程，解出 mass-spring-damper 系統運動程式，並將質量的運動位移及速度，以 Gnuplot 圖表列出。 \n 接著將數值分析運算移至瀏覽器時，要求學員試著將 C 程式改寫為 Javascript， 並加上 plotly.js 進行繪圖。 \n 之後在 plotly.js 的運算繪架構下，嘗試利用 Brython 取代 Javascript。 \n 最後，希望透過一組包含網路前後端的 Python 語法程式範例，說明計算機程式語言在現階段機電資整合設計中的相關應用。 \n 下載可攜程式套件: \n basic_portable_python.7z  (下載 15MB, 解開後 55MB) \n 下載  Portable_2023_fall_1.3g_5g.7z  (需要下載密碼) \n 也可以直接使用電腦輔助設計室中 C:\\Portable_2023_fall 目錄中的檔案 \n', 'tags': '', 'url': 'About.html'}, {'title': '程式應用', 'text': '計算機程式課程的目的, 在提供機械設計工程師一個應用電腦與網路 解決問題的選項 , 其中的問題包括在產品開發過程中必須執行的許多 重複且枯燥的工作流程 , 必須儘可能地滿足不同客戶在不同時間點可能提出對於產品設計與製造上的需求. \n 機械設計工程師使用電腦與網路解決問題的情境, 可以用 線上購物與實體商店 作為比喻, 線上購物雖然無法完全取代實體商店, 但是作為線上購物店家, 顧客可以透過網路, 在較無時間與地點限制的情況下, 瀏覽與商品或服務有關的資訊, 店家只要完整地將各種產品有關的資訊呈現在網站上即可. \n 線上購物: 潛在客戶可以根據需求,  深入了解產品規格與保固條件 , 瀏覽商品與購物過程所留下的 歷程數據 可以做為店家提供更好服務的參考. \n 實體購物: 潛在客戶只能在開店時段, 有機會實際碰觸實體產品, 但店家必須承擔人事、商品庫存與展示耗損成本. \n 由於機械產品的開發牽涉設計與製造等流程, 運用電腦與網路解決問題的最高目標, 取決於能否快速取得客戶對於產品的完整需求, 並在最短時間內交付產品, 且在產品生命週期中的各個階段, 使用電腦與網路提供最佳的服務. \n \n 利用程式控制機器執行製造程序: \n 已知利用 C 程式可以控制雷射 XY 工作平台中雷射頭移動( 雷射切割 ), 且從  w6-w7 頁面 中已知如何利用 C 程式繪製 ROC 國旗, 請問如何利用 C 程式引導雷射切割頭勾勒出 ROC 國旗圖案的外觀線條? \n \n \n (graphics from  here ) \n \n roc_flag_outline.slvs \n \n roc_flag_outline-2.slvs \n 解題流程: \n 求出青天白日十二道光芒中的一個尖角, 與白日中間外圍圓形相交的 兩個交接點座標 後,畫出單一尖角後, 以 for 迴圈每次旋轉 30 度 重複繪出十二道光芒尖角 後, 中央再畫出兩個圓形. \n Reference: \n 利用 Google 查詢:如何利用 C (ANSI C) 計算直線 (line) 與圓 (circle) 的交接點 (intersection) 座標 (coordinate) \n ANSI C: American National Standards Institute, 美國國家標準局 \n 與 ANSI C 有關的 pdf: \n https://karadev.net/uroci/filespdf/files/Programming-in-ANSI-C.pdf \n https://www.google.com/search?q=ansi+c+intersection+of+line+and+circle \n How do I calculate the intersection(s) of a straight line and a circle? - Mathematics Stack Exchange \xa0(如何計算一條直線與圓的相交點?) \n 平面上直線的方程式?\xa0 \\(y = mx + c\\), 其中 m 為直線斜率 (slope), c 為特定常數 (constant) \n 平面上圓的方程式? \\((x-p)^2 + (y-q)^2 = r^2\\), 其中圓心座標 (center coordinate) 為 \\((p, q)\\) 半徑 (radius) 為 \\(r\\) \n 將直線方程式與圓方程式聯立求解, 就可以求出交點的座標. \n 從  https://rosettacode.org/wiki/Line_circle_intersection  可以直接取得以 C 程式計算直線與圓的相交點原始碼. \n roc_list_coord_flag.c \xa0(可以列出繪製 ROC flag 過程的點座標) \n 以下透過 ChatGPT 3.5 詢問: 請利用 c 寫一個 rotate_coord() 函式, 其輸入為起始點的 x 與 y 座標, 以及旋轉半徑 r, 還有順時針旋轉角度 theta, 其輸出則為旋轉之後的點座標. \n gdImageFilledEllipse() 為橢圓形塗色函式, 而 gdImageEllipse() 則是繪製橢圓形線條函式. \n 假如利用 Python 的 sympy 解題會更簡單:\xa0 line_circle_intersection.py \n \n 利用程式進行資料處理: \n cp2023_1a_midterm.txt \xa01a 期中考週所填回的期望成績與分組組別, 請各組利用 C 程式列出各組成員名單 (未分組的學員請以亂數補至尚未滿 9 人的組別中). \n 參考:\xa0 cp2023_1a_list_group_member.7z \n \n', 'tags': '', 'url': '程式應用.html'}, {'title': 's1511', 'text': '在 Ubuntu 中要安裝基本 C 編譯器:\xa0 sudo apt install build-essential \n 在 Ubuntu 中要安裝 gd graphics library:  sudo apt install libgd-dev \n 在 Ubuntu 中要安裝 gnuplot 套件:  sudo apt install gnuplot \n 在 Ubuntu 中編譯\xa0 roc_flag_in_gd.c \xa0指令:  cc roc_flag_in_gd.c -lgd -lm \n 因為 roc_flag_in_gd.c 中使用 gd library 以及 math library, 所以必須在連結時將所需程式庫導入. \n \n 2022.08.30 Replit 趁 Heroku  中止提供免費帳號 時, 順勢接收許多免費用戶之後, Replit 在 2023.04.13 正式推出 Deployment. 並且允許免費用戶使用. 但在 2023.09.28 卻 宣布 此一部署服務, 最遲在 2024.01.01 將只提供給付費用戶使用. 意即之後使用者 無法再經由 python3 main.py 在廣域網路中使用 repl.co 網址進行編輯  ( 假如 Webview 仍在, 或許可以在啟動編輯網站後, 在 Webview tag 中登入系統編輯, 但無法在全螢幕中進行編輯 ). \n 2023.10.20 收到 Replit 告知 repl.co 網域服務改變的 email 內容, 其中的  Learn More  就是 2023.08.28 的網誌 宣布 : \n \n 註: w8 在內部 Replit Webview 使用"在新分頁開啟", 得到的外部網址為: repl_名稱--repl_username.repl.co \n 使用 Replit 內部 Webview 編輯動態網站並執行 C 程式的畫面: \n \n 因此各學員除了使用 近端隨身系統 進行 cp2023 倉儲與網站的改版之外, 只能在 自架伺服器 中採遠端登入的方式在 s1511.cycu.org 主機中維護個人與分組網站. \n s1511 如何建立? \n 建立伺服器: \n s1511 是一台安裝 Ubuntu 操作系統的虛擬主機, 為了能讓 cp2023 網站編輯程式能在伺服器中啟動, 擬採下列方式設定: \n 1. 伺服器的符號名稱為 s1511.cycu.org 表示是 151 實體伺服器上的第一台 Virtualbox 虛擬主機, 並使用  nssm  設定隨實體主機啟動時開啟. \n 2. 各班學員在 s1511 伺服器中的登入帳號將設為其班級代號加上學號, 以計算機程式課程為例, 學員的帳號將設為 cp 加上學號 \n 3. 各學員將經由學校的電子郵箱接收 s1511 伺服器中的帳號、密碼以及所分配使用的伺服器埠號 \n 4. 9 開頭的埠號將用於 cp2023 倉儲中 server.py 設定用, 屬於內部網路埠號, 由  waitress  負責啟動  WSGI 服務 \n 5. 各學員登入 s1511.cycu.org 之後, 擬採 SSH 設定方式對 Github 主機進行 git push \n 6. nginx 全球資訊網伺服器中將包含 http, https 與 public_html 等三種 服務設定 \n 7. waitress wsgi 伺服器經由 9 開頭內部埠號所送出的 http 動態網站內容, 將由各學員在 s1511.cycu.org 中所啟動 8 開頭外部埠號承接, 且此 http proxy 至 https 的服務將採 stunnel 完成 \n \n 建立使用者帳號: \n 取得修課學員名單: \n 為能直接從學校教務主機取得各課程班級的即時修課名單, 以 Python + WSGI 建立全球資訊網服務\xa0 (原始碼:\xa0 nfulist_wsgi_and_server.7z ,  wsgi.py ) \n 從\xa0 https://stud.cycu.org:8800?semester=1121&courseno=0813&column=True \xa0就可以取得 1a 計算機程式課程的即時修課學員名單, 其中帶有三個輸入參數: \n semester 變數,\xa0 1121 為 112 學年第 1 學期 \n courseno 變數, 1a:  0813 , 1b:  0826 , 2a:  0838 , 2b:  0851 , 每一個學期各課程都有不同代號 (有沒有更好的設計?) \n column 變數, True or False(default), True 表示要以行格式, 上下列出學號, 內定為橫向列印 \n \n 建立各課程對應的 Ubuntu 學員帳號、密碼檔案: \n 程式碼  gen_s1511_username_password.py \n # Brython 程式碼\n# 導入亂數模組\nimport random\n# 導入字串模組\nimport string\n# 利用 def 關鍵字定義函式\n# 函式的輸入變數可以設定初始值\ndef password_generator(size=4, chars=string.ascii_lowercase + string.digits):\n    # 函式內以多行註解說明函式功能\n    """Generate random password\n    """\n    # 利用 return 關鍵字將所產生的亂數字串傳回\n    return \'\'.join(random.choice(chars) for _ in range(size))\n# 建立一個變數與隨後的字串對應\npass_string = "abcdefhkrstuwxyz"\ncp_num = ["0813", "0826"]\ncad_num = ["0838", "0851"]\nconnect_port = 8001\ninternal_port = 9001\ndef gen_acc_pass(course, course_num):\n    global connect_port, internal_port\n    stud_list =[]\n    for num in course_num:\n        url = "https://stud.cycu.org:8800?semester=1121&courseno=" + num + "&column=True"\n        class_list = open(url).read().split("\\n")[:-1]\n        stud_list += class_list\n        #print(stud_list)\n    for stud_num in stud_list:\n        password = password_generator(4, pass_string)\n        #print(password)\n        account = course + stud_num\n        #print(account)\n        print(stud_num + "\\t" + account + "\\t" + password + "\\t" + str(connect_port) + "\\t" + str(internal_port))\n        connect_port += 1\n        internal_port += 1\ngen_acc_pass("cp", cp_num)\ngen_acc_pass("cad", cad_num) \n create_users_txt.py \n with open("2023_fall_s1511_account_pass.txt") as f:\n    data = f.readlines()\n# use "cut -d: -f1,3 /etc/passwd" to make sure used uid range\n# newusers format:  \n# pw_name:pw_passwd:pw_uid:pw_gid:pw_gecos:pw_dir:pw_shell\n# uid starts from 1003\nuid_starts = 1002\nusers = ""\nsend = ""\n \nfor i in data:\n    #stud_num \\t account \\t password \\n\n    stud = i.split("\\t")\n    stud_num = stud[0]\n    account = stud[1]\n    password = stud[2]\n    port1 = stud[3]\n    port2 = stud[4].rstrip()\n    uid_starts += 1\n    uid = str(uid_starts)\n    gid = uid\n    gecos = account\n    home_dir = "/home/" + account\n    shell = "/bin/bash"\n    #print(stud_num, account, password)\n    users += account + ":" + password + ":" + uid + ":" + gid + ":" + gecos + ":" + home_dir + ":" + shell + "\\n"\n    send += stud_num + ":" + account + ":" + password + ":" + port1 + ":" + port2 + "\\n"\n \nwith open("users.txt", "w", encoding="utf-8", newline=\'\\n\') as f:\n        f.write(users)\n \nwith open("send.txt", "w", encoding="utf-8", newline=\'\\n\') as f:\n        f.write(send) \n 若要修正跳行符號錯誤, 可以採用: \n change_shell.py \n import os\nwith open("users.txt", "r", encoding="UTF-8") as f:\n    data = f.read().splitlines()\nfor i in data:\n    account = i.split(":")[0]\n    print(account)\n    os.system("sudo chsh -s /bin/bash " + account) \n 當執行上列程式時, 為避免在程式中列出管理者密碼, 可以編輯 /etc/sudoers 並加入: \n # only require a password once every 60 minutes\nDefaults timestamp_timeout=60 \n 可以讓 sudo python3 change_shell.py 執行時無需輸入管理者密碼. \n \n s1511 虛擬主機環境與使用流程: \n 1. s1511 主機只有 IPv6 網路協定, 因此 ssh, sftp 以及 https 等連線的使用都必須透過雙協定支援代理主機設定, 才能與僅支援 IPv4 的電腦相連. 使用電腦輔助設計室的電腦, 只要下載 2023_fall_w7_cadlab_network_setup.7z   (需要下載密碼), 放入隨身碟, 然後根據說明納入自己所分配到的固定 IPv6, 就可以採管理者身分執行批次檔的方式完成網路設定. \n 2. 利用 ssh 協定取下個人的代理主機, 其設定必須先用 ssh-keygen 在 .ssh 目錄中建立 private key (id_rsa) 以及 public key (id_rsa.pub), 並且將 id_rsa.pub 登錄到個人 github.com 帳號下 Settings 下的 SSH and GPG keys 設定區. 而且需要在 .ssh 目錄中, 利用 config 設定檔案, 指定 Host 以及代理主機, 此 Host 名稱可以視為 Linux 操作系統下, 以 ssh 對 github.com 連線的 session 名稱. \n 3. 當使用 python3 server.py & 執行 process 後, ps -axo pid,comm,uname | grep "python3" 的指令, 可以列出各自帳號下所 background 執行的 process pid, 若需要列出執行 process 對應目錄, 則可以利用 pwdx 加上 pid 後執行取得. \n .ssh 目錄中的  config , 將 SSH session 名稱設為 github.com: \n Host github.com\nUser git\nHostname github.com\nProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p\n \n public_html 中以 cpnote 名稱建立目錄後, 必須以 https 格式取下 cp2023 倉儲內容作為靜態網站 \n acp 必須納入 public_html 目錄中的靜態網站 git pull, 且利用 chmod u+x acp 令其可以執行 \n acp  內容: \n #! /bin/bash\ngit add .\ngit commit -m "$1"\ngit push\ncd ./../public_html/cp2023\ngit pull \n cp2023_1101_last.txt \n \n Letsencrypt 數位簽章更新: \n sudo /etc/init.d/nginx stop \n certbot certonly --standalone', 'tags': '', 'url': 's1511.html'}, {'title': 'linux', 'text': '練習登入 s1511.cycu.org 與退出 s1511.cycu.org: \n 以命令列登入與退出: 從 Windows, ssh 帳號@s1511.cycu.org 登入, 進入後, 以 exit 退出. \n 以 putty 登入與退出: 設定 putty session 登入, open 後可輸入帳號密碼登入, 進入後, 以 exit 退出. \n 登入後, 學習如何利用 mkdir 建立目錄, 如何利用 cp 複製檔案, 如何利用 mv 移動檔案, 如何利用 rm 刪除檔案, 如何利用 cd 在各目錄中遊走, 如何利用 vi 建立及編輯檔案. \n 登入後, 學習如何利用 chmod 針對特定目錄或檔案設定存取權, 例如: chmod 711 /home/your_account, 其中的 7 為 r = read 以 4 代表, w = write 以 2 代表, x = execute 以 1 代表, 且 Linux 中每一個檔案或目錄都用 10 個字元代表其屬性, 第一個字元若為 d = directory 表示該名稱為目錄, 隨後的 2-4 字元代表 user 對該檔案或目錄的 rwx 存取權, 5-7 字元則代表 group = 同一群組用戶對該檔案或目錄的存取權, 8-10 字元則代表 others = 非用戶非同一群組的其他身分使用者對該檔案或目錄的存取權. \n 因此, chmod 711 /home/your_account, 表示要將帳號對應目錄設為 user 可以 rwx, 而同一群組及其他用戶則只能 x = execute 執行. \n 若使用 chmod 755 /home/your_account/public_html 進行設定, 表示該目錄中的所有內容, user 可以 rwx, 而同一群組及其他用戶則只能 r = read 以 4 代表, 然後加上 x = execute 以 1 代表, 也就是 4 + 1 = 5 的 r-x 權限, 即可以讀取與執行的權限. \n 練習利用 sftp 指令從 s1511.cycu.org 取下或放上檔案: \n 在近端執行 gd in C 繪製 ROC Flag 後, 取得 roc_flag.png, 以 sftp 送進自己位於 s1511.cycu.org 主機中 cp2023 倉儲 images 目錄中. \n 從 s1511.cycu.org 取下自己 cp2023 倉儲 downloads 中的某一個 .c 程式碼. \n 從 Windows 將 ssh session 設定檔案 config, 送到 s1511.cycu.org 主機中帳號下的 .ssh 目錄 \n 練習建立 s1511.cycu.org 中帳號下的 private key 與 public key: \n 遠端登入 s1511.cycu.org 之後, 利用 ssh-keygen 指令在 ~/.ssh 目錄中建立 id_rsa 與 id_rsa.pub \n 以 sftp 從 s1511.cycu.org 主機取下 .ssh 目錄中的 id_rsa.pub public key \n 將 id_rsa.pub public key 的內容登錄到 Github 帳號 settings 中的 SSH and GPG keys 中 \n 練習在 s1511.cycu.org 中設定提交 github 倉儲用的 .gitconfig 檔案: \n 登入 s1511.cycu.org 後, 利用 git config --global user.email 與 user.name 設定在 Github 帳號所登記的電子郵箱與 username \n 由於 s1511.cycu.org 是一台 Ubuntu 伺服器, 使用者登入之後必須熟悉以下 Linux 操作系統上的指令: \n ls: ls -l, ls -la, ls -l *.png \n cd: cd ../, cd \n cp: cp ./gd_ex1.c ../downloads/ \n vi:  https://code.yidas.com/linux-vi-vim-command/ \n 其他 Linux commands: \n https://bjpcjp.github.io/pdfs/devops/linux-commands-handbook.pdf \n https://buildmedia.readthedocs.org/media/pdf/lym/latest/lym.pdf \n http://cc.iiti.ac.in/docs/linuxcommands.pdf \n 以下為 vi 編輯器的基本使用說明: \n \n', 'tags': '', 'url': 'linux.html'}, {'title': 'cp2023', 'text': '使用 s1511.cycu.org 伺服器的目的是希望讓各學員登入此電腦後, 能夠以服務啟動個人位於 Github 上的 cp2023 執行編輯後, 能夠將動態網站與靜態網站的改版資料推送回 Github, 並在 s1511 伺服器上即時展示個人的 cp2023 靜態網站內容. \n 有關 s1511 伺服器: \n s1511.cycu.org 是一台在 Windows 環境中使用 Virtualbox 建立的虛擬主機, 其操作系統為 Ubuntu 22.04 LTS ( Ubuntu 各版次的生命週期 ), 而  Ubuntu  則是 Linux 操作系統中的一個分支. \n 因為這台主機已經配置能夠讓 cp2023 執行動態編輯程式的環境, 所以只要使用者能夠利用 OpenSSH 協定, 連結 s1511 與 github.com, 就可以利用 ssh 協定將倉儲 git clone 到 s1511 主機中. \n 所謂" 連結 s1511 與 github.com", 就是指使用者已經將帳號下的 .ssh/id_rsa.pub 的內容送到 Github 帳號 settings 對應的 SSH and GPG keys 中進行登錄, 且 .ssh/config 已經設定從 IPv6 以 ssh 協定透過代理主機連線到 github.com 的內容. \n .ssh 目錄中的  config , 將 SSH session 名稱設為 github.com: \n Host github.com\nUser git\nHostname github.com\nProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p \n 所謂"這台主機已經配置能夠讓 cp2023 執行動態編輯程式的環境", 指的是這台主機已經在 Python3 環境安裝 cp2023 啟動所需的模組. \n  也就是已經透過管理者執行\xa0pip install flask\xa0 flask_cors \xa0 bs4 lxml pelican markdown pyopenssl \n 而且透過 WSGI 讓使用者只要執行 cp2023 倉儲中的 server.py, 就能開啟動態網頁編輯器.  \n 但多人存在同一台伺服器使用 WSGI 服務時, 則必須各用戶使用不同的內部與外部埠號, 因此只要各用戶使用分配到的內部 port 與外部 port 進行設定, 各用戶就可以在 cp2023 倉儲啟動編輯後, 登入修改內建的 admin 管理者密碼, 並且以 chmod o-r config/config 指令, 取消 others (也就是 Linux 操作系統下的所有帳號) 的 read 權限, 以保全管理者帳號的編碼. (在 Replit 是透過\xa0 Secrets 中的 config 變數設定進行保全). \n', 'tags': '', 'url': 'cp2023.html'}, {'title': 'SSH keys', 'text': '在 Windows 或 Linux 建立 openssh keys 都可以使用 ssh-keygen 指令 \n 在 Windows 環境下, 希望遠端登入 (remote login) 到另外一台已經啟動 ssh server 的主機, 可以使用 ssh 指令外 (此地的 ssh 指令為 client) , 在 Windows 也可以使用 putty 套件工具進行遠端登入. \n 另外 Windows\xa0 sftp (安全的檔案傳輸協定 client)  除了透過命令列指令, 在 Windows 也可以使用 filezilla 套件工具, 能夠以 sftp client 指令遠端登入到 s1511.cycu.org, 表示遠端伺服器已經安裝 sftp 伺服器並且啟動. \n 在 s1511.cycu.org 建立 keys 的原因, 是希望能夠直接利用 OpenSSH 的協定, 對 github 中的倉儲 push. \n 因為 github.com 只支援 IPv4, 而 s1511.cycu.org 只支援 IPv6, 因此在 s1511 主機上要利用各種網路 client 對 github.com 進行連結或交換檔案, 都必須針對各種 client 設定代理主機, 其中包括 ssh client, sftp client, git client, https client (也就是全球資訊網瀏覽器)等. \n 但 s1511.cycu.org 主機中已經透過 /etc/environment 設定 http 與 https 連線所需的代理主機, 使用者只需要自行處理 ~.ssh/config 中的 ssh 協定代理主機設定即可. \n /etc/environment 中有關 http 與 https 的代理主機設定: \n PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin"\nhttp_proxy=http://p4.cycu.org:3128\nhttps_proxy=http://p4.cycu.org:3128\n \n', 'tags': '', 'url': 'SSH keys.html'}, {'title': 'git clone', 'text': 'SSH 代理主機與 https 代理主機設定 \n 假如處理好 .ssh/config, .ssh/id_rsa 與 .ssh/id_rsa.pub 的設定, 各用戶就可以利用下列指令, 以 SSH 協定取下 cp2023: \n git clone --recurse-submodules  git@github.com:scrum-1/cp2023.git \n 取下的倉儲內容, 包含子模組將會放入 cp2023 目錄. \n', 'tags': '', 'url': 'git clone.html'}, {'title': 'server.py', 'text': '內部埠號與外部埠號 \n 列出使用 python3 啟動的服務: \n ps -ef | grep python3 \n 當使用 python3 server.py & 執行 process 後, ps -axo pid,comm,uname | grep "python3" 的指令, 可以列出各自帳號下所 background 執行的 process pid, 若需要列出執行 process 對應目錄, 則可以利用 pwdx 加上 pid 後執行取得. \n ps -axo :  https://explainshell.com/explain?cmd=ps+-axo+pid%2Crss%2Ccommand \n pwdx :  https://www.cyberciti.biz/faq/unix-linux-pwdx-command-examples-usage-syntax/ \n kill:  https://www.geeksforgeeks.org/kill-command-in-linux-with-examples/ \n', 'tags': '', 'url': 'server.py.html'}, {'title': 'git commit', 'text': 'git config --global user.email and user.name \n acp 權限與 public_html 目錄中的倉儲內容 \n 使用者目錄 (711) 與 public_html (755) 目錄權限 \n \n', 'tags': '', 'url': 'git commit.html'}, {'title': '上課內容', 'text': '教育版帳號\xa0microsoftonline 登入點:\xa0 https://login.microsoftonline.com/ \xa0 \n 建議學習計算機程式課程的 心態與方法 : \n 第一點:  由於計算機程式是透過指令或特定敘述與電腦軟硬體進行互動, 且最直接的程式內容都使 用英文與電腦進行溝通 , 因此在學習計算機程式的過程,  儘量使用全英文模式 , 當電腦回應英文或解題過程碰到英文教材, 一定要仔細閱讀, 充分了解各英文單字與文句段落的意涵, 之後才能靈活運用. \n 第二點:  所謂"儘量使用全英文模式"的意思為: 登入系統的 帳號 使用英文命名、電腦中 目錄與檔案的命名 使用英文、程式中的 註解與變數或函式命名 也儘量使用有意義的英文 (可以透過線上翻譯系統, 將中文語句轉為英文)、改版 提交敘述 也儘量使用英文描述、 網頁的標題 也儘量使用英文. \n 第三點:  閱讀英文教材並且不斷提升 自我英文在聽、說、讀、寫的能力 的方法是: 不要排拒英文教材, 因為特定系統的完整說明文件, 通常是用英文編寫. 當電腦回應英文敘述, 或者在閱讀英文教材時, 可以利用 AI 系統的輔助, 加快對於內容的深入了解, 並可從中增加自我英文字彙與閱讀能力. (可以利用網路上許多優質的計算機程式相關 英文教學影片 輔助學習). \n 第四點:  電腦輔助設計室的電腦已經加裝 還原卡 , 為了快速客製化電腦以提高使用效率, 必須使用 隨身碟 中的批次檔 (batch)、登錄檔 (registry) 或 Powershell 指令檔進行設定, 例如:  網路環境 、 Putty 工作階段 、 程式編譯環境 、 程式解譯環境 、關閉額外的 電腦服務及負載 等. \n 第五點:  C、Javascript 與 Python  是機械設計工程師目前經常會碰到的計算機程式語言, 初學者可以按照此一順序進行學習. C 經常被用來控制電腦硬體, Javascript 內建在每一個瀏覽器中, 而 Python 則是從精簡解題到跨足 AI 領域的最佳解譯系統. 之後若需要涉足較大型電腦套件, 可以再深入研究 C++、C#、Java、Rust 與 Mojo 等計算機程式語言的應用. \n 第六點:  無論學習那一種計算機程式語言, 所有的程式師都是從"Hello World!" 簡單列印 開始, 透過 自學與網路協同環境 , 不斷強化自我的程式解題能力. 建議所有學員必得要將所碰到的程式範例一字字打字開始, 針對編譯、連結與執行, 或者解譯後執行的每一個 細節充分理解 , 之後才能有機會在碰到產品開發過程中 棘手問題 時, 享受利用計算機程式 解題的方便與效能 . \n 評分網站與倉儲: \n cp2023 1a 學員網站與倉儲連結 \n cp2023 1b 學員網站與倉儲連結 \n 1a 學員展示用 IPv6 位址: 2001:288:6004:17:2023:cba:: 班級名單序號 \n 2b 學員展示用 IPv6 位址: 2001:288:6004:17:2023:cbb:: 班級名單序號 \n \n 112 學年度第一學期 (2023 Fall) 機械設計工程系 - 計算機程式課程的上課內容與進度. \n 有關 Replit 與近端可攜系統的相關操作, 請參考 cadnote 中的內容:  Replit ,  近端可攜 ,  Git . \n 手機建議安裝以下 Apps: \n ChatGPT, Github mobile, Replit, Authy, Teams, Onshape \n 各 Apps 的功能與目的: \n 本課程允許學員從 ChatGPT 以 GPT-3.5 preview 對話過程取出內容, 納入個人與評分網站中. \n 手機上的 Github mobile App 可用於 Github 帳號中的 2FA 流程, 幫助 Github 阻絕不當的 robot 濫用. \n Replit App 則可讓學員利用手機 Run 倉儲網站, 並以手機或平板瀏覽器管理較少量的網站編輯. \n Authy App 允許使用者利用手機或數位手錶取得 2FA 登入流程所需的 verification code. \n Teams App 可以讓學員利用手機參與 Microsoft 線上團隊課程. \n Onshape App 則可讓使用者利用手機或平面檢視或修改協同產品設計流程中的零組件. \n 說明 Win 11 網路設定: \n 由於電腦輔助設計室可以透過單一網卡, 啟動 IPv4 網路與 IPv6 網路連線, 除了利用 Win11 設定編輯相關網路內容外, 也可以在命令搜尋區輸入 Control Panel (或控制台), 帶出控制台, 從"控制台\\網路和網際網路\\網路和共用中心\\變更介面卡設定"中的乙太網路進行設定. \n 電腦中的網路設定內容除了透過 GUI 介面查詢外, 也可以在命令搜尋區輸入 cmd (command 命令提示字元), 後利用 ipconfig /all 指令取得目前的網路設定. \n IP - Internet Protocol (網際網路協定) \n IP address (網路位址, 機械設計工程系主幹網路 IPv4 網路位址區段 140.130.17.xxx, IPv6 網路區段2001:288:6004:17:xxxx:xxxx:xxxx:xxxx) \n 各班學員在電腦輔助設計室至加退選結束之前的 暫時座位表  ( 如何利用程式即時在網頁中列出各班座位表, 並納入後續延伸應用, 是一個不錯的探討主題 ), 因為目前 Win11 電腦只有 52 台, 因此學員若自帶筆記型電腦, 則可以讓出固定式電腦, 或者選擇多人 (2-3人) 共用一台電腦 (備註: 學校不是沒有經費添購教學電腦, 而是希望讓學員提早進入共享電腦時代, 並體會如何在協同模式下進行創新產品開發:-) \n 首先說明 課程評分方式 \n Teaching Methods (教學方法): \n \n lectures (講課) \n instruction (導引) \n projects (專案) \n self-study (自學) \n \n 第一階段任務: \n 完成本節中的各項任務後, 表示你將可以登入: \n \n 學校 email 帳號郵箱 \n 個人Gmail 帳號郵箱 \n Replit IDE 系統 (以 個人Gmail 帳號登入) \n 個人 Github 系統 \n 以學校 email 帳號設定的 Onedrive 系統 \n \n 登入學校 Email 郵箱: \n 學校 Webmail:  https://mail.nfu.edu.tw  (帳號為: 學號@nfu.edu.tw, 用來通知  http://s1511.cycu.org \xa0 主機上的帳號密碼與學期成績) \n 申請或登入 Gmail: \n 假如尚未擁有 Gmail 帳號, 請自行 申請一個 Gmail 帳號 , 可用來 登入 Replit  線上 IDE 系統. \n 申請 Github 帳號: \n 請利用"學號@nfu.edu.tw"在 Github  註冊 一個帳號, 帳號名稱可以選擇 學號 , 或者用 英文姓名的三個字母縮寫加上學號 作為 Github 帳號. 帳號建立後必須進入  https://mail.nfu.edu.tw  回覆確認信件後, 才能開始使用 Github. \n 由於 Github 要求所有用戶在 2023 年底之前要使用 2FA 認證方式登入, 使用者可以在手機中先安裝 Github Mobile App, 假如只希望利用手機取得 2FA token (六個阿拉伯數字) 則可以在手機中安裝 Google Authenticator App, 若也希望利用 Apple Watch 取得 2FA token, 則可以在手機中安裝 Authy App. \n 將 Github 帳號登入所需的 2FA 認證設定於手機的 Google Authenticator 或 Authy 的流程為: \n 1. 登入 Github 後, 進入帳號 Settings - Password and authentication - Two-factor authentication 下, 若此時手機已經安裝 Github Mobile App, 且以 Github 帳號登入, 則 Preferred 2FA methods 選項中將會顯示 Github Mobile, 表示此時啟動 2FA 認證流程, 則使用者登入 Github 時, 除了必須輸入帳號密碼外, 還需要在手機的 Github Mobile App 中確認同意該使用者登入 Github, 系統才會允許登入. \n 2. 接下來, 在 Two-factor methods 下點選 Authenticator app 右方的 Add (若要變更手機所使用的 2FA token 產生程式, 則點選 Edit), 視窗中將會出現一組二維條碼, 使用者可以利用手機開啟 Google Authenticator 或 Authy 中的 account add 功能開啟相機拍二維條碼後, 將 Github 帳號登錄至手機認證套件中. \n 3. 一旦上述 Github 帳號在手機中的 2FA 認證設定完成, 使用者可以將前述內建為 Github Mobile 的 Preferred 2FA methods 改為 Authenticator app, 之後再登入 Github, 除了必須輸入對應的帳號密碼之外, 還需要輸入在特定時段內輸入手機或手錶中對應帳號所顯示的六個數字 (即 2FA token), 才能登入 Github. \n 4. 至於手機中的 Authenticator 也可以再利用 Pin 密碼、指紋或人臉辨識流程加入安全保護, 一旦手機或手錶毀損, 就可以藉以登入 Github 帳號修改設定. \n Github 帳號在計算機程式課程中的用途: \n \n 領取  Github Classroom  系統所指定的作業 ,\xa0為了整合 Replit, 本課程將放棄使用 Github Classroom, 因為 GitHub Classroom 作業倉儲的使用與 Replit 的結合應用流程, 將加重管理者的負擔, 因此本課程的評分網站將改由學員自行在 GitHub 帳號下, 建立名稱為 cp2023 的評分倉儲, 且透過 GitHub Pages 伺服器呈現網站內容. \n 建立個人網站:  https://github_帳號.github.io \n 將計算機程式課程中所編寫的程式與相關資料存入 Github 帳號下的 Gist \n \n 在 Github 中, 若需要將所建立的倉儲以 Github Pages 功能轉為網站, 可以在建立倉儲時, 以  https://github.com/mdecycu/cmsite  作為 template, 首先學習如何利用 Replit 維護網站內容, 隨後則可利用 s1511 伺服器中的帳號進行 Github 倉儲與網站內容的維護, 最後也可以在近端可攜程式環境中維護 Github 倉儲與網站內容. \n 利用 Github 建立個人網站 (透過  Github Pages ) 有以下目標: \n \n 可在網站中自我介紹 ( https://www.betterup.com/blog/how-to-introduce-yourself ) \n 可在網站中展示並介紹自己寫過的程式 \n 可在網站中簡介自己修過的課程內容 \n 可在網站中說明自己曾經參與過的專題 \n 可在網站中介紹自己未來的生涯規劃 \n \n 申請 onedrive 帳號: \n \n 登入學校郵箱 (用來收帳號建立確認信) \n 至  https://www.microsoft.com/zh-tw/education/products/office , 以 學號@nfu.edu.tw 帳號申請 OneDrive 帳號 (登入教育版 onedirve 密碼由學校電算中心寄出, 請由  https://mail.nfu.edu.tw  登入信箱查閱) \n \n onedrive 帳號在計算機程式課程中的用途: \n \n 擁有線上 5TB 的儲存空間, 可用來儲存個人所建立的流程操作 mp4 影片, 並嵌入個人網頁或作業網站中 \n 擁有線上 5TB 的儲存空間, 可用來儲存與課程相關的 教育版授權軟體  (例如:  Windows 10 64位元 22H2.4 ,  Windows 11 64位元 22H2.6 ,  windows_kms.bat ) 或可攜程式系統檔案與 電子書 \n 登入後可參與計算機程式課程 Teams (2023 計算機程式 MS Teams 代碼為: plmm43c) \n 登入後可下載計算機程式課程網站中的相關檔案 (下載連結將公布在 Teams) \n \n \n Replit 的應用: \n 當使用者利用 Gmail 帳號登入 Replit 之後, 可以選擇以 C 作為 Template, 就可以直接利用瀏覽器執行 ANSI C 程式 (也可以選擇 C++, Javascript, Python 或其他程式語言 Template 執行該程式內容, 惟在免費 Replit 帳號下, 並不開放讓使用者透過 80 與 443 以外的 Ports, 因此無法在虛實整合機電控制流程中充當 Server). \n C 程式語言是 1970 年代創建 Unix 操作系統時所發明, 而 C++ 則是在 1980 年代在 C 的基礎上加上物件導向相關的語法以及相關程式庫, 一般將 C++ 視為帶有 Class 的 C. \n C++ = C with Class (物件導向式的 C) \n Replit 則是一套可讓用戶直接在瀏覽器中協同開發各種程式套件的 IDE. \n Replit = Web-based IDE (Integrated Development Environment, 整合開發環境) \n 利用 Replit 執行 C++ \n 以下將練習如何在 Replit 以及近端編譯執行一個簡單的 C 程式: \n 可以在 Replit 與近端\xa0C:\\Portable_2023_fall (必須在檢視-顯示項目下勾選"副檔名"與"隱藏的項目") \n 雙點擊\xa0 C:\\Portable_2023_fall\\start_ipv6.bat 後, 可以在近端啟動可攜程式環境, 其中已經設定透過 Tiny C Compiler 編譯執行副檔名為 .c 的程式, 使用者可以利用 SciTE 編輯器中的 Tools - Go 功能表執行 ANSI C 程式: \n #include <stdio.h>\n\nint main(void) {\n  printf("Hello World中文\\n");\n  return 0;\n} \n 與 ChatGPT 對話範例: \n \n 目前的 C 程式如下"#include <stdio.h> int main(void) { \xa0 printf("Hello World中文\\n"); \xa0 return 0; }", 請利用重複迴圈列印出 10 行相同字串 \n 請使用繁體中文重新說明一遍 \n 請逐行詳細說明程式用法 \n 何謂 stdio.h, 為什麼要 include <stdio.h>? \n int 代表甚麼? \n 為什麼每一行一定要有";" \n main(void) 代表甚麼? \n 編譯與解譯有何不同? \n \n Exercises: \n jsliu_c_programming.pdf  (需要下載密碼) \n The Basics of C Programming  (經由校園網路或 VPN 下載) \n 請從  https://www.w3resource.com/c-programming-exercises/  網頁中自選 10 個練習範例, 分別在 Replit, Windows 與 Linux (or macOS) 中執行後, 取下執行畫面放入個人的 Github Pages 網頁 (即帳號.github.io 網站), 以 ANSIC 作為頁面標題並詳細說明每一行的程式語法. \n 延伸參考: \n https://codeforwin.org/c-programming-examples-exercises-solutions-beginners \n https://techstudy.org/clanguage/c-programming-examples \n https://www.w3schools.com/c/c_exercises.php \n https://pythonistaplanet.com/c-programming-exercises/ \n C programming  (教學影片) \n 進階自學內容: \n 主要以 C 開發的系統:  Fossil SCM  and  SQLite \n 由 C++ 發明人所寫的  A history of C++: 1979-1991 \n C++ 編譯器進展 \n Introduction to C++  (pdf files) (需要下載密碼) \n Intro to C++:  https://docs.replit.com/teaching-curriculum/intro-cpp \n C++ Core Guideline \n 2013  Moving from C to C++  (在校園網路或經由 VPN 下載) \n 2014  Advanced C and C++ Compilin g (在校園網路或經由 VPN 下載) \n 2017\xa0 Guide to Scientific Computing in C++  (在校園網路或經由 VPN 下載) \n 2018\xa0 Beginning C++17  (在校園網路或經由 VPN 下載) \n 2023  Modern C++ for Absolute Beginners  (在校園網路或經由 VPN 下載) \n 下載  msys64_20230718_cmake.7z  (需要下載密碼) \n 設法利用 Msys2 編譯 SciTE, Solvespace 與 CoppeliaSim', 'tags': '', 'url': '上課內容.html'}, {'title': 'links', 'text': '1a: \n https://github.com/mdecycu/studlist/blob/main/2023fall/1a.txt   \n 從教務主機列出修課學員名單: 1a  0813 \n ag1  ( repo ) \n ag2  ( repo ) \n ag3  ( repo ) \n ag4  ( repo ) \n ag5  ( repo ) \n ag6  ( repo ) \n 1a 學員固定 IPv6 位址: \n 2001:288:6004:17:2023:cba::班級名單序號 \n 40823241  ( repo ) 序號: 1 40923137  ( repo ) 序號: 2 41023101  ( repo ) 序號: 3 41023131  ( repo ) 序號: 4 41023141  ( repo ) 序號: 5 41127151  ( repo ) 序號: 6 41223101  ( repo ) 序號: 7 41223102  ( repo ) 序號: 8 41223103  ( repo ) 序號: 9 41223104  ( repo ) 序號: 10 41223105  ( repo ) 序號: 11 41223106  ( repo ) 序號: 12 41223107  ( repo ) 序號: 13 41223108  ( repo ) 序號: 14 41223110  ( repo ) 序號: 15 41223111  ( repo ) 序號: 16 41223112  ( repo ) 序號: 17 41223113  ( repo ) 序號: 18 41223114  ( repo ) 序號: 19 41223116  ( repo ) 序號: 20 41223117  ( repo ) 序號: 21 41223118  ( repo ) 序號: 22 41223119  ( repo ) 序號: 23 41223120  ( repo ) 序號: 24 41223121  ( repo ) 序號: 25 41223122  ( repo ) 序號: 26 41223123  ( repo ) 序號: 27 41223124  ( repo ) 序號: 28 41223125  ( repo ) 序號: 29 41223126  ( repo ) 序號: 30 41223127  ( repo ) 序號: 31 41223128  ( repo ) 序號: 32 41223129  ( repo ) 序號: 33 41223130  ( repo ) 序號: 34 41223131  ( repo ) 序號: 35 41223132  ( repo ) 序號: 36 41223133  ( repo ) 序號: 37 41223134  ( repo ) 序號: 38 41223135  ( repo ) 序號: 39 41223136  ( repo ) 序號: 40 41223137  ( repo ) 序號: 41 41223138  ( repo ) 序號: 42 41223139  ( repo ) 序號: 43 41223140  ( repo ) 序號: 44 41223141  ( repo ) 序號: 45 41223142  ( repo ) 序號: 46 41223143  ( repo ) 序號: 47 41223144  ( repo ) 序號: 48 41223145  ( repo ) 序號: 49 41223146  ( repo ) 序號: 50 41223147  ( repo ) 序號: 51 41223148  ( repo ) 序號: 52 41223149  ( repo ) 序號: 53 41223150  ( repo ) 序號: 54 41223152  ( repo ) 序號: 55 41223153  ( repo ) 序號: 56 \n \n 1b: \n https://github.com/mdecycu/studlist/blob/main/2023fall/1b.txt \xa0  \n 從教務主機列出修課學員名單: 1b  0826 \n bg1  ( repo ) \n bg2  ( repo ) \n bg3  ( repo ) \n bg4  ( repo ) \n bg5  ( repo ) \n bg6  ( repo ) \n 1b 學員固定 IPv6 位址:  \n 2001:288:6004:17:2023:cbb:: 班級名單序號 \n 40930151  ( repo ) 序號: 1 40931103  ( repo ) 序號: 2 41223201  ( repo ) 序號: 3 41223202  ( repo ) 序號: 4 41223203  ( repo ) 序號: 5 41223204  ( repo ) 序號: 6 41223205  ( repo ) 序號: 7 41223206  ( repo ) 序號: 8 41223207  ( repo ) 序號: 9 41223208  ( repo ) 序號: 10 41223209  ( repo ) 序號: 11 41223210  ( repo ) 序號: 12 41223211  ( repo ) 序號: 13 41223212  ( repo ) 序號: 14 41223214  ( repo ) 序號: 15 41223215  ( repo ) 序號: 16 41223216  ( repo ) 序號: 17 41223217  ( repo ) 序號: 18 41223218  ( repo ) 序號: 19 41223219  ( repo ) 序號: 20 41223220  ( repo ) 序號: 21 41223221  ( repo ) 序號: 22 41223222  ( repo ) 序號: 23 41223223  ( repo ) 序號: 24 41223224  ( repo ) 序號: 25 41223225  ( repo ) 序號: 26 41223226  ( repo ) 序號: 27 41223227  ( repo ) 序號: 28 41223228  ( repo ) 序號: 29 41223229  ( repo ) 序號: 30 41223230  ( repo ) 序號: 31 41223231  ( repo ) 序號: 32 41223232  ( repo ) 序號: 33 41223233  ( repo ) 序號: 34 41223234  ( repo ) 序號: 35 41223235  ( repo ) 序號: 36 41223236  ( repo ) 序號: 37 41223237  ( repo ) 序號: 38 41223238  ( repo ) 序號: 39 41223239  ( repo ) 序號: 40 41223240  ( repo ) 序號: 41 41223241  ( repo ) 序號: 42 41223242  ( repo ) 序號: 43 41223243  ( repo ) 序號: 44 41223244  ( repo ) 序號: 45 41223245  ( repo ) 序號: 46 41223246  ( repo ) 序號: 47 41223247  ( repo ) 序號: 48 41223248  ( repo ) 序號: 49 41223249  ( repo ) 序號: 50 41223250  ( repo ) 序號: 51 41223251  ( repo ) 序號: 52 41223252  ( repo ) 序號: 53', 'tags': '', 'url': 'links.html'}, {'title': 'w2-w5', 'text': '本課程所謂個人網站, 即 github帳號.github.io, 可由使用者自行設定內容, 建議長期維護後可用於研究所推甄, 或求職時使用. \n 本課程所謂評分網站, 即 github帳號.github.io/cp2023, 內容及維護歴程資料將用於課程評分. \n w2 \n 說明安裝 Apps, 如何設定網路, 查驗是否正確連網 \n 說明如何利用近端可攜系統執行 C 程式, 如何利用 ChatGPT 進行對話 \n 說明如何利用 Replit 協助編輯網頁內容 \n 說明如何 connect Replit to Github, 如何建立個人網站並利用 Replit 啟動編輯網站 \n w3 \n 有關電腦輔助設計室網路設定說明 \n 處理 .replit 與 replit.nix 中的舊 Python 設定問題 \n 說明如何為 site-個人github帳號 倉儲設定 Github Pages \n 採用 Github Classroom 建立作業倉儲的問題: \n 2023/09/26 在 1a w3 課程進行到建立各學員 site 作業時發現, 將 Replit 導入 Github 倉儲的流程中, 所產生的系統間權限設定, 必須由 Github Classroom 管理帳號 (以 cp2023 為例, 附屬在 mdecp2023 帳號下), 針對各用戶所提出的個別 Replit 權限 requests (以 site-scrum-1 倉儲為例, 只能透過 Replit 提出控管 mdecp2023/site-scrum-1 倉儲的權限)  逐一進行設定 . \n \n (上圖顯示共有三名用戶針對 mdecp2023 帳號下的 Github Classroom 倉儲提出 Replit 連線要求, 其中只有最上方用戶的 request 取得 mdecp2023/site-scrum-1 倉儲的維護權限, 其餘兩則 requests 則仍處於待審核階段. 意即若要讓各用戶整合 Replit,  每一個 Github Classroom 作業, 管理者都必須手動處理超過兩百則的 requests ) \n 為去除管理者的手動設定負擔, 決定 2023 cp 與 cad 等課程將放棄使用 Github Classroom. 改為由各學員自行針對課程建立用來評分的課程倉儲與網站 (cp 課程建立 cp2023 倉儲, cad 課程則建立 cad2023 倉儲), 直接附屬在學員的 Github 帳號下, 後續的 submodule 設定與倉儲協同權限則統一由各學員自行負責. \n \n w4-w5 \n 第四與第五週任務: \n 各學員自行建立線上考試帳號 \n 依據  112 學年度第一學期教師授課表 中的學員修課名單, 利用 Teams 中的 Excel 取學員 Github 帳號. \n 各學員自行建立 Github 評分倉儲 cp2023, 並設定 Github Pages \n 登入 Github 後, 以\xa0 https://github.com/mdecycu/cmsite \xa0作為 Template 建立 cp2023 倉儲 \n 在 Replit IDE 上啟動 cp2023 內容編輯網站, 並將改版內容推送至 Github \n 在同時登入 Github 與 Replit 的情況下, 將 Replit 帳號 connect 至 Github 帳號 \n 利用 import 將 cp2023 倉儲導入 Replit \n 設定 .replit 為 python3 main.py \n 根據 cp2023 倉儲中的 README.md 在 Shell 區執行 git submodule 與 pip install \n 以 Run 執行 main.py 啟動倉儲內容編輯網頁 \n 利用 密碼產生程式 將所選定的管理者密碼字串存入 Tool - Secrets 頁面中的 config 變數 (若無 config 環境變數設定, 動態網站登入管理者密碼將交由倉儲中的 config/config 字串進行驗證) \n 重新啟倉儲內容編輯網頁後, 以新管理者密碼登入後改版並 Convert 為靜態內容後, 在 Git 頁面中將改版內容推至 Github \n 在 Replit cp2023 專案中設定 C 程式與 Gnuplot 執行環境, 完成 上課內容中的練習 \n replit.nix  納入 gnuplot 套件 \n w5 1b cp2023 與 Replit C 程式執行環境說明影片.mp4 \n 設定過程使用的參考網站:\xa0 https://scrum-1.github.io/cp2023/content/w5.html \xa0 \n 設定過程使用的 Repl:  https://replit.com/@scrum1/cp2023 \xa0(包含  replit.nix  設定檔案) \n 蒐集牛頓第二運動定律、mass-spring-damper 系統、Euler\'s Method 數值分析相關資料 \n 將  euler_gnuplot_msd_ex1.c \xa0放入 downloads 目錄中, 以 cc\xa0euler_gnuplot_msd_ex1.c -o euler_gnuplot_msd_ex1 產生\xa0euler_gnuplot_msd_ex1 可執行檔案後, 以 ./euler_gnuplot_msd_ex1 執行 \n 最後可以在 images 目錄中得到  motion_plot.png  模擬結果 \n jsliu_c_programming.pdf  (需要下載密碼) \n Introduction to C \xa0(經由校園網路或 VPN 下載) \n 指定 Github Classroom 作業: 取得  https://github.com/mdecp2023  帳號下的 "site-個人github帳號" 倉儲 (用於學員簡報以及期中期末評分用) \n \xa0 改由學員自行利用  https://github.com/mdecycu/cmsite  倉儲作為 template, 建立名稱為 cp2023 的評分倉儲 . \n 近端執行: \n SciTE 與 Tiny C Compiler 若要設定為 Tools - Compile 之後產生可執行檔案 a.out, cpp.properties 設定檔案必須修改如下: \n ccopts=-pedantic -Os\n#cc=g++ $(ccopts) -c $(FileNameExt) -o $(FileName).o\n#ccc=gcc $(ccopts) -c $(FileNameExt) -o $(FileName).o\ncc=tcc.exe -run \nccc=tcc.exe -o a.out\n\nmake.command=make\n#command.compile.*.c=$(ccc) -std=c99\ncommand.compile.*.c=$(ccc) $(FileNameExt)\ncommand.build.*.c=$(make.command)\ncommand.build.*.h=$(make.command)\ncommand.clean.*.c=$(make.command) clean\ncommand.clean.*.h=$(make.command) clean\n# use tcc to run .c program\n#command.go.*.c=./$(FileName)\ncommand.go.*.c=$(cc) $(FileNameExt) \n 雲端執行: \n 範例:  https://replit.com/@wcms/cjavascriptpython \n 將位於個人 Github 帳號下的 cp2023 倉儲 (建議以  https://github.com/mdecycu/cmsite  作為 template) import 進入 Replit, 以 git submodule update --init 取下子模組, 然後以 pip install flask flask_cors bs4 lxml pelican markdown gevent 安裝啟動編輯網站所需模組後, 將 config/config 密碼編碼移至 Secrets 頁面中的 config 變數後啟動. \n 修改 replit.nix 如下, 表示要安裝 gnuplot 套件: \n { pkgs }: {\n  deps = [\n    pkgs.gnuplot\n  ];\n} \n 之後將所練習的 C 程式置於 downloads 目錄中, 其執行影像結果存入 images 後, 分別在網頁中引用. \n Exercises: \n 請從\xa0 jsliu_c_programming.pdf  (需要下載密碼)與\xa0 Introduction to C \xa0(經由校園網路或 VPN 下載)電子書中各擷取 10 個 C 程式範例, 分別: \n \n 在可攜程式環境中以 SciTE + Tiny C Compiler 編譯系統, 使用 Tools - Go 類編譯方式執行. \n 在可攜程式環境中以 SciTE + Tiny C Compiler 編譯系統, 使用 Tools - Compile 編譯連結後取得 a.out, 然後在命令列中以 a.out 執行. \n 在 Replit 全球資訊網 IDE 環境中的 Shell 頁面, 以 cc ex1.c 產生可執行檔案 a.out, 並以 ./a.out 執行, 或者以 cc ex1.c -o ex1 指定編譯連結後的可執行檔案名稱為 ex1 後, 以 ./ex1 執行. \n \n 最後將所選擇的 C 程式範例執行過程與相關說明內容, 整理在 個人 github 帳號下的 cp2023 倉儲網頁 中的 c_ex 頁面中. \n 參考: \n Introduction to the C programming Language ( 1 ,  2 ,  3 , or  download with password ) \n 使用者輸入兩個整數後相加的 C 程式範例: \n /* Read in two integers , add them and display the answer */\n#define _CRT_SECURE_NO_WARNINGS\n#include<stdio.h>\nint main()\n{\nint this_is_a_number1, this_is_a_number2, total;\nprintf("Please enter an integer number:\\n ");\n/* read number in */\nif (scanf("%d", &this_is_a_number1) == 1) {\n      printf("%d", this_is_a_number1);\n    } else {\n        printf("Failed to read integer.\\n");\n    }\n\nprintf("You entered %d\\n", this_is_a_number1);\nprintf("Please enter another number: \\n");\nif (scanf("%d", &this_is_a_number2) == 1) {\n      printf("%d", this_is_a_number1);\n    } else {\n      printf("Failed to read integer.\\n");\n    }\nprintf("You entered %d\\n", this_is_a_number2);\ntotal = this_is_a_number1 + this_is_a_number2;/* add two numbers */\nprintf("total is %d\\n", total);\nreturn 0;\n} \n', 'tags': '', 'url': 'w2-w5.html'}, {'title': 'w6-w7', 'text': 'w5 之前的教學影片: \n 說明安裝 Apps, 如何設定網路, 查驗是否正確連網 \n 說明如何利用近端可攜系統執行 C 程式, 如何利用 ChatGPT 進行對話 \n 說明如何利用 Replit 協助編輯網頁內容 \n 說明如何 connect Replit to Github, 如何建立個人網站並利用 Replit 啟動編輯網站 \n 有關電腦輔助設計室網路設定說明 \n 處理 .replit 與 replit.nix 中的舊 Python 設定問題 \n 說明如何為 site-個人github帳號 倉儲設定 Github Pages \xa0(已經放棄使用 site- 倉儲, 改用學員帳號下的 cp2023 倉儲) \n w5 1b cp2023 與 Replit C 程式執行環境說明影片.mp4 \n 說明如何進行倉儲的 pull request \n 評分網站與倉儲: \n cp2023 1a 學員網站與倉儲連結 \n cp2023 1b 學員網站與倉儲連結 \n 學員展示用 IPv6 位址, 請利用  setup  進行網路設定: \n 1a 學員展示用 IPv6 位址: 2001:288:6004:17:2023:cba:: 班級名單序號 \xa0(原先使用 cpa, 因為 p 並非 16 位元的合法字元, 因此將 p 向上翻轉成為 b, 2023 之後接 cba) \n 2b 學員展示用 IPv6 位址: 2001:288:6004:17:2023:cbb:: 班級名單序號 \n 建立線上考試題目 \n 從 gnuplot 到 gd 利用 C 程式繪圖設定 說明影片 \n 各學員評分倉儲與網站的內容維護 ( 說明影片 , 抱歉, 影片大約在 8:30 之後沒有聲音,  1b 相同進度的說明影片 ): \n SMap: site map 網站所有頁面 \n EditA: edit all pages, 使用時機為(1)解決多人共用網站時的衝突, 或(2)刪除特定頁面 \n Edit: edit one page, 先選頁面, 再選 Edit 然後才能進入編輯模式 \n Config: 編輯網站標題, 若要編輯 site title, 必須更改 init.py 中的 site_title 字串內容 \n Search: 頁面資料 html 原始碼內容搜尋 \n IUpload: image upload, 影像檔案上傳, 資料會放入 images 目錄中 \n IList: image file list, 列出存在 images 目錄下的影像檔案 \n FUpload: file upload, 一般檔案上傳功能, 資料會放入 downloads 目錄中 \n FList: file list, 列出位於 downloads 目錄下的檔案 \n Logout: 登出 \n Convert: 將 config/content.htm 經過分頁程式處理後, 轉為 content 目錄下的超文件 \n C 程式練習一: \n 請從\xa0 https://www.w3resource.com/c-programming-exercises/ \xa0 網頁中自選 10 個練習範例, 分別在 Replit, Windows 與 Linux (or macOS) 中執行後, 取下執行畫面放入個人的 Github Pages 網頁 (即帳號.github.io 網站), 以  ANSIC  作為頁面標題並詳細說明每一行的程式語法. \n C 程式練習二: \n 請從\xa0 jsliu_c_programming.pdf \xa0 (需要下載密碼)與\xa0 Introduction to C \xa0(經由校園網路或 VPN 下載)電子書中各擷取 10 個\xa0C 程式範例, 分別: \n 1. 在可攜程式環境中以 SciTE + Tiny C Compiler 編譯系統, 使用 Tools - Go 類編譯方式執行. \n 2. 在可攜程式環境中以 SciTE + Tiny C Compiler 編譯系統, 使用 Tools - Compile 編譯連結後取得 a.out, 然後在命令列中以 a.out 執行. \n 3. 在 Replit 全球資訊網 IDE 環境中的 Shell 頁面, 以 cc ex1.c 產生可執行檔案 a.out, 並以 ./a.out 執行, 或者以 cc ex1.c -o ex1 指定編譯連結後的可執行檔案名稱為 ex1 後, 以 ./ex1 執行. \n 最後將所選擇的 C 程式範例執行過程與相關說明內容, 整理在 個人 github 帳號下的 cp2023 倉儲網頁 中的  c_ex  頁面中. \n gnuplot_ex1.c \xa0原始碼如下: \n // 包含標準輸出入程式庫的標頭文件\n// https://blog.csdn.net/weixin_38468077/article/details/101069365\n// http://www.gnuplot.info/demo/\n// https://github.com/sysprog21/rv32emu\n// https://github.com/sysprog21/semu \n// https://docs.google.com/presentation/d/14N0cWG2SnBSqhc2cLF0_2VerB9FF8JN3\n// https://cs61c.org/fa23/\n// https://greenteapress.com/wp/think-python-2e/\n// https://github.com/ecalvadi/c99-examples\n// https://github.com/gouravthakur39/beginners-C-program-examples\n// https://github.com/ergenekonyigit/Numerical-Analysis-Examples\n// https://www.che.ncku.edu.tw/facultyweb/changct/html/teaching/CPPandMATLAB/Past/pdf%20Files/Chap02-Ling.pdf\n// https://gteceducation.com.sg/Brochures/PROGRAMMING/C%20PROGRAMMING%20FULL.pdf\n// https://jsommers.github.io/cbook/cbook.pdf\n// https://jsommers.github.io/cbook/index.html\n// http://student.itee.uq.edu.au/courses/csse2310/CProgrammingNotes.pdf\n// http://cslibrary.stanford.edu/101/EssentialC.pdf\n// https://publications.gbdirect.co.uk/c_book/\n// https://www.fossil-scm.org/fossil-book/doc/2ndEdition/fossilbook.pdf\n// ***** execute on replit \n// cd downloads\n// cc gnuplot_ex1.c -o gnuplot_ex1\n// ./gnuplot_ex1\n#include <stdio.h>\n \n// 主函式\nint main() {\n    // Start a Gnuplot process using popen\n    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");\n    if (!gnuplotPipe) {\n        fprintf(stderr, "Failed to start Gnuplot.\\n");\n        return 1;\n    }\n \n    // Use Gnuplot plotting commands, specify font and output as PNG\n    fprintf(gnuplotPipe, "set terminal png font \'default,10\' size 800,400\\n");\n    fprintf(gnuplotPipe, "set output \'./../images/gnuplot_ex1.png\'\\n");\n    fprintf(gnuplotPipe, "plot sin(x)");\n    // Close popen\n    pclose(gnuplotPipe);\n \n    return 0;\n} \n 執行結果位於 images: \n \n gnuplot 5.0 參考手冊.pdf \n Quick guide to gnuplot.pdf \n 從今天起忘記 MicroSoft Excel  (!) \n \n 前述 Replit 平台環境中, 已經加入 Gnuplot 繪圖程式庫, 若循相同設定, 在 replit.nix 中加入 gd 繪圖程式庫以及 ncurses 終端機圖形介面程式庫, 則可結合 C/C++ 進行各式靜態與動態繪圖練習: \n replit.nix \n { pkgs }: {\n    deps = [\n      pkgs.gnuplot\n      pkgs.ncurses.dev\n      pkgs.gd\n    ];\n} \n 納入 ncurses 後的 C 程式編譯連結指令為: cc ncurses_ex1.c -lncurses -lm \n 其中 -lncurses 會在連結階段導入所需的 ncurses 程式庫, 而 -lm 則導入 math.h 時連結數學程式庫之用. \n 至於納入 gd 繪圖程式庫後的編譯連結指令為: cc gd_ex1.c -lgd -lm \n 其中 -lgd 會在連結階段導入所需的 gd 程式庫, 而 -lm 則導入數學程式庫. \n gd 程式庫繪圖練習: \n gd_roc_flag.c \n gd_usa_flag.c \n 目前所得到的繪圖結果如下: \n \xa0與\xa0 \n 請完成上列兩國國旗的繪製. \n ROC 國旗定義 \n 青天白日格式定義 \n USA 國旗定義 \n gd 2.0.31 (mit.edu) \n ROC 國旗繪製, 可以先從目前已知的線架構點座標: \n \n 設法先對單一菱形著色: \n \n 之後旋轉六次, 再疊上藍色光環: \n \n 進階練習: \n C 與 gnuplot 及 gd 繪圖程式庫的結合, 除了在 Replit 平台上執行外, 如何在 Windows 可攜系統中以 Tiny C Compiler 完成相同的運算與繪圖流程? \n \n w7 \n 如何建立各組協同網站說明影片 \n 如何將協同網站設定協同者後, import 進入 Replit 說明影片 \n 說明如何進行基本的 gd 繪圖 \n 進行九人一排分組, 期中成績預計送出個人期望成績. \n cp2023 計算機程式教學內容 check list: \n \n 各學員要有 github 帳號, 且將 user name 登錄到  1a  與  1b  的倉儲, 內容必須與個人的 github 帳號相同 ( 1a  與  1b ), 各用戶若修改帳號, 必須透過 Pull Requests 要求將新資料合併 ( Pull Requests 說明 ). \n 各學員要有  Replit  帳號且與 Github connect, 能夠從 Replit 啟動網頁編輯, 轉為靜態網站內容後, 送回 Github 的個人 cp2023 倉儲與網站. (還有兩種方式可以維護倉儲與網站,  近端 與 自架主機 上進行內容維護) \n 目前會經常使用的 git add, git commit, git push, git pull, git status, git branch, git checkout \n C 程式的繪圖 - Gnuplot, gd, raylib ( 近端繪圖說明 ) \n \n \n 第七週練習 \n 已知利用下列的 ANSI C 程式, 結合 gd 繪圖程式庫可以畫出 ROC Flag, 請循相同方法, 畫出 PROC, United Kingdom, Japan 與 Korea Flags. \n ROC Flag in gd:  roc_flag_in_gd.c \n // https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China\n// 內政部國旗參考資料: https://www.moi.gov.tw/cp.aspx?n=10621\n// cc roc_flag_in_gd.c -lgd -lm to link with gd and math library\n// https://www.rapidtables.com/web/color/RGB_Color.html\n// 幾何形狀著色與繪圖練習\n// 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖\n#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_roc_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int x, int y, int size, int color);\n\nint main() {\n    // width 3: height 2\n    int width = 1200;\n    // 國旗長寬比為 3:2\n    int height = (int)(width*2.0 / 3.0);\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    draw_roc_flag(img);\n\n    FILE *outputFile = fopen("./../images/roc_flag_in_gd.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\n\nvoid draw_roc_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, white, blue;\n    // 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處\n    int center_x = (int)(width/4);\n    int center_y = (int)(height/4);\n    // gdImageFilledEllipse 需以長寬方向的 diameter 作圖\n    // 由於中央白日圓形的半徑為青天寬度的 1/8\n    // 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8\n    // 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8\n    int sun_radius = (int)(width/8);\n    // 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑\n    int white_circle_dia = sun_radius;\n    // 中央藍色圓形半徑為中央白日的 1又 2/15\n    int blue_circle_dia = white_circle_dia +  white_circle_dia*2/15;\n    // 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值\n    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色\n    white = gdImageColorAllocate(img, 255, 255, 255); // 白色\n    blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色\n    // 根據畫布大小塗上紅色長方形區域\n    gdImageFilledRectangle(img, 0, 0, width, height, red);\n    // 青天面積為整面國旗的 1/4, 也是採用長方形塗色\n    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);\n    // 先設法以填色畫出六個白色堆疊菱形\n    draw_white_sun(img, center_x, center_y, sun_radius, white);\n    // 利用一個藍色大圓與白色小圓畫出藍色環狀\n    gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);\n    gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);\n  \n}\n\nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {\n    // M_PI 大小定義於 math.h 標頭檔中, 因為三角函數中採用徑度為角度單位\n    // 因此定義將角度轉為徑度的轉換變數為 deg, 角度值乘上 deg 就可轉為徑度\n    float deg = M_PI/180;\n    // 根據十二道光芒的每一尖角的角度為 15 度, 求出其對應直角三角形的另一角度為 75 度\n    // 求出十二道光芒中任一菱形的 small radius, 也就是菱形的另一個對應小圓的半徑大小\n    float sr = sun_radius/tan(75*deg);\n    int ax, ay, bx, by, dx, dy, ex, ey;\n    gdPoint points[4];\n    /* 在塗上十二道光芒中的單一菱形區域之前, 先以座標點畫線測試是否正確\n    ax = center_x;\n    ay = center_y - sun_radius;\n    bx = center_x - sun_radius*tan(15*deg);\n    by = center_y;\n    ex = center_x;\n    ey = center_y + sun_radius;\n    dx = center_x + sun_radius*tan(15*deg);\n    dy = center_y;\n    // AB\n    gdImageLine(img, ax, ay, bx, by, color);\n    // BE\n    gdImageLine(img, bx, by, ex, ey, color);\n    // ED\n    gdImageLine(img, ex, ey, dx, dy, color);\n    // DA\n    gdImageLine(img, dx, dy, ax, ay, color);\n    */\n    ax = center_x;\n    ay = center_y - sun_radius;\n    bx = center_x - sun_radius*tan(15*deg);\n    by = center_y;\n    ex = center_x;\n    ey = center_y + sun_radius;\n    dx = center_x + sun_radius*tan(15*deg);\n    dy = center_y;\n    // 確定單一菱形區域的塗色正確後, 利用迴圈每次轉動 30 度, 總共轉六次即可塗上十二道光芒區域\n    for (int i=1;i<=6;i++){\n    // A\n    points[0].x = ax+sun_radius*sin(30*deg*i);\n    points[0].y = ay+sun_radius-sun_radius*cos(30*deg*i);\n    // B\n    points[1].x = bx+sr-sr*cos(30*deg*i);\n    points[1].y = by-sr*sin(30*deg*i);\n    // E\n    points[2].x = ex-sun_radius*sin(30*deg*i);\n    points[2].y = ey-(sun_radius-sun_radius*cos(30*deg*i));\n    // D\n    points[3].x = dx-(sr-sr*cos(30*deg*i));\n    points[3].y = dy+sr*sin(30*deg*i);\n    // 對菱形區域範圍塗色\n    gdImageFilledPolygon(img, points, 4, color);\n    // 在菱形區域外圍畫線, 明確界定菱形範圍\n    gdImagePolygon(img, points, 4, color);\n    }\n} \n \n', 'tags': '', 'url': 'w6-w7.html'}, {'title': 'replit_github', 'text': '1a 完成利用 Replit 將改版資料推向 Github 學員名單 \n 1b 完成利用 Replit 將改版資料推向 Github 學員名單 \n w6 上課後, 1a 已經完成 Replit 資料推向 Github 學員: \n 41223103 \xa0 ( repo ) \n w6 上課前, 1b 已經完成 Replit 資料推向 Github 學員: \n 40930151 \xa0 ( repo ) 41223201 \xa0 ( repo ) 41223205 \xa0 ( repo ) 41223206 \xa0 ( repo ) 41223209 \xa0 ( repo ) 41223215 \xa0 ( repo ) 41223217 \xa0 ( repo ) 41223224 \xa0 ( repo ) 41223225 \xa0 ( repo ) 41223226 \xa0 ( repo ) 41223228 \xa0 ( repo ) 41223234 \xa0 ( repo ) 41223235 \xa0 ( repo ) 41223246 \xa0 ( repo ) \n', 'tags': '', 'url': 'replit_github.html'}, {'title': 'replit_html', 'text': 'Intro to Python | Replit Docs \n', 'tags': '', 'url': 'replit_html.html'}, {'title': 'replit_python', 'text': 'Intro to Python | Replit Docs \n', 'tags': '', 'url': 'replit_python.html'}, {'title': 'replit_cpp', 'text': '以下為 C++ 進階課程, 僅提供參考. \n Intro to C++ | Replit Docs , 針對有 C++ 以外程式基礎的學員, 除了基本 C++ 語法外還介紹指標 (pointers) 與資料結構 (data structures). \n C++ 程式範例:\xa0 Project copying - Replit \n', 'tags': '', 'url': 'replit_cpp.html'}, {'title': 'w8-w9', 'text': 's1511 伺服器中的分組埠號: \n 計算機程式課程: \n cp2023_ag1: 8220, 9220 \n cp2023_ag2: 8221, 9221 \n cp2023_ag3: 8222, 9222 \n cp2023_ag4: 8223, 9223 \n cp2023_ag5: 8224, 9224 \n cp2023_ag6: 8225, 9225 \n \n cp2023_bg1: 8226, 9226 \n cp2023_bg2: 8227, 9227 \n cp2023_bg3: 8228, 9228 \n cp2023_bg4: 8229, 9229 \n cp2023_bg5: 8230, 9230 \n cp2023_bg6: 8231, 9231 \n \n 電腦輔助設計與實習課程: \n cad2023_ag1: 8232, 9232 \n cad2023_ag2: 8233, 9233 \n cad2023_ag3: 8234, 9234 \n cad2023_ag4: 8235, 9235 \n cad2023_ag5: 8236, 9236 \n cad2023_ag6: 8237, 9237 \n \n cad2023_bg1: 8238, 9238 \n cad2023_bg2: 8239, 9239 \n cad2023_bg3: 8240, 9240 \n cad2023_bg4: 8241, 9241 \n cad2023_bg5: 8242, 9242 \n cad2023_bg6: 8243, 9243 \n \n 在 Ubuntu 安裝 gd 程式庫套件: \n sudo apt update \n sudo apt upgrade \n sudo apt install libgd-dev \n cd downloads \n cc gd_ex1.c -lm -lgd \n ./a.out \n 在 Ubuntu 安裝 gnuplot 套: \n sudo apt install gnuplot \n 因為 s1511 伺服器並沒有安裝 X11, 因此 raylib 相關範例只能在近端可攜環境中執行. \n \n w8 之前所指令的程式練習作業 : \n 上課內容 中的 Exercises \n w2-w5  週任務中的 Exercises \n w6-w7  週任務中的練習一與練習二 \n 請利用 C 結合 gd 繪圖程式庫, 畫出  PROC ,  United Kingdom ,  Japan  與  South Korea  Flags. \n 各分組成員協同將  jsliu_c_programming.pdf \xa0 (需要下載密碼) 內容整理後, 放入各分組網站. \n w9 程式練習 : \n 2b w8 作業: 請根據\xa0 cad2023_2b_w8.txt \xa0檔案中的內容, 透過程式的讀取與篩選, 按照時間先後, 列出 2b 修課學員中已經登入 s1511.cycu.org 的學號. (修課學員名單\xa02a:\xa0 0838 , 2b:\xa0 0851 ) \n 假如在近端處理, 必須同時儲存兩個檔案後, 進行資料選取: \n get_stud_num_from_last_data.py \xa0(若採 Brython 編寫, 可以直接 列出結果 , 依照登入時間先後排序, 其中 41123227 為管理者最早測試時登入, 若採用 ANSI 編寫:  c_parse_last_cp2023.7z ) \n read_last_final1.c 原始碼: \n #include <stdio.h>\n#include <string.h>\n\nint main() {\n    // Open the user file for reading\n    FILE* user_file = fopen("2b_user_list.txt", "r");\n    if (user_file == NULL) {\n        perror("Error opening user file");\n        return 1;\n    }\n\n    char line[100]; // Assuming a maximum line length of 100 characters\n\n    char valid_users[100][20]; // Assuming a maximum of 100 valid users with a length of 20 characters each\n    int valid_user_count = 0;\n\n    // Read and store the student numbers from the user file\n    while (fgets(line, sizeof(line), user_file)) {\n        line[strcspn(line, "\\n")] = \'\\0\'; // Remove the newline character\n        strcpy(valid_users[valid_user_count], line);\n        valid_user_count++;\n    }\n\n    // Close the user file\n    fclose(user_file);\n\n    // Open the CAD file for reading\n    FILE* cad_file = fopen("cad2023_2b_w8.txt", "r");\n    if (cad_file == NULL) {\n        perror("Error opening CAD file");\n        return 1;\n    }\n\n    char unique_users[100][20]; // Assuming a maximum of 100 unique users with a length of 20 characters each\n    int unique_user_count = 0;\n\n    // Read the CAD file line by line\n    while (fgets(line, sizeof(line), cad_file)) {\n        char* token = strtok(line, " "); // Split the line by space\n        if (token != NULL && strstr(token, "cad") == token) {\n            // Extract the student number (skip "cad")\n            char student_number[20]; // Assuming a maximum length of 20 characters for a student number\n            strcpy(student_number, token + 3); // Skip "cad"\n            \n            // Check if the student number is in the list of valid users and not a duplicate\n            int is_valid = 0;\n            for (int i = 0; i < valid_user_count; i++) {\n                if (strcmp(valid_users[i], student_number) == 0) {\n                    is_valid = 1;\n                    break;\n                }\n            }\n            \n            // Add the student number to the unique_users list if it\'s valid and not a duplicate\n            if (is_valid) {\n                int is_duplicate = 0;\n                for (int i = 0; i < unique_user_count; i++) {\n                    if (strcmp(unique_users[i], student_number) == 0) {\n                        is_duplicate = 1;\n                        break;\n                    }\n                }\n                \n                if (!is_duplicate) {\n                    strcpy(unique_users[unique_user_count], student_number);\n                    unique_user_count++;\n                }\n            }\n        }\n    }\n\n    // Reverse the order of the unique student numbers\n    for (int i = 0; i < unique_user_count / 2; i++) {\n        char temp[20];\n        strcpy(temp, unique_users[i]);\n        strcpy(unique_users[i], unique_users[unique_user_count - 1 - i]);\n        strcpy(unique_users[unique_user_count - 1 - i], temp);\n    }\n\n    // Print the unique student numbers in reverse order\n    for (int i = 0; i < unique_user_count; i++) {\n        printf("%s\\n", unique_users[i]);\n    }\n\n    // Close the CAD file\n    fclose(cad_file);\n\n    return 0;\n}\n \n 若採用 Python 編寫: \n read_last.py 原始碼 \n # 讀取學號檔案\nwith open("2b_user_list.txt", \'r\') as user_file:\n    user_lines = user_file.read().splitlines()\n \n# 讀取 last 指令轉出的檔案, 以 last -w > cad2023_2b_w8.txt 建立檔案\nwith open("cad2023_2b_w8.txt", \'r\') as cad_file:\n    # 以下是利用跳行符號, 將每一行區隔成數列\n    cad_lines = cad_file.read().splitlines()\n#print(cad_lines)\n \n# 從 cad_lines 建立所有登入使用者數列\nlogin_users = []\nfor i in cad_lines:\n    line_list = i.split(" ")\n    login_users.append(line_list[0])\n#print(login_users)\n \n# 根據 https://stackoverflow.com/questions/480214/how-do-i-remove-duplicates-from-a-list-while-preserving-order\n# 數列去除重複元素但仍保持原始次序\nlogin_users = list(dict.fromkeys(login_users))\n#print(login_users)\n \n# 建立數列存放符合條件的使用者\nvalid_users = []\n \n# 取出符合條件的使用者\nfor line in login_users:\n    if "cad" in line:\n        # 將 cad 字串去除\n        user_number = line.replace("cad", "")\n        if user_number in user_lines:\n            valid_users.append(user_number)\n             \n# 利用 reverse() 將 valid_users 反向排序\nvalid_users.reverse()\n \n# , 最早登入者列在最前面\nfor user in valid_users:\n    print(user) \n \n', 'tags': '', 'url': 'w8-w9.html'}, {'title': 'w10-w11', 'text': '項目1 到 項目3 就是各組必須在分組網站, 利用組員分工學習的方式, 將計算機程式的教學內容及作業進行整理. 且各組員所分配到的工作必須先在個人網站中整理後, 再放入各分組網站中. \n w11: 針對 s1511 伺服器, 新增別名 (在 DNS 術語中稱為 CNAME) s, 因此可以透過  https://s.cycu.org/~pj2022/cpnote  擷取工作站室中的課堂筆記靜態網頁. \n 使用 Letsencrypy 中的  certbot certonly -d s1511.cycu.org -d s.cycu.org  指令, 執行之前可以利用 sudo /etc/init.d/nginx stop 關掉 nginx, 並在上述擴充網域數位簽章的過程, 讓 certbot 指令啟動 local web server 進行主機認證, 即透過登記在 DNS 伺服器中的 IPv6 address 確認主機位址. \n 擴增伺服器別名後, 以 sudo /etc/init.d/nginx start 重新啟動全球資訊網伺服器, 並且以 sudo /etc/init.d/stunnel4 restart 重新啟動 https 代理伺服器. \n 項目1 : 如何快速設定電腦輔助設計室中的網路 - 採 IPv6 網路設定. \n 請檢查隨身碟中的網路設定程式, 確認帶有可攜程式環境以及網路設定相關檔案. \n 目的是能夠在啟動隨身系統之後, 可以透過 rsa private key 以 SSH 取下個人倉儲, 並能啟動編輯後轉檔, 擁有推送回 github 的權限. \n 各組組長能夠在取下分組倉儲後, 以個人 IPv6 位址啟動後, 允許分組組員登入修改網頁內容, 並透過組長的 rsa private key 推送回 github. \n 個人與分組組員能在近端編寫 C 程式, 完成編譯連結後將程式碼與結果放入網頁, 並編寫相關心得報告. \n 以上近端操作流程, 也可以在 s1511 與 Replit 伺服器上進行個人與分組倉儲及網頁的改版. \n w11_1a.7z \xa0(第十一週 1a 上課時建立的共用網路設定檔案) \n wink_ffmpeg.reg 設定檔案內容: \n Windows Registry Editor Version 5.00\n \n[HKEY_CURRENT_USER\\SOFTWARE\\Debugmode]\n \n[HKEY_CURRENT_USER\\SOFTWARE\\Debugmode\\Wink\\Settings]\n"FfmpegPath"="y:\\\\ffmpeg.exe" \n 2a_w10_start_ipv6_wink_reg.7z  (可以將此  wink 登錄設定檔 , 連同 網路設定 ,  Zoomit 啟動 與  putty setting  設定, 以  reg import  指令整合至 tinyc 可攜程式系統的 start_ipv6.bat 中). \n 以下為設定 w11_1a.mp4 的過程 ( w11_1a_1.txt ): \n \n \n w11_1b_1 操作影片,  w11_1b.wnk 下載  (需要密碼) \n \n \n w11_1a 已經登入 s.cycu.org 的學員名單:\xa0 w11_1a_s_server_login.txt , 請問 如何 按照學號列出 w11 已經會登入 s.cycu.org 的學員名單? ( w11_1b_s_server_login.txt ) \n 已知:\xa0semester 變數,\xa0 1121 為 112 學年第 1 學期 \n courseno 變數, 1a: \xa0 0813 , 1b: \xa0 0826 , 2a: \xa0 0838 , 2b: \xa0 0851 \xa0(以 demo 帳號 AT stud.cycu.org 中的  nfulist  網際程式直接進入學校教務主機擷取修課學員名單.) \n 使用 Brython 讀取登入歷程記錄檔案後, 可以 按照時間先後次序列出登入者名單 . \n 也可以按照學號排序, 列出  w11 已經登入 s1511 主機的 1a 學員名單 (即時執行)或將資料取出:\xa0 w11_1a_login_s1511_users.txt \xa0( w11_1b_login_s1511_users.txt ) \n 接下來該如何利用程式方法, 得知使用者已經設定 rsa keys?\xa0 \n 假如能夠使用程式進入 s.cycu.org 讀取各用戶的 .ssh/id_rsa.pub, 就可以知道是否該用戶已經建立 rsa keys. 但是必須在 s.cycu.org 主機中設法建立網際程式, 並參考 這裡 的說明, 就可以根據各班學員名單逐一進入各用戶的目錄查驗其帳號下是否已經建立 id_rsa.pub 檔案. \n \n 項目2 : 請分別利用 Replit、s1511.cycu.org 或 localhost 維護個人與分組的網站內容, 並比較不同方法開發計算計程式的優缺點. \n Replit  必須先在 Github 安裝 Replit Application 授權之後, 再 import 倉儲. \n import 倉儲後, 必須先設定 Run 執行內容, 取下 submodule, 並安裝倉儲編輯所需的模組以及設定 secrets 頁面中的 config 變數後, 才能啟動編輯網頁. \n s1511  則需要先設定 keys 與 session config, 然後才能將倉儲以 SSH clone 至個人帳號下, 修改個人或分組所分配到的內部連網埠號後, 以 python3 server.py 執行網頁編輯. 也可透過 acp 設法讓動態與靜態網站內容同步. \n localhost  則可以使用 s1511 中的 private key, 經由 puttygen 轉檔後使用, 以 SSH clone 至個人隨身碟後, 可以利用 cms 啟動編輯網站, 修改內容並轉為靜態網站後, 以 acp 將改版資料新增提交推送到 Github. 若修改倉儲中的 init.py, 置入所在電腦的外部 IPv6 位址, 則可以 cms 啟動後, 修改管理者密碼, 讓其他組員連線至所啟動的動態或靜態網站內容. \n 各學員在以上採多個不同方式維護個人與分組網站的過程, 可以在改版之前先行 git pull, 以減少合併的內容. \n 在 Windows 使用 pelican 建立網誌必須 pip install tzdata, 否則無法取得 TIMEZONE 設定. \n 項目3 : 程式練習: \n w8 之前所指令的程式 C 練習作業 : \n 上課內容 中的 Exercises \n w2-w5  週任務中的 Exercises \n w6-w7  週任務中的練習一與練習二 \n 請利用 C 結合 gd 繪圖程式庫, 畫出  PROC ( 規格 ),  United Kingdom ( 規格 ),  Japan ( 規格 )與  South Korea ( 規格 ) Flags. \n 參考: \n ROC flag \xa0in Brython,  PROC flag  in Brython,  USA flag  in Brython. \n graphics library examples:  1 ,  2 ,  3 ,  4 . \n 各分組成員協同將  jsliu_c_programming.pdf \xa0 (需要下載密碼) 內容整理後, 放入各分組網站. \n 上述以 C 語言編寫的程式, 假如採用 Javascript 或 Python 語言編寫, 對於機械與機電整合設計工程師, 分別有那些不同的應用範圍? \n w9 程式練習 : \n 2b w8 作業: 請根據\xa0 cad2023_2b_w8.txt \xa0檔案中的內容, 透過程式的讀取與篩選, 按照時間先後, 列出 2b 修課學員中已經登入 s1511.cycu.org 的學號. (修課學員名單\xa02a:\xa0 0838 , 2b:\xa0 0851 ) \n 假如在近端處理, 必須同時儲存兩個檔案後, 進行資料選取: \n get_stud_num_from_last_data.py \xa0(若採 Brython 編寫, 可以直接 列出結果 , 依照登入時間先後排序, 其中 41123227 為管理者最早測試時登入, 若採用 ANSI 編寫:  c_parse_last_cp2023.7z ) \n \n 1a 上課時所建立的檔案 (已經在 w10 2b 上課時改為系上 DNS 設定): \n cadlab_network_setting.7z  (需要下載密碼) - 電腦輔助設計室網路設定批次與 Powershell 檔案 (註: 使用中華電信 IPv6 DNS 設定, w10 星期四之後無法在校網使用 hinet IPv6 DNS server 設定). \n w10_2b_cadlab_network_setting.7z  (需要下載密碼) - 電腦輔助設計室網路設定批次與 Powershell 檔案. \n tinyc.7z  (需要下載密碼) - 使用 Tiny C Compiler 編譯 C 程式, 包含 gd 與 gnuplot. \n python3114_git_putty.7z  (需要下載密碼) - 將近端 cmsimde 啟動並改版後推向 Github 所需的檔案. \n \n 線上簡報、網誌與多媒體影片製作工具: \n Leo Editor  ( 討論群組 ) 為大綱管理系統, 可以當作程式開發的 IDE (Integrated Development Environment) 使用, 可用來編輯 reveal.js 簡報檔案中的 html 與 markdown, 也可用來編輯 Pelican 網誌 markdown 與轉檔, 並且在電腦輔助設計與分析過程中, 可以用來解讀 CoppeliaSim XML 格式檔案. \n 因為 Python 3.12.0 環境下 Leo Editor 還無法正常透過 pip 安裝, 因此必須手動安裝 PyQt5 之後, 再使用 pip install leo, 所完成的 Python 3.12.0:\xa0 Python312_leo_664_PyQt5.7z  (需要下載密碼) \n Wink  為操作流程影片製作套件, 可以在電腦操作過程, 儲存關鍵頁面與滑鼠點擊區域後, 加上輔助文字說明後製作成 mp4 影片檔. \n ShareX  為螢幕畫面取像或錄影套件, 可以擷取電腦畫面任一區域存為影像檔, 或者結合語音說明與滑鼠操作錄製說明影片. \n OBS  為電腦廣播製作系統, 可以結合各種語音、圖像與影片製作出多元的電腦操作說明影片. \n Wink 與 ShareX 都需要  ffmpeq.exe .', 'tags': '', 'url': 'w10-w11.html'}, {'title': 'w12-w13', 'text': 'w12_1b_1.mp4  (說明如何在 Replit, s.cycu.org 與 Windows 中執行 C 程式) \n w12_1b_2.mp4  (說明如何在 Replit, s.cycu.org 與 Windows 中執行 C 程式的 gd 繪圖) \n w12_1b_3.mp4  (說明如何在 Windows 共用 s.cycu.org 上的 id_rsa 私鑰, 轉為 .ppk 之後, 可以再結合 .gitconfig 中的 http.proxy 設定, 以 SSH 加上 https 取下個人或分組倉儲後, 在 Windows 啟動編輯改版後推至 Github) \n w13 \n w13_1a_1.mp4  (四分鐘之後沒有聲音, 內容請參考下一個影片) \n w13_1a_2.mp4  (補充說明第一部影片的內容) \n w13_1a_3.mp4  (說明從 C, Javascript 與 Python 在計算機程式的應用歷程) \n w13_1a_4.mp4  (說明如何在近端建立 OpenSSH 格式的 public key, putty 格式的 private 並且配合 putty session 讓使用者可以將倉儲 git clone 到近端維護) \n 利用 C 程式語法, 採 數值分析方法 (Numerical Analysis Methods) 解常微分方程式 , 並將分析結果, 以  Gnuplot  繪出 png 圖檔. \n 與數值分析有關的  Open Textbooks :  https://open.umn.edu/opentextbooks/textbooks/741 \n https://mde.tw/cpnote/content/MSD.html  ( Mass Spring Damper  動態分析) \n https://mde.tw/cpnote/content/ANSI%20C.html  (從 C 擴展到 Javascript, 將數值分析結果直接顯示在網際內容管理網頁上, 以方便進行後續協同設計) \n C -> Javascript -> Brython -> Python -> Cython (C++) -> Rust or Mojo \n C 目前除了用於數值分析運算外, 由於其跨硬體的可攜性優勢而經常被用於機電 自動控制 領域 \n 將 C 改寫為 Javascript 後, 在網頁前端可以直接顯示結果, 也能與後端的各種運算軟硬體結合, 成為協同產品設計的有效工具: 例如:  https://pmksplus.com/  與  https://motiongen.io/  都是典型的應用範例. \n PMKS 原始碼  (採  Silverlight ) \n PMKS + 原始碼  (採  Typescript ) \n pmks+ 平面機構設計範例1 ,  機構合成範例1 ,\xa0 \n 然而目前 Javascript 與機械設計的結合性略低於 Python, 且近年來許多原本採 Matlab 執行運算與控制的應用, 已經可以完全透過 Python 程式取代, 因此若能在網頁前端使用 Javascript 與  Brython , 然後在網頁後端採用 Python + Cython, 除了可以在數值分析運算上以 C++ 的速度執行, 也可在後續導入許多與 Python 高度相關的 AI 套件, 例如:  TensorFlow 、 Keras  與  PyTorch . \n Matlab 打不過 Python, 於是 推廣兩者一起使用 .  Matlab 與 Python 比較 , 假如真的要 比輸贏 或者叫你 不要再走回頭路了 . \n Brython 程式練習頁面:  https://mde.tw/cpnote/content/Brython.html \n https://mde.tw/cpnote/content/w10-w11.html  中的程式改以 Brython 編寫, 並將程式存入個人的 Github Gist 取用. How? \n \n 可攜系統中 home_ipv6 目錄中的 .gitconfig \n [http]\n\tproxy = http://p4.cycu.org:3128\n[user]\n\tname = 你的 github 帳號\n\temail = 登記在 github 帳號的 email\n[safe]\n\tdirectory = *\n[http "https://github.com"]\nsslVerify = false\n[pull]\n\trebase = false\n \n .gitconfig 設定說明: \n [http] \xa0 \xa0 proxy =  http://p4.cycu.org:3128 \n 也可以透過命令列中輸入 git config --global http.proxy  http://p4.cycu.org:3128 \xa0取得 \n 這是設定 git 指令需要使用 http 或 https 協定擷取 cmsimde 時, 假如網路只支援 IPv6, 就必須透過代理主機連線到目前只支援 IPv4 的 github.com \n [user] \xa0 \xa0 name = 你的 github 帳號 \xa0 \xa0 email = 登記在 github 帳號的 email \n 是在 git commit -m "提交訊息" 時綁定身分用 \n [safe] \xa0 \xa0 directory = * \n 則是宣告目前所使用的檔案目錄都是 safe \n [http "https://github.com"] \xa0 \xa0 sslVerify = false \n 表示當連線到 github.com 時所使用的 key 不用登記在 Windows 操作系統中 \n [pull] \xa0 \xa0 rebase = false \n 表示 git pull 時, 並不使用 rebase, 而是直接 fetch 遠端資料, 並且進行 merge 合併', 'tags': '', 'url': 'w12-w13.html'}, {'title': '繪圖範例', 'text': 'w13_1b_1.mp4  (說明如何利用 ChatGPT 協助編寫 gd 繪圖程式) \n 以下將利用\xa0 hellogd.c \xa0作為基礎, 對 ChatGPT 提問, 並設法了解 AI 所傳回的 gd 繪圖程式內容: \n 詢問 1:\xa0 \n 目前的 C 程式內容如下" #include <stdio.h> #include <gd.h> #include <math.h> int main() { int width = 800; int height = 600; \n 中間的程式碼沒有列出...... \n gdImagePngEx(img, outputFile, 9); fclose(outputFile); gdImageDestroy(img); return 0; } " 請加上一個可以宣告旋轉中心點與順時鐘旋轉角度作為輸入的函式 rotateFilledPolygon(x_orig, y_orig, rotation_ang, points2), 並且加入該函式的呼叫與應用. \n ChatGPT 回答 1: \n 要加入可以宣告旋轉圓點和順時鐘旋轉角度作為輸入的函式  rotateFilledPolygon ，可以使用以下方式修改你的程式碼。這個函式的目標是旋轉  points2  中的多邊形，並將結果畫到圖像上。 \n hellogd1.c \n 這樣，你的程式現在包含了一個可以旋轉多邊形的函式，並且在主函式中有兩次呼叫，分別旋轉了兩個不同的多邊形。 \n hellogd1.c 畫出的圖形: \n \n 詢問 2: \n 請加上呼叫 points 與 points2 代入 rotateFilledPolygon() 各旋轉 30 度共四次的程式 \n ChatGPt 回答 2: \n Sure, you can call  rotateFilledPolygon()  multiple times to rotate  points  and  points2  by 30 degrees each time. Here\'s an example of how you can modify your code to achieve this: \n hellogd2.c \n This code rotates both  points  and  points2  by 30 degrees four times each and draws them on the image. \n 其中修改\xa0rotateFilledPolygon(500, 200, 30.0, points2, 4); 讓 points2 繞著 (500, 200) 旋轉 12 次, 結果如下: \n \n', 'tags': '', 'url': '繪圖範例.html'}, {'title': 'w14', 'text': '延續  https://mde.tw/cpnote/content/w10-w11  中的項目執行內容. \n 項目1 : 如何快速設定電腦輔助設計室中的網路 - 採 IPv6 網路設定. \n 在電腦輔助設計室, 若使用 Windows 11 電腦, 可以利用隨身碟中的  w11_1a.7z \xa0(第十一週 1a 上課時建立的共用網路設定檔案), 將各自的固定 IPv6 位址放入 .ps1 檔案後, 使用滑鼠右鍵移到 .bat 批次檔案圖像上, 並以管理者身分執行. \n 若是使用手機或筆電在其他網路環境, 或使用名稱為 NFU 的無線網路 (AP 無預設密碼, 連線後在瀏覽器中的表單, 以學號及校務系統密碼登入連線), 則可自行手動設定網路, 惟需注意若筆電曾使用上列 .bat, .reg 與 .ps1 程式方法設定, 該電腦輔助設計室中只啟動 IPv6 且使用系上代理主機的設定, 可能無法從操作系統的網路設定圖形介面中進行修改, 必須循 .reg 設定檔案中的登錄檔路徑執行修改. \n 項目2 : 請分別利用 Replit、s.cycu.org 或 localhost 維護個人與分組的網站內容, 並比較不同方法開發計算計程式的優缺點. \n Replit 至今的免費帳號仍可用來維護個人與分組網站內容, 也能用來開發 C + gd + gnuplot 等程式. \n s.cycu.org 中必須善用 ps -axo pid,comm,uname | grep "python3" 查詢個人所啟動的網頁編輯 process id, 並了解各用戶可以利用 kill pid 刪除 process, 且可利用 python3 server.py& 再次啟用網頁編輯服務. \n Replit: 改版之前必須先至 Shell 執行 git pull, 若有動態網站檔案 (即 config/content.htm) 中的衝突, 可在編輯網站利用 EditA (Edit All 頁面) 決定衝突區域的內容. \n s.cycu.org 與 localhost: 改版之前必須先至倉儲目錄執行 git pull, 若有動態網站檔案 (即 config/content.htm) 中的衝突, 可在編輯網站利用 EditA (Edit All 頁面) 決定衝突區域的內容. \n 項目3 : 程式練習: \n w8 之前所指令的程式 C 練習作業 : \n 上課內容 中的 Exercises \n w2-w5  週任務中的 Exercises \n w6-w7  週任務中的練習一與練習二 \n 請利用 C 結合 gd 繪圖程式庫, 畫出  PROC ( 規格 ),  United Kingdom ( 規格 ),  Japan ( 規格 )與  South Korea ( 規格 ) Flags. \n 參考: \n ROC flag \xa0in Brython,  PROC flag  in Brython,  USA flag  in Brython. \n graphics library examples:  1 ,  2 ,  3 ,  4 . \n 各分組成員協同將  jsliu_c_programming.pdf \xa0 (需要下載密碼) 內容整理後, 放入各分組網站. \n 上述以 C 語言編寫的程式, 假如採用 Javascript 或 Python 語言編寫, 對於機械與機電整合設計工程師, 分別有那些不同的應用範圍? \n w9 程式練習 : \n 2b w8 作業: 請根據\xa0 cad2023_2b_w8.txt \xa0檔案中的內容, 透過程式的讀取與篩選, 按照時間先後, 列出 2b 修課學員中已經登入 s1511.cycu.org 的學號. (修課學員名單\xa02a:\xa0 0838 , 2b:\xa0 0851 ) \n 假如在近端處理, 必須同時儲存兩個檔案後, 進行資料選取: \n get_stud_num_from_last_data.py \xa0(若採 Brython 編寫, 可以直接 列出結果 , 依照登入時間先後排序, 其中 41123227 為管理者最早測試時登入, 若採用 ANSI 編寫:  c_parse_last_cp2023.7z ) \n 從  hellogd.c  變化出下列各國國旗: 過程請參考 簡報 . \n   (如何 求平面上兩線交點 ?) \n ROC flag in Brython  (將 Brython 程式儲存至個人 Gist 後, 從  Brython 頁面 中直接呼叫執行) \n USA 國旗 \n USA flag in Brython \n PROC 國旗 \n PROC flag in Brython \n UK 國旗 \n Japan 國旗 \n S Korean 國旗 \n 貪食蛇 in Brython \n Html5 canvas ebook \n 利用 ChatGPT 對話所完成的 2a 座位排序程式:  w13_2a_seat.py 執行結果  (對話與程式編寫過程請參考 這裡 ) \n 利用 " sudo update-rc.d stunnel4 defaults " 將 s.cycu.org 中的 stunnel4 設為與系統同步啟動. \n 利用 Gist 與 Brython 頁面執行: \n 從 1 累加到 10 \n w14_1a_1.mp4 \xa0(總結網路設定與 C 繪圖程式執行環境設定) \n w14_1a_2.mp4  (如何將 Brython 程式存入個人 Github Gist 區域, 並呼叫執行) \n pentagram (五芒星) 畫法: OC 為長軸 r, 角 OCB 為 18 度, 角 BOA 為 36 度, 因此 OA = r*sin(18度) = OB*cos(36度), 因此短軸 OB 為 r*sin(18度)/cos(36度) 若以 OA 延伸至圓上的尖角作為起點, 也就是長軸 r 旋轉 0 度, 接著順時針旋轉 36 度至 B 點則距離中心點 O 為短軸, 此兩點的座標從中心點 (x, y), x 軸向右為正將增加短軸 OB*sin(36度), 而 y 軸因為向下為正, 因此將減少 OB*cos(36度), 也就是 B 點的 x 座標為 x + OB*sin(36度), y 座標則為 y - OB*cos(36度), 接著若再順時針轉 36 度則抵達 C 點座標, C 點的 x 座標為 x + OC*sin(36度), y 座標則為 y - OC*cos(36度), 將上述運算寫為 C + gd 的五芒星塗色程式則成為: \n void draw_star(gdImagePtr img, int x, int y, int size, int color) {\n    gdPoint points[10];\n    double deg = M_PI/180.;\n\n    for (int i = 0; i < 10; i++) {\n        double angle = M_PI/2 + i* 2 * M_PI / 10;\n        int radius = (i % 2 == 0) ? size : size*sin(18*deg)/cos(36*deg);\n        points[i].x = x + radius * cos(angle);\n        points[i].y = y - radius * sin(angle);\n    }\n\n    // Fill the star with white color\n    gdImageFilledPolygon(img, points, 10, color);\n} \n 若是畫空心的輪廓線條五芒星程式則成為: \n void draw_star(gdImagePtr img, int x, int y, int size, int color) {\n    gdPoint points[10];\n    double deg = M_PI/180.;\n\n    for (int i = 0; i < 10; i++) {\n        double angle = M_PI/2 + i* 2 * M_PI / 10;\n        int radius = (i % 2 == 0) ? size : size*sin(18*deg)/cos(36*deg);\n        points[i].x = x + radius * cos(angle);\n        points[i].y = y - radius * sin(angle);\n    }\n\n    // Fill the star with color\n    //gdImageFilledPolygon(img, points, 10, color);\n    // Draw the star with line\n    gdImagePolygon(img, points, 10, color);\n} \n 五芒星與座標旋轉範例: \n w15_star_rotate_gd.7z \n proc_flag_in_gd.c \n', 'tags': '', 'url': 'w14.html'}, {'title': '線上繪圖', 'text': '列印 10 次 Hello World \xa0( 操作說明 ) \n 下載 ipv4 與 ipv6 網路連線用的 tinyc 可攜環境:  tinyc_w14.7z  ( 操作說明 ) \n  第一程式編輯區可透過 src 變數從 gist 取下程式執行\n第二程式區則可直接將 gist url 寫在網頁中以按鈕執行\n \n C +  SDL  2D Game: 登入 Replit 後, 點擊  Basque , 將原始碼匯入 Repl 後, 按下 Run 執行. \n 1 add to 100   ROC flag   hellogd \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': '線上繪圖.html'}, {'title': 'w15', 'text': 'w15_1a_1.mp4  (說明課程總結, 並且更新可以開發 C 靜態與動態繪圖的程式環境) \n w15_1a_2.mp4  (在 Replit, s.cycu.org 與 localhost 中保持與 github 倉儲同步) \n 課堂考試題目: \n 1) 根據  roc_list_coord_flag.7z  程式內容所印出的六組 ABED 等繪製 ROC 國旗白日圖案中的菱形四個關鍵點, 請直接在青天與滿地紅的圖案中, 利用白色作為畫線顏色, 將第二組的 ABED 等四個點的座標, 以直線相連.   2) 承上題, 請列出第二組 ABED 的四條直線與白日中的大圓所相交 (intersect) 的四個點座標.   請在個人的 w15 頁面中完成上列兩個題目的操作後, 製作一個 Wink 影片說明操作過程與結果, 完成後請將個人網頁連結提供本對談的回應中(即回應到 CP2023 的團隊貼文下方). \n 參考資料: \n 平面上圓與直線的交點:\xa0 https://mathworld.wolfram.com/Circle-LineIntersection.html \xa0 \n 程式:\xa0 https://rosettacode.org/wiki/Line_circle_intersection#C \xa0 \n \n tcc with gd, raylib and sdl2.7z  (需要下載密碼) \n 解開壓縮後 取代原有 tinyc 可攜環境中的 tcc 目錄 , 並將  cpp.properties  檔案取代原有 wscite 目錄中的檔案後, 即可直接利用 wscite 編輯器中的 Tools - Go 利用 Tiny C Compiler 執行 C + gd, C + raylib, C + gnuplot 與 C + SDL2 等位於 tcc\\c_ex 目錄中的靜態與動態繪圖範例程式. \n https://libgd.github.io/manuals/2.2.3/ \n https://www.raylib.com/ \n https://github.com/libsdl-org/SDL \n https://github.com/simple2d/simple2d \xa0 \n https://github.com/ryanpcmcquen/basque \xa0 \n https://github.com/actsl/kiss_sdl \xa0 \n https://github.com/johnpayne-dev/MinecraftC \xa0 \n https://github.com/mdecycu/F1-Race \xa0 \n https://github.com/mdecycu/Run-Away  ( 下載 tcc 編譯連結後的可執行檔案 , 需要下載密碼) \n https://github.com/rapiz1/DungeonRush \xa0 \n https://github.com/pygame/pygame \xa0 \n https://github.com/pygame-community/pygame-ce \xa0 \n https://github.com/cxong/cdogs-sdl \xa0 \n https://github.com/fabiangreffrath/crispy-doom \xa0 \n https://github.com/agavrel/42_CheatSheet \xa0 \n https://www.cs.colby.edu/maxwell/courses/tutorials/maketutor/ \n https://lazyfoo.net/tutorials/SDL/ \xa0 \n https://hackmd.io/@seanyih/SDL2-tutorial/ \n C 程式的 gd 與 gnupot 繪圖 -> Brython Frontend + Python Backend ( cmsimde ) \n cmsimde \xa0 linked  with  Solid Edge Community edition \n Arduino Programming in C \n C 程式的動態繪圖 (Game or Simulation): \n C +  SDL  2D Game: 登入 Replit 後, 點擊  Basque , 將原始碼匯入 Repl 後, 按下 Run 執行 \n https://github.com/mdecycu/tinyc.games \n C 程式版次管理與資料庫系統: \n https://www.fossil-scm.org \n https://www.sqlite.org \n Python 的動態繪圖 (PyQt and Pysdl2): \n https://pyslvs.github.io \n https://github.com/py-sdl/py-sdl2 \n 然後呢? \n Rust: \n https://github.com/KmolYuan/efd-rs \n https://github.com/KmolYuan/four-bar-rs \n Typescript: \n https://github.com/PMKS-Web/PMKSWeb \n Mojo: \n https://github.com/modularml/mojo', 'tags': '', 'url': 'w15.html'}, {'title': 'Network', 'text': '這裡我們再來談與網路有關的議題, 其實就機械設計相關人員就使用網路的議題, 比起必須從底層設定網路的資訊工程相關人員來說, 已經非常單純與直覺. 但是為何課程中只要一提到與電腦軟硬體或網路相關的議題時, 多數人都會覺得使用上藏著許多秘訣. 其實不然. 因為機械設計工程師在運用電腦與網路, 最重要的議題就是: \n 能不能使用電腦與網路執行 有效率的運算 \n 以及 \n 能不能運用電腦與網路進行 協同設計 \n 至於過程中的 複雜度 來自於: \n \n 幾乎所有的電腦軟硬體內定的回應都是 英文 \n 使用者對於自身長期使用的電腦與軟硬體相關配備與設置 並非十分了解 \n 電腦輔助設計室中若採用  IPv4  協定配置, 學員 無法取得足夠上網頻寬 \n 學校  IPv6  網路協定的設置 並不完全 \n github.com  至今(2023.12)仍 只支援 IPv4 \n \n 以下將逐一針對上列議題加以說明, 該如何因應: \n 熟悉電腦回應的英文訊息: 在使用電腦軟硬體過程, 當電腦回應各種英文訊息時, 儘量不要直接利用翻譯軟體轉為中文, 而應該設法了解每一個英文單字與術語的意思, 更好的習慣是, 在 B5 的紙本筆記本上謄寫各單字的 英英字典 查詢結果, 假以時日後, 將可充分了解各種情況下電腦的回應訊息, 並作出適當回應. \n 熟悉電腦軟硬體的配備: 無論使用自己或公用電腦時, 都必須設法查詢目前電腦軟硬體配備的規格, 以及所安裝的套件屬性, 針對可以取得的操作系統安裝檔案, 應該從空機自行安裝並設定網路. 其他常用的電腦套件也應該從該軟體的開發起源或目前所屬公司的相關資料了解起, 並自行安裝設定. 在充分了解電腦各式軟硬體安裝與配置的過程, 可以利用 Virtualbox 安裝虛擬主機, 並從中逐一測試不同軟硬體搭配下的各種表現, 從單機的單一網路卡配置開始, 到多台虛擬主機在不同軟硬上彼此透過不同的網路設定連線時的使用操作演練, 將可以最方便取得的模擬環境, 逐步熟悉電腦軟硬體相關內容與配置方法. \n IPv4 網路的限制: 電腦輔助設計室中的電腦若採用 IPv4 連線機制, 必須透過 NAT 派送內部 IP 位址後, 統一以 NAT 的一個外部 IPv4 位址連外, 如此各電腦所能取得的對外頻寬, 並不足以讓學員順利操作各種 ssh, sftp, https 以及 git 網路連線對外指令. 因此若希望依賴連外網路上課, 必須局部或全部電腦採純 IPv6 網路上網. 因此在電腦輔助設計室上網的設定要訣是: 假如 IPv4 網速無法達到使用要求, 可以採純 IPv6 網路設定上網, 但是各種協定連線則必須各自設定雙網路協定支援的代理主機. 如此才能順利對目前仍只支援 IPv4 的伺服器連線(主要標的為 github.com). \n 學校的 IPv6 環境設置並不完全: 2023 年中之前, 儘管學校並無正常的 IPv6 DNS 伺服器可用, 但因允許使用中華電信的 DNS 伺服器設定, 因此只要將 IPv6 網路協定, 設為 DHCP6 取得 IPv6 位址後, 再搭配 hinet 的 IPv6 DNS 設置就可正常以網站的符號名稱連外. 但是目前 (2023.12) DHCP6 僅給定 address, 並無正確的 gateway 與 DNS 設定. 因此必須要自行設定固定 IPv6 address 與 gateway 之外, 還必須自行設定系上的 DNS server. 才能正常使用 IPv6 網路協定連外. (2016 年曾經規劃的 系上 IPv6 位址分配 , 也從未施行, mde.nfu.edu.tw 與 eng.nfu.edu.tw 網域上的  Google Workspace for Education  也一直放在雲端) \n github.com 只支援 IPv4: 這個我們沒有辦法改變, 只能使用 IPv4 連線, 或者在純 IPv6 網路環境下, 針對 https 與 ssh 對 github.com 連線時, 透過雙網路協定支援的代理主機進行連線. \n 實際操作練習: 假如使用的電腦硬體是 Intel i7 且記憶體 8G 以上, 可以安裝  https://www.virtualbox.org/wiki/Downloads , 並下載  Windows 10 64位元 22H2.4  (在校網或透過 VPN 下載)開始進行各種配置與設定練習.', 'tags': '', 'url': 'Network.html'}, {'title': 'C_lib', 'text': '本課程針對 C 程式語言的教學將使用下列程式庫: \n gnuplot :  https://github.com/gnuplot/gnuplot \n 數值分析繪圖程式庫  - 在機電設計流程中, 工程師運用數值分析法進行設計與模擬運算後, 將數據存檔, 可利用 gnuplot 繪圖指令, 以令人容易理解的圖形呈現數值分析結果. \n 範例: \n euler_gnuplot_msd_ex1.c \n 執行結果: \n \n \n \n gd :  https://github.com/libgd/libgd \n 泛用繪圖程式庫 - 工程師在產品開發或製造程序中, 可利用線條(例如: 特殊齒輪外型)、字串(例如: 製造日期或保固訊息)或塗色區域(特定標誌、二維條碼或 QRCode)進行一般標誌或圖像繪圖. \n 範例: \n gd_ex1.c \n 執行結果: \n  gd_ex1.png \n  gd_ex1.jpg \n \n raylib :  https://github.com/raysan5/raylib \n raygui:  https://github.com/raysan5/raygui \n https://www.raylib.com/cheatsheet/raylib_cheatsheet_v4.0.pdf \n 電玩程式庫 - 工程師可將機電流程中與產品設計或製造程序有關的系統, 透過與使用者互動呈現逼真的模擬過程或結果, 也可用來開發與機電系統有關的虛擬整合套件(例如: 透過與實體感測器或影像辨識系統結合, 將實時運動競賽中的運動員動作與虛擬實境或擴增實境系統結合), 也可用來 開發電動遊戲 ( raylib-games ). \n 下載  Tiny C Compiler with gd and raylib 程式庫.7z  (需要下載密碼) \n 範例: \n move_red_dot.c \n /*******************************************************************************************\n*\n*   raylib [core] example - Keyboard input\n*\n*   Example originally created with raylib 1.0, last time updated with raylib 1.0\n*\n*   Example licensed under an unmodified zlib/libpng license, which is an OSI-certified,\n*   BSD-like license that allows static linking with closed source software\n*\n*   Copyright (c) 2014-2023 Ramon Santamaria (@raysan5)\n*\n********************************************************************************************/\n// move_red_dot.c\n/* on Replit, add pkgs.raylib to replit.nix\n   use cc move_red_dot.c -lraylib to compile and link\nuse ./a.out to execute and move the red dot with arrow keys\n*/\n// on Portable system, use cc=tcc.exe -run -lgd -lraylib to run\n\n#include "raylib.h"\n\n//------------------------------------------------------------------------------------\n// Program main entry point\n//------------------------------------------------------------------------------------\nint main(void)\n{\n    // Initialization\n    //--------------------------------------------------------------------------------------\n    const int screenWidth = 800;\n    const int screenHeight = 450;\n\n    InitWindow(screenWidth, screenHeight, "raylib [core] example - keyboard input");\n\n    Vector2 ballPosition = { (float)screenWidth/2, (float)screenHeight/2 };\n\n    SetTargetFPS(60);               // Set our game to run at 60 frames-per-second\n    //--------------------------------------------------------------------------------------\n\n    // Main game loop\n    while (!WindowShouldClose())    // Detect window close button or ESC key\n    {\n        // Update\n        //----------------------------------------------------------------------------------\n        if (IsKeyDown(KEY_RIGHT)) ballPosition.x += 2.0f;\n        if (IsKeyDown(KEY_LEFT)) ballPosition.x -= 2.0f;\n        if (IsKeyDown(KEY_UP)) ballPosition.y -= 2.0f;\n        if (IsKeyDown(KEY_DOWN)) ballPosition.y += 2.0f;\n        //----------------------------------------------------------------------------------\n\n        // Draw\n        //----------------------------------------------------------------------------------\n        BeginDrawing();\n\n            ClearBackground(RAYWHITE);\n\n            DrawText("move the ball with arrow keys", 10, 10, 20, DARKGRAY);\n\n            DrawCircleV(ballPosition, 50, MAROON);\n\n        EndDrawing();\n        //----------------------------------------------------------------------------------\n    }\n\n    // De-Initialization\n    //--------------------------------------------------------------------------------------\n    CloseWindow();        // Close window and OpenGL context\n    //--------------------------------------------------------------------------------------\n\n    return 0;\n} \n 在 Replit 與近端程式環境執行結果: \n 啟動後以鍵盤方向鍵上下左右控制紅點. \n \n SDL : \n https://github.com/libsdl-org/SDL \n https://github.com/libsdl-org/SDL/releases/download/release-2.28.5/SDL2-2.28.5-win32-x64.zip \n https://github.com/libsdl-org/SDL/releases/download/release-2.28.5/SDL2-devel-2.28.5-mingw.tar.gz \n https://github.com/libsdl-org/SDL_ttf \n https://github.com/libsdl-org/SDL_ttf/releases/download/release-2.20.2/SDL2_ttf-2.20.2-win32-x64.zip \n https://github.com/libsdl-org/SDL_ttf/releases/download/release-2.20.2/SDL2_ttf-devel-2.20.2-mingw.zip \n On Replit:  https://replit.com/@wcms/basque \n Replit 環境中的 replit.nix 設定: \n { pkgs }: {\n\tdeps = [\n        # 安裝 gnuplot 套件\n        pkgs.gnuplot\n        # 安裝 gd 程式庫\n        pkgs.gd\n        # 安裝 raylib 程式庫\n        pkgs.raylib\n        # 以下安裝 SDL2 相關程式庫\n        pkgs.SDL2\n        pkgs.SDL2_image\n        pkgs.SDL2_mixer\n        pkgs.SDL2_ttf\n\t];\n} \n 利用 MSYS2 編譯 SDL2: \n 下載 SDL 原始碼:  https://github.com/libsdl-org/SDL/archive/refs/tags/release-2.28.5.zip \n cd SDL-release-2.28.5 \n mkdir build \n cd build \n cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release \n mingw32-make \n 下載 SDL_ttf 原始碼:  https://github.com/libsdl-org/SDL_ttf/archive/refs/tags/release-2.20.2.zip \n cd \n 以下將建立一個能透過 Tiny C 編譯執行上列程式庫的可攜套件:', 'tags': '', 'url': 'C_lib.html'}, {'title': 'setup', 'text': '利用隨身碟中的批次檔案, 設定所需的網路環境. \n cadlab_network_setup.7z \n 納入個別學員所分配到的 IPv6 固定網址設定:  2023_fall_cadlab_network_setup.7z \n 1_network_setup.bat (需要管理者身分執行, 才能關閉 IPv4 網路, 啟動 IPv6 網路) \n echo "disable ipv4 and setup proxy for ipv6"\nSET CurrentDir=%~dp0\n%windir%\\system32\\reg.exe import %CurrentDir%1_2023_cadlab_network_setup.reg\npowershell -executionpolicy bypass -File %CurrentDir%1_disable_ipv4.ps1\nrem mstsc /admin /v:your_server\nexit \n 其中包含以下兩個設定檔案: \n 1_2023_cadlab_network_setup.reg 用於關閉自動 Proxy 搜尋, 開啟手動設定 Proxy server. \n Windows Registry Editor Version 5.00\n\n [HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings]\n ; disable AutoDetect\n"AutoDetect"=dword:00000000\n"MigrateProxy"=dword:00000001\n; enable Proxy\n"ProxyEnable"=dword:00000001 \n"ProxyHttp1.1"=dword:00000000 \n"ProxyServer"="http://[2001:288:6004:17::4]:3128"\n"ProxyOverride"="localhost;192.168.1.0/24;<local>" \n 1_disable_ipv4.ps1 用於關閉 IPv4 網路協定, 開啟 IPv6 網路協定. \n 對 ChatGPT 提問: \n powershell "Disable-NetAdapterBinding -Name "*" -ComponentID ms_tcpip Enable-NetAdapterBinding -Name "*" -ComponentID ms_tcpip6"可以關閉 IPv4 網路, 開啟 IPv6, 如何同時設定 IPv6 所使用的兩台 DNS servers? \n 原先設定: \n Disable-NetAdapterBinding -Name "*" -ComponentID ms_tcpip\nEnable-NetAdapterBinding -Name "*" -ComponentID ms_tcpip6 \n 修改後的 1_disable_ipv4.ps1 Powershell 設定檔案: \n # 關閉 IPv4 網路\nDisable-NetAdapterBinding -Name "*" -ComponentID ms_tcpip\n\n# 啟用 IPv6 網路\nEnable-NetAdapterBinding -Name "*" -ComponentID ms_tcpip6\n\n# 設置 IPv6 網路中的兩個 DNS 伺服器 (hinet)\n$dnsServers = "2001:b000:168::1", "2001:b000:168::2"\nSet-DnsClientServerAddress -InterfaceAlias "*" -ServerAddresses $dnsServers\n \n 對 ChatGPT 提問: \n the following powershell script can setup windows network connection "# 關閉 IPv4 網路 Disable-NetAdapterBinding -Name "*" -ComponentID ms_tcpip \xa0 # 啟用 IPv6 網路 Enable-NetAdapterBinding -Name "*" -ComponentID ms_tcpip6 \xa0 # 設置 IPv6 網路中的兩個 DNS 伺服器 (hinet) $dnsServers = "2001:b000:168::1", "2001:b000:168::2" Set-DnsClientServerAddress -InterfaceAlias "*" -ServerAddresses $dnsServers" what if the ipv6 address need set to 2001:288:6004:17:1234::1234 and subnet prefix as 64 and ipv6 gateway as 2001:288:6004:17::254 \n 可以得到下列回應答案: \n 加上個別學員所分配到的 IPv6 固定網址設定後的 1_disable_ipv4.ps1 Powershell 設定檔案 (必須自行更改固定 Ipv6 位址): \n # 關閉 IPv4 網路\nDisable-NetAdapterBinding -Name "*" -ComponentID ms_tcpip\n  \n# 啟用 IPv6 網路\nEnable-NetAdapterBinding -Name "*" -ComponentID ms_tcpip6\n  \n# 設置 IPv6 網路中的兩個 DNS 伺服器 (hinet)\n$dnsServers = "2001:b000:168::1", "2001:b000:168::2"\nSet-DnsClientServerAddress -InterfaceAlias "*" -ServerAddresses $dnsServers\n\n\n# 設定 IPv6 固定位址 (fixed address), 子網路首碼長度 (subnet prefix) 與網路預設閘道 (gateway) 等三個變數\n$ipv6Address = "2001:288:6004:17:請使用個人所分配到的 IPv6 位址"\n$subnetPrefixLength = 64\n$gateway = "2001:288:6004:17::254"\n \n# 參考 https://serverfault.com/questions/427234/getting-network-interface-device-name-in-powershell\n$query = "SELECT * FROM Win32_NetworkAdapter WHERE Manufacturer != \'Microsoft\' AND NOT PNPDeviceID LIKE \'ROOT\\\\%\'"\n$interfaces = Get-WmiObject -Query $query | Sort index\n$interfaces | ForEach{\n    $friendlyname = $_ | ForEach-Object { $_.NetConnectionID }\n    New-NetIPAddress -AddressFamily "IPv6" -InterfaceAlias $friendlyname -IPAddress $ipv6Address -PrefixLength $subnetPrefixLength -DefaultGateway $gateway\n}\n\n \n# 列出所使用的 IPv6 網路通訊協定內容\nWrite-Host "IPv6 Address: $ipv6Address/$subnetPrefixLength"\nWrite-Host "IPv6 Gateway: $gateway" \n 下載  2023_fall_w7_cadlab_network_setup.7z \xa0 (需要下載密碼), 必須先放入個人所分配到的 IPv6 位址後, 以管理者身分執行批次檔案, 就能直接完成電腦輔助設計室中電腦的網路連線設定. \n 各學員所分配的固定 IPv6 位址如下: \n 1a 學員展示用 IPv6 位址: 2001:288:6004:17:2023:cba:: 班級名單序號 \n 2b 學員展示用 IPv6 位址: 2001:288:6004:17:2023:cbb:: 班級名單序號 \n', 'tags': '', 'url': 'setup.html'}, {'title': 'replit', 'text': 'https://docs.replit.com/ \n w8: 為了強化保全, Replit 目前只能透過 Gmail 或 Github 帳號登入, 無法直接利用帳號與密碼登入. \n 請注意: 原本 Replit Python 3.8 虛擬環境的目錄為 venv, 但是 Python 3.10 虛擬環境的目錄已經改用 .pythonlibs, 因此倉儲若不希望帶著此一虛擬環境檔案, 則可以將 .pythonlibs 附加到 .gitignore \n 另外在近端必須處理 Python 3.12.0 版本中的\xa0 https://docs.python.org/3/library/ssl.html \xa0 \n httpd.socket = ssl.wrap_socket(httpd.socket,\n                   ^^^^^^^^^^^^^^^\nAttributeError: module \'ssl\' has no attribute \'wrap_socket\'\n \n 將 GitHub cmsimde 倉儲導入 Replit 的方法, 請參考\xa0 https://mde.tw/cadnote/content/Replit.html \xa0中的說明. \n 備註：建立 yengm (at gm.nfu) 帳號, for Replit  Teams for Education . \n 在 Replit C 程式環境中額外納入 gnuplot 套件的 replit.nix 設定: \n { pkgs }: {\n\tdeps = [\n\t\tpkgs.sudo\n        pkgs.clang_12\n\t\tpkgs.ccls\n\t\tpkgs.gdb\n\t\tpkgs.gnumake\n        pkgs.gnuplot\n\t];\n} \n C with gnuplot: \n #include <stdio.h>\n\nint main() {\n    // Open a file to write displacement and velocity data\n    FILE *outputFile = fopen("motion_data.txt", "w");\n    if (!outputFile) {\n        fprintf(stderr, "Failed to create data file.\\n");\n        return 1;\n    }\n\n    // Simulate motion for 10 seconds and calculate displacement and velocity, while writing data to the file\n    double x = 0.2;  // Initial displacement\n    double v = 0.0;  // Initial velocity\n    double dt = 0.01; // Time step\n    double t = 0.0;  // Time\n\n    while (t <= 10.0) {\n        double acceleration = (-10.0 * x - 0.5 * v) / 1.0; // Modified system parameters here\n        v += acceleration * dt;\n        x += v * dt;\n\n        fprintf(outputFile, "%lf %lf %lf\\n", t, x, v);\n\n        t += dt;\n    }\n\n    // Close the data file\n    fclose(outputFile);\n\n    // Start a Gnuplot process using popen\n    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");\n    if (!gnuplotPipe) {\n        fprintf(stderr, "Failed to start Gnuplot.\\n");\n        return 1;\n    }\n\n    // Use Gnuplot plotting commands, specify font and output as PNG\n    fprintf(gnuplotPipe, "set terminal pngcairo enhanced font \'default,10\' size 800,400\\n");\n    fprintf(gnuplotPipe, "set output \'motion_plot.png\'\\n");\n    fprintf(gnuplotPipe, "set title \'Displacement and Velocity vs. Time\'\\n");\n    fprintf(gnuplotPipe, "set xlabel \'Time (s)\'\\n");\n    fprintf(gnuplotPipe, "set ylabel \'Displacement (m)\'\\n");\n    fprintf(gnuplotPipe, "plot \'motion_data.txt\' using 1:2 with lines lw 2 title \'Displacement\', \\\n                             \'motion_data.txt\' using 1:3 with lines lw 2 title \'Velocity\'\\n");\n\n    // Close the Gnuplot process\n    fprintf(gnuplotPipe, "exit\\n");\n    pclose(gnuplotPipe);\n\n    return 0;\n}\n \n 在選擇 Python 作為 Language 的 repl 專案中, cc 已經內建, 若要加裝 gnuplot 套件則可在 replit.nix 設定檔案中加入 pkgs. gnuplot , pkgs. ncurses .dev, pkgs. gd , pkgs. vim HugeX 與 pkgs. raylib : \n { pkgs }: {\n    deps = [\n      pkgs.gnuplot\n      pkgs.ncurses.dev\n      pkgs.gd\n      pkgs.vimHugeX\n      pkgs.raylib\n    ];\n} \n gnuplot: 數值分析繪圖程式庫 \n gd: 泛用型繪圖程式庫 \n ncurses: 文字型類 GUI 程式庫 \n vim: 指令模式編輯器 \n raylib: 電動遊戲程式庫 \n \n \n', 'tags': '', 'url': 'replit.html'}, {'title': 'MSD', 'text': '學習要點(以下各項提問, 可以透過與 ChatGPT 的對話, 取得相關參考內容): \n 何謂微分方程式(Differential Equations)?何謂常微分方程式(Ordinary Differential Equations)? \n 為何要解出系統運動方程式(System Equations of Motion)的結果? \n 何謂牛頓運動定律? \n 工程師通常可以採甚麼方法解常微分方程式? \n 何謂數值分析(Numerical Analysis)?與計算機程式有何關聯? \n 工程師為什麼要在網頁中呈現系統的分析過程? \n 何謂 Euler\'s Method? \n 為什麼可以利用 Euler\'s Method 解常微分方程式? \n 何謂 Runge-Kutta Method? \n Euler\'s Method 與 Runge-Kutta Method 有沒有關聯? \n 可以將 Euler\'s Method 視為一階 Runge-Kutta Method 嗎? \n Runge-Kutta Method 是如何推導出來的? \n 為什麼要利用計算機程式語言, 採數值分析法解系統的運動方程式? \n 工程師在設計產品之前的理論分析重要嗎? \n Mass-Spring-Damper 是一個典型的物理模型, 由質量-彈簧-阻尼器等三個元件組成, 若將彈簧其拉力與變形量成正比, 若假設阻尼器的阻力大小則與其受力方向的速度成正比, 根據牛頓運動定律, 就可以從物理模型的自由體圖導入系統的運動方程式. 接下來就要利用計算機程式, 解此一系統的微分方程式. \n 計算機程式課程主要從基本的 C 語法開始, 設法利用數值分析法解簡單的  mass-spring-damper  運動方程式, 並將質量運動的位移與速度, 以 Gnuplot 畫出後, 將 C 程式改寫為 Javascript, 以便能直接將質量運動的位移與速度圖顯示在網頁中. \n \n in png: \n \n in  MathJax  v3: \n \\(m.\\ddot{x}(t) = -c.\\dot{x}(t) - k.x(t)\\) \n Solve  spring-mass-damper problem in Matlab.pdf  (需要下載密碼) \n 接續 Javascript 基本數值分析方法的學習, 將採 Brython 語法改寫後, 希望能直接在網頁中透過類似 Python 的語法, 進行數值分析運算與繪圖. 最後再將 Brython 語法轉為 CPython 程式, 讓使用者可以直接在電腦操作系統中進行數值分析與繪圖. \n 上述從 C, Javascript, Brython 到 Python 的範例練習, 主要目的是希望呈現最基本的網際機電資整合系統設計流程, 讓機械設計工程師能夠將所設計的產品 3D 零組件完成後, 轉入機電模擬系統 (CoppeliaSim, Webots 或 Robodk), 設法編寫或運用既有的全球資訊網前後端程式架構, 結合近端的實體模型與全球資訊網端的機電控制系統模擬, 進行機械、電子、電機與資工領域工程師協同產品設計. \n 由於 CoppeliaSim、Webots 以及 Solvespace 都是採用 C++ 程式語言編寫, 且都屬開放源程式套件, 使用者若要更進一步了解此類工具的設計與配置方法, 可以自行透過進階內容學習. \n Euler\'s Method( 教學影片 ,  說明1 ,  說明2  in English): \n https://tutorial.math.lamar.edu/classes/de/eulersmethod.aspx \n \n 針對常微分方程式: \\(\\frac{dy}{dx}=f(x,y)\\) \n 假如 \\(x_{n+1}\\) 與 \\(x_{n}\\) 之間的距離非常接近, 則 \\(\\frac{y_{n+1}-y_{n}}{x_{n+1}-x_{n}}\\approx f(x_{n},y_{n})\\) \n 若取 \\(h=x_{n+1}-x_{n}\\) 作為 x 座標在每一次計算過程的增量值. \n 則可以在已知此一常微分方程式的起始值之後, 逐一透過 h 增量值計算此常微分方程式在各 x 座標點上的對應值: \n \\(y_{n+1}-y_{n}\\approx f(x_{n},y_{n})h\\) \n \n \n \n \n 此外, 只要在網頁中導入: \n <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>\n<script src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script> \n 就可以利用 MathJax v3 的 \\(\\LaTeX\\) 語法, 輸入所需要呈現的數學方程式. \n Runge-Kutta Method : \n Developments in Runge–Kutta Method to Solve Ordinary Differential Equations \n https://www.me.psu.edu/cimbala/Learning/General/Runge_Kutta_Technique.pdf \n NUMERICAL SOLUTION OF ORDINARY DIFFERENTIAL EQUATIONS  (from one of the authors) \n \n 將 euler_gnuplot_msd_ex1.c 存入 downloads 目錄, 然後在 replit.nix 中進行 C 與 gnuplot 套件的設置: \n replit.nix 設定內容: \n { pkgs }: {\n    deps = [\n  pkgs.qtile\n  pkgs.sudo\n  pkgs.clang_12\n        pkgs.ccls\n        pkgs.gdb\n        pkgs.gnumake\n        pkgs.gnuplot\n    ];\n} \n euler_gnuplot_msd_ex1.c 程式內容: \n // 包含標準輸出入程式庫的標頭文件\n#include <stdio.h>\n\n// 主函式\nint main() {\n    // Open a file to write displacement and velocity data\n    FILE *outputFile = fopen("motion_data.txt", "w");\n    if (!outputFile) {\n        fprintf(stderr, "Failed to create data file.\\n");\n        return 1;\n    }\n\n    // Simulate motion for 10 seconds and calculate displacement and velocity, while writing data to the file\n    double x = 0.2;  // Initial displacement\n    double v = 0.0;  // Initial velocity\n    double dt = 0.01; // Time step\n    double t = 0.0;  // Time\n\n    while (t <= 10.0) {\n        double acceleration = (-10.0 * x - 0.5 * v) / 1.0; // Modified system parameters here\n        v += acceleration * dt;\n        x += v * dt;\n\n        fprintf(outputFile, "%lf %lf %lf\\n", t, x, v);\n\n        t += dt;\n    }\n\n    // Close the data file\n    fclose(outputFile);\n\n    // Start a Gnuplot process using popen\n    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");\n    if (!gnuplotPipe) {\n        fprintf(stderr, "Failed to start Gnuplot.\\n");\n        return 1;\n    }\n\n    // Use Gnuplot plotting commands, specify font and output as PNG\n    fprintf(gnuplotPipe, "set terminal pngcairo enhanced font \'default,10\' size 800,400\\n");\n    fprintf(gnuplotPipe, "set output \'./../images/motion_plot.png\'\\n");\n    fprintf(gnuplotPipe, "set title \'Displacement and Velocity vs. Time\'\\n");\n    fprintf(gnuplotPipe, "set xlabel \'Time (s)\'\\n");\n    fprintf(gnuplotPipe, "set ylabel \'Displacement (m)\'\\n");\n    fprintf(gnuplotPipe, "plot \'motion_data.txt\' using 1:2 with lines lw 2 title \'Displacement\', \\\n                             \'motion_data.txt\' using 1:3 with lines lw 2 title \'Velocity\'\\n");\n\n    // Close the Gnuplot process\n    fprintf(gnuplotPipe, "exit\\n");\n    pclose(gnuplotPipe);\n\n    return 0;\n}\n \n 在 Shell 工具頁面: \n cd downloads \n cc euler_gnuplot_msd_ex1.c \n 經過編譯與連結後取得 a.out \n 然後利用 ./a.out 執行, 就可以在 images 目錄下得到 mass-spring-damper 微分運動方程式採 Euler\'s Method 模擬數值分析結果, motion_plot.png: \n \n 假如程式中需要使用數學函數運算則可 #include <math.h>, 並在編譯時納入 -lm, 亦即連結數程式庫. \n cc ex_with_math.c -lm -o ex_with_math \n 然後以 ./ex_with_math 執行 \n', 'tags': '', 'url': 'MSD.html'}, {'title': 'clang', 'text': '利用 cc 執行編譯 C程式, 請參考\xa0 https://replit.com/@wcms/cjavascriptpython?v=1#README.txt \xa0 \n 以下為與 clang 有關的進階自學內容: \n clang 與其他開源編譯器的比較 \n 安裝 clang (801MB) 與 valgrind (91.8MB): \n Ubuntu: \n sudo apt update && sudo apt upgrade \n sudo apt install clang \n sudo apt install valgrind \n Windows: \n 安裝  WSL  之後, 再使用 Ubuntu 方法安裝 clang 與 valgrind \n References: \n https://cs.indstate.edu/wiki/index.php/C_Programming_-_Getting_Started \n https://en.wikipedia.org/wiki/Clang \n https://valgrind.org/ \n', 'tags': '', 'url': 'clang.html'}, {'title': '編譯範例', 'text': '以下為 C++ 原始碼進階自學編譯範例: \n 先建立 msys64 可攜系統: \n 下載  https://www.msys2.org/  安裝後, 將 C:\\msys64_20230718, 複製到 Y:\\msys64_20230718 \n 套件名稱帶有 mingw-w64-x86_64 表示用於 MinGW 64 bit 操作系統: \n 更新系統核心組件: \n pacman -Syu \n 安裝基本 C/C++ 編譯與開發工具: \n pacman -S mingw-w64-x86_64-toolchain \n 安裝 CMake \n pacman -S mingw-w64-x86_64-cmake \n 下載  msys64_20230718_cmake.7z  (需要下載密碼) \n \n 編譯 Solvespace: \n Solvespace \xa0是一套小型的開放源參數式電腦輔助設計與繪圖軟體. \n git clone --recurse-submodules https://github.com/solvespace/solvespace.git cd solvespace git checkout v3.1 mkdir build cd build cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release mingw32-make \n 下載  solvespace_src_compiled.7z  (需要下載密碼) \n 在 Windows 若無法以 https 取下 github.com 中的倉儲資料, 可以在 .gitconfig 中加上: \n [http "https://github.com"]\nsslVerify = false \n 表示不使用 Windows 的 SChannel API 進行認證, 轉而使用 OpenSSL handshake 認證. \n \n 利用 MSYS2 編譯 SciTE 編輯器: \n 從  https://www.scintilla.org/SciTE.html  下載 Scite 原始碼. \n cd scintilla\\win32 \n mingw32-make \n get\xa0Scintilla.dll and\xa0SciLexer.dll under\xa0 scintilla\\bin \n cd scite\\win32 \n mingw32-make \n get\xa0SciTE.exe under scite\\bin \n need extra\xa0libgcc_s_seh-1.dll,\xa0libstdc++-6.dll and\xa0libwinpthread-1.dll along with  Scintilla.dll and\xa0 SciLexer.dll\xa0 to execute SciTE.exe \n 下載  SciTE537_src_compiled.7z  (需要下載密碼) \n SciTE properties files:  SciTE_properties_files.7z \n \n 利用 MSYS2 編譯 Tiny C Compiler 並配置 gd 程式庫環境: \n 從\xa0 https://github.com/Tiny-C-Compiler/mirror-repository \xa0下載 Tiny C Compiler 0.9.27 原始碼後, 利用 win32 目錄中的 build-tcc.bat 完成編譯. \n 在 MSYS2 環境中以\xa0pacman -S mingw-w64-x86_64-libgd 安裝 gd 程式庫後, 可以取得 2.3.3 版的 libgd.dll \n 利用 tcc -impdef\xa0-v\xa0libgd.dll -o libgd.def 取得 libgd.def 放入 Tiny C Compiler 系統中 win32 目錄中的 lib 後, 配合 gd 系統的 header 檔案後, 就可以利用 tcc gd_roc_flag.c -lgd 編譯連結後取得 gd_roc_flag.exe 可執行檔案. 之後則必須配合 libgd.dll 與 MSYS2 相關 dll 檔案執行 gd_roc_flag.exe \n 下載  MSYS2 編譯的 Tiny C Compiler 0.9.27 與 gd 程式庫 2.3.3 可攜套件  (需要下載密碼) \n 假如希望利用 Visual Studio C++ 編譯 gd 2.3.3 版程式庫, 請參考 這裡的說明 . \n Reference: \n https://github.com/phoenixthrush/Tiny-C-Compiler \xa0 \n https://packages.msys2.org/package/mingw-w64-x86_64-libgd \xa0 \n', 'tags': '', 'url': '編譯範例.html'}, {'title': '課程評分', 'text': '課程評分: \n 線上測驗、期中網站與簡報、期末網站與簡報. \n 線上測驗: \n 建立帳號後 ( 請將密碼寫入手機的備忘錄 ), 每週不定時進行. \n 期中網站評分與簡報: \n 期中考前兩週開始進行. \n 期末網站評分與簡報: \n 期末考前兩週開始進行. \n 期中成績計算: \n 期中考與之前各週線上測驗成績平均 \n 學期成績計算: \n (期中成績與之後各週線上測驗成績平均)*60%+(期中網站與簡報成績)*20%+(期末網站與簡報成績)*20% \n', 'tags': '', 'url': '課程評分.html'}, {'title': '課程主題', 'text': '\n 認識數位環境與資源 \n 工程師的計算機程式能力 \n 開發程式工具 (解決特定問題) \n 課程總結 \n \n', 'tags': '', 'url': '課程主題.html'}, {'title': '數位環境與資源', 'text': '1. 認識數位環境與資源 \n 企業所提供的數位資源: \n ChatGPT  (Google Bard and Perplexity AI) \n AutoDesk  (Dassault Solidworks and CATIA) \n Siemens Solid Edge  (NX) \n Engineering Student Softwares \n PTC Creo \n Onshape for Education \n Ansys  (Comsol and SIMULIA Abaqus) \n Office 365 for Education \n Github \n Github Classroom \n Replit \n RoboDK \n CoppeliaSim \n Webots \n 學校所提供的數位資源 \n 軟體  ( 使用校園網路或 VPN 下載) \n Windows 10 64位元 22H2.4 \n Windows 11 64位元 22H2.6 \n windows_kms.bat \n Office 2019 64位元 \n office_2019_kms.bat \n Office 2016 64位元 \n office_2016_kms.bat \n Visual Studio Pro 2015 英文版 \n MATLAB for Windows 2023a 64位元 \n Introduction to MATLAB for Engineers and Scientists \n Introduction to Partial Differential Equations with MATLAB \n MATLAB for Linux 2022a 64位元 \n MATLAB 安裝說明 \n MATLAB Guideline \n 電子資源 \n 數位學習網:\xa0 https://www.nfu.edu.tw/zh/elearning \xa0 \n eBooks and Journals:  https://link.springer.com \xa0 \n Introducing eBooks \n 綜合工程第一館網路配置 \n 機械設計工程系 \n IPv4 網段 (140.130.17.0/24) \n Gateway: 140.130.17.254 \n DNS: 140.130.17.3 \n IPv6 網段 (2001:288:6004:17::/32) \n Gateway: 2001:288:6004:17::254 \n DNS: 2001:288:6004:17::3 \n 有線網路 \n 無線網路 \n 綜一館電腦資源 \n 可借用電腦教室 \n 磁區設定與所安裝軟體 \n 工作站中的伺服器 \n https://s1511.cycu.org \xa0 \n Introducing UNIX and Linux \n 電腦輔助設計室 \n 兩種不同規格的電腦 \n 協同產品設計室 \n 虛實手足球系統 \n Arduino \n CoppeliaSim \n RoboDK \n 手足球檯 \n Rasperry Pi \n Webcam \n', 'tags': '', 'url': '數位環境與資源.html'}, {'title': '上課系統', 'text': 'ChatGPT  (從  https://chat.openai.com/auth/login  以 Gmail 帳號登入, 也可在手機安裝 ChatGPT App) \n Office 365 for Education \n Github \n Github Classroom \n Replit \n Welcome to Replit \n 進階自學系統 \n CoppeliaSim \n 2023.03 最新版本為 4.5.1 \n 4.4.0 則發布於 2022.09 \n ZeroMQ Remote API for CoppeliaSim \n WebSocket plugin for CoppeliaSim \n three.js Frontend \n RoboDK \n 2023.07 最新的版本為 \xa0 Download 5.6.2 \n Download 5.2.2 \xa0 則發布於 2021.03.22 \n RoboDK 源自 \xa0 https://www.parallemic.org/RoKiSim.html \n 在計算機程式課程中, 我們可以利用 RoboDK 中的 Robot 控制來練習 Python 各種語法的應用, 其中也將牽涉一些線性代數 (Linear Algebra, \xa0 1 , \xa0 2 ) 與幾何 (Geometry, \xa0 1 , \xa0 2 , \xa0 3 ) 的應用. \n', 'tags': '', 'url': '上課系統.html'}, {'title': '程式能力', 'text': '2. 工程師的計算機程式能力 \n C, Javascript, Brython, Python \n Windows 64 位元操作系統下的工具: \n basic_portable_python.7z  (下載 15MB, 解開後 55MB) \n 下載  Portable_2023_fall_1.3g_5g.7z  (需要下載密碼) \n Github Classroom 作業倉儲: \n 從 github classroom 取得個人課程倉儲 \n 將以\xa0 https://github.com/mdecycu/cmsite \xa0作為個人作業起始 template \n 以下為簡單的線上 Python 程式執行區: \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n \n', 'tags': '', 'url': '程式能力.html'}, {'title': '程式語言', 'text': '機械設計工程師在甚麼情況下需要使用 C 解決問題? \n 機械設計工程師在甚麼情況下需要使用 Javascript 解決問題? \n Brython 程式語言一般被用在那些情況下? \n 機械設計工程師在甚麼情況下需要使用 Python 解決問題? \n', 'tags': '', 'url': '程式語言.html'}, {'title': 'ANSI C', 'text': 'jsliu_c_programming.pdf  (需要下載密碼) \n Introduction to C \xa0(經由校園網路或 VPN 下載) \n 1999 C Programming - The Essentials for Engineers and Scientists  (經由校園網路或 VPN 下載) \n 2004 Beginning C  (經由校園網路或 VPN 下載) \n 2013 Advanced Topics in C  (經由校園網路或 VPN 下載) \n 2013 Pointers in C  (經由校園網路或 VPN 下載) \n 2015 Learn to Program with C  (經由校園網路或 VPN 下載) \n 2015 C Quick Syntax Reference  (經由校園網路或 VPN 下載) \n 2015 Beginning C for Arduino, Second Edition  (經由校園網路或 VPN 下載) \n 2016 Practical C  (經由校園網路或 VPN 下載) \n 2017 C Recipes  (經由校園網路或 VPN 下載) \n 2019 Numerical C \xa0(經由校園網路或 VPN 下載) \n 2019 Modern C Quick Syntax Reference  (經由校園網路或 VPN 下載)\xa0 \n 2020 Computer Programming in C for Beginners  (經由校園網路或 VPN 下載) \n 2020 Practical Numerical C Programming  (經由校園網路或 VPN 下載) \n 2020 Beginning C  (經由校園網路或 VPN 下載) \n 2020 Robot Adventures in Python and C  (經由校園網路或 VPN 下載) \n 2021 Pointers in C Programming  (經由校園網路或 VPN 下載) \n 2022 C and Python Applications  (經由校園網路或 VPN 下載) \n 程式庫: \n gnuplot:  https://github.com/gnuplot/gnuplot \n gd:  https://github.com/libgd/libgd \n raylib:  https://github.com/raysan5/raylib \n 本頁課程內容的 實際應用 . \n \n ANSI C 程式語言所謂具有可攜性, 是甚麼意思? \n ANSI C 被定位為低階程式語言, 是甚麼意思? \n 可以用 ANSIＣ加上Gnuplot 繪圖 ( Gnuplot Documentation ), 解一個質量與兩個並聯的彈簧與阻尼器連接到牆上, 且起始條件為執行被往後拉 0.2 m 後放開的常微分方程式, 並劃出該質量被釋放之後 10 秒之內的位移以及速度圖嗎? \n 請詳細解釋所謂的 Euler\'s Method, 並且能不能將 Gnuplot 繪圖指令直接與 C 程式合併, 執行程式後直接產生位移與速度 png 圖? \n 能不能將 gnuplot 繪圖程式碼與 Euler\'s Method 解微分方程式的程式碼結合在一起, 執行時直接就能繪出質量的位移與速度圖, 而且請在繪圖時直接使用位於 Y:\\ 的 wqy-microhei.ttc 中文字形, 否則無法在圖面上顯示出正確的中文. \n 請將質量的位移以及速度繪製在同一個 png 圖檔上 \n \n 利用 Euler\'s Method 解 mass-spring-damper 系統的運動方程式, 並採 ANSI C 與 Gnuplot 執行運算及繪圖. \n euler_mass_spring_damper_gnuplot.7z \n #include <stdio.h>\n\nint main() {\n    // 開啟文件以寫入位移和速度數據\n    FILE *outputFile = fopen("motion_data.txt", "w");\n    if (!outputFile) {\n        fprintf(stderr, "無法創建數據文件。\\n");\n        return 1;\n    }\n\n    // 模擬運動 10 秒並計算位移和速度，同時將數據寫入文件\n    double x = 0.2;  // 初始位移\n    double v = 0.0;  // 初始速度\n    double dt = 0.01; // 時間步長\n    double t = 0.0;  // 時間\n\n    while (t <= 10.0) {\n        double acceleration = (-10.0 * x - 0.5 * v) / 1.0; // 這裡修改了系統的參數\n        v += acceleration * dt;\n        x += v * dt;\n\n        fprintf(outputFile, "%lf %lf %lf\\n", t, x, v);\n\n        t += dt;\n    }\n\n    // 關閉數據文件\n    fclose(outputFile);\n\n    // 使用popen啟動Gnuplot進程\n    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");\n    if (!gnuplotPipe) {\n        fprintf(stderr, "無法啟動Gnuplot。\\n");\n        return 1;\n    }\n\n    // 使用Gnuplot繪圖指令，指定字型文件和輸出PNG\n    fprintf(gnuplotPipe, "set terminal png font \'Y:/wqy-microhei.ttc,10\' size 800,400\\n");\n    fprintf(gnuplotPipe, "set output \'motion_plot.png\'\\n");\n    fprintf(gnuplotPipe, "set title \'位移和速度 vs. 時間\'\\n");\n    fprintf(gnuplotPipe, "set xlabel \'時間 (s)\'\\n");\n    fprintf(gnuplotPipe, "set ylabel \'位移 (m)\'\\n");\n    fprintf(gnuplotPipe, "plot \'motion_data.txt\' using 1:2 with lines lw 2 title \'位移\', \\\n                             \'motion_data.txt\' using 1:3 with lines lw 2 title \'速度\'\\n");\n\n    // 關閉Gnuplot進程\n    fprintf(gnuplotPipe, "exit\\n");\n    pclose(gnuplotPipe);\n\n    return 0;\n}\n \n 運算結果: \n \n 假如拿掉 Damping: \n \n 假如將 C 改寫為 Javascript, 並且使用 plotly.js 取代 Gnuplot, 可使用下列 html + Javascript 執行運算: \n <!DOCTYPE html>\n<html>\n<head>\n    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>\n</head>\n<body>\n    <div id="plotDamping"></div>\n    <div id="plotNoDamping"></div>\n\n    <script>\n        // Function to simulate motion using Euler\'s method\n        function simulateMotion(MASS, SPRING_K, DAMPING_C, containerId) {\n            // Define simulation parameters\n            const totalTime = 10.0;\n            const dt = 0.01;\n            \n            // Initialize data arrays\n            const timeData = [];\n            const displacementData = [];\n            const velocityData = [];\n\n            // Initial conditions\n            let t = 0.0;\n            let x = 0.2;\n            let v = 0.0;\n\n            while (t <= totalTime) {\n                timeData.push(t);\n                displacementData.push(x);\n                velocityData.push(v);\n\n                // Calculate acceleration based on parameters\n                const acceleration = (-SPRING_K * x - DAMPING_C * v) / MASS;\n                v += acceleration * dt;\n                x += v * dt;\n\n                t += dt;\n            }\n\n            // Plot the data\n            const displacementTrace = {\n                x: timeData,\n                y: displacementData,\n                mode: \'lines\',\n                name: \'Displacement\'\n            };\n\n            const velocityTrace = {\n                x: timeData,\n                y: velocityData,\n                mode: \'lines\',\n                name: \'Velocity\'\n            };\n\n            const layout = {\n                title: `Displacement and Velocity vs. Time (${containerId === \'plotDamping\' ? \'With Damping\' : \'No Damping\'})`,\n                xaxis: { title: \'Time (s)\' },\n                yaxis: { title: \'Displacement (m) / Velocity\' }\n            };\n\n            const plotData = [displacementTrace, velocityTrace];\n\n            Plotly.newPlot(containerId, plotData, layout);\n        }\n\n        // Simulate motion with damping\n        simulateMotion(1.0, 10.0, 0.5, \'plotDamping\');\n\n        // Simulate motion without damping\n        simulateMotion(1.0, 10.0, 0.0, \'plotNoDamping\');\n    </script>\n</body>\n</html> \n 模擬運算結果為: \n \n \n \n \n \n \n \n \n \n 假如採用 C 以 Runge-Kutta 解 mass-spring-damper 系統運動模擬: \n /* Runge Kutta for a set of first order differential equations */\n// http://mde.tw/cad2020/content/W7.html\n  \n#include <stdio.h>\n#include <math.h>\n  \n#define N 2 /* number of first order equations */\n#define dist 0.01 /* stepsize in t*/\n#define MAX 10.0 /* max for t */\n  \nFILE *output; /* internal filename */\nFILE *output1; /* internal filename */\n// 利用 pipe 呼叫 gnuplot 繪圖\nFILE *pipe;\n  \nvoid runge4(double x, double y[], double step); /* Runge-Kutta function */\ndouble f(double x, double y[], int i); /* function for derivatives */\n  \nvoid main(){\n  \n  double t, y[N];\n  int j;\n  \n  output=fopen("osc.dat", "w"); /* external filename */\n  output1=fopen("osc1.dat", "w"); /* external filename */\n  \n  y[0]=0.2; /* initial position */\n  y[1]=0.0; /* initial velocity */\n  \n  //fprintf(output, "0\\t%f\\n", y[0]);\n  \n  for (j=1; j*dist<=MAX ;j++) /* time loop */{\n  \n    t=j*dist;\n    runge4(t, y, dist);\n    fprintf(output, "%f\\t%f\\n", t, y[0]);\n    fprintf(output1, "%f\\t%f\\n", t, y[1]);\n  }\n  \n  fclose(output);\n  fclose(output1);\n  \n  pipe = popen("gnuplot -persist","w");\n  //fprintf(pipe,"set term png enhanced font \\"v:/fireflysung.ttf\\" 18 \\n");\n  fprintf(pipe,"set term png enhanced font \\"y:/wqy-microhei.ttc\\" 18 \\n");\n  //fprintf(pipe,"set yrange [68:70]\\n");\n  fprintf(pipe,"set output \\"rk_mass_spring_damper.png\\"\\n");\n  fprintf(pipe, "plot \\"osc.dat\\" title \\"位移\\" with lines, \\"osc1.dat\\" title \\"速度\\" with lines\\n");\n  fprintf(pipe,"quit\\n");\n \n  fprintf(pipe,"quit\\n");\n  pclose(pipe);\n}\n  \nvoid runge4(double x, double y[], double step){\n  \n  double h=step/2.0, /* the midpoint */\n  t1[N], t2[N], t3[N], /* temporary storage arrays */\n  k1[N], k2[N], k3[N],k4[N]; /* for Runge-Kutta */\n  int i;\n  \n  for (i=0;i<N;i++){\n  \n    t1[i]=y[i]+0.5*(k1[i]=step*f(x,y,i));\n  }\n  \n  for (i=0;i<N;i++){\n  \n    t2[i]=y[i]+0.5*(k2[i]=step*f(x+h, t1, i));\n  }\n  \n  for (i=0;i<N;i++){\n  \n    t3[i]=y[i]+ (k3[i]=step*f(x+h, t2, i));\n  }\n  \n  for (i=0;i<N;i++){\n  \n    k4[i]= step*f(x+step, t3, i);\n  }\n  \n  for (i=0;i<N;i++){\n  \n    y[i]+=(k1[i]+2*k2[i]+2*k3[i]+k4[i])/6.0;\n  }\n}\n  \ndouble f(double x, double y[], int i){\n  \n  if (i==0)\n    x=y[1]; /* derivative of first equation */\n  if (i==1)\n    x=-10*y[0]-0.5*y[1];\n  return x;\n} \n 模擬結果為: \n \n 假如拿掉 Damper, 則結果為: \n \n 假如將 Runge-Kutta C 改寫為 Javascript, 並在網頁中直接以 plotly.js 畫圖: \n  引入 Plotly.js  \n \n \n \n  用於顯示運動繪圖的 div  \n \n \n \n \n 上列 Javascript 模擬運算的超文件為: \n <!-- 引入 Plotly.js -->\n<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>\n<!-- 用於顯示運動繪圖的 div -->\n<div id="rkmotionPlot"></div>\n<script>\nconst N = 2; // number of first order equations\nconst dist = 0.01; // stepsize in t\nconst MAX = 10.0; // max for t\n\nlet outputDataDamping = []; // to store data for displacement with damping\nlet output1DataDamping = []; // to store data for velocity with damping\nlet outputDataNoDamping = []; // to store data for displacement without damping\nlet output1DataNoDamping = []; // to store data for velocity without damping\n\nfunction runge4(x, y, step, damping = false) {\n    let h = step / 2.0;\n    let t1 = [];\n    let t2 = [];\n    let t3 = [];\n    let k1 = [];\n    let k2 = [];\n    let k3 = [];\n    let k4 = [];\n\n    for (let i = 0; i < N; i++) {\n        t1[i] = y[i] + 0.5 * (k1[i] = step * f(x, y, i, damping));\n    }\n\n    for (let i = 0; i < N; i++) {\n        t2[i] = y[i] + 0.5 * (k2[i] = step * f(x + h, t1, i, damping));\n    }\n\n    for (let i = 0; i < N; i++) {\n        t3[i] = y[i] + (k3[i] = step * f(x + h, t2, i, damping));\n    }\n\n    for (let i = 0; i < N; i++) {\n        k4[i] = step * f(x + step, t3, i, damping);\n    }\n\n    for (let i = 0; i < N; i++) {\n        y[i] += (k1[i] + 2 * k2[i] + 2 * k3[i] + k4[i]) / 6.0;\n    }\n}\n\nfunction f(x, y, i, damping = false) {\n    if (i === 0) {\n        return y[1]; // derivative of first equation (velocity)\n    }\n    if (i === 1) {\n        if (damping) {\n            return -10 * y[0] - 0.5 * y[1]; // with damping\n        } else {\n            return -10 * y[0]; // without damping\n        }\n    }\n    return 0;\n}\n\nfunction simulateMotion() {\n    let t = 0.0;\n    let yDamping = [0.2, 0.0]; // initial position and velocity with damping\n    let yNoDamping = [0.2, 0.0]; // initial position and velocity without damping\n\n    for (let j = 1; j * dist <= MAX; j++) {\n        t = j * dist;\n        runge4(t, yDamping, dist, true); // simulate with damping\n        runge4(t, yNoDamping, dist, false); // simulate without damping\n        outputDataDamping.push([t, yDamping[0]]);\n        output1DataDamping.push([t, yDamping[1]]);\n        outputDataNoDamping.push([t, yNoDamping[0]]);\n        output1DataNoDamping.push([t, yNoDamping[1]]);\n    }\n\n    // Plot the data using Plotly.js\n    plotMotion();\n}\n\nfunction plotMotion() {\n    // Create traces for displacement and velocity with damping\n    const displacementTraceDamping = {\n        x: outputDataDamping.map((dataPoint) => dataPoint[0]),\n        y: outputDataDamping.map((dataPoint) => dataPoint[1]),\n        mode: \'lines\',\n        name: \'Displacement (Damping)\',\n    };\n\n    const velocityTraceDamping = {\n        x: output1DataDamping.map((dataPoint) => dataPoint[0]),\n        y: output1DataDamping.map((dataPoint) => dataPoint[1]),\n        mode: \'lines\',\n        name: \'Velocity (Damping)\',\n    };\n\n    // Create traces for displacement and velocity without damping\n    const displacementTraceNoDamping = {\n        x: outputDataNoDamping.map((dataPoint) => dataPoint[0]),\n        y: outputDataNoDamping.map((dataPoint) => dataPoint[1]),\n        mode: \'lines\',\n        name: \'Displacement (No Damping)\',\n    };\n\n    const velocityTraceNoDamping = {\n        x: output1DataNoDamping.map((dataPoint) => dataPoint[0]),\n        y: output1DataNoDamping.map((dataPoint) => dataPoint[1]),\n        mode: \'lines\',\n        name: \'Velocity (No Damping)\',\n    };\n\n    const data = [\n        displacementTraceDamping,\n        velocityTraceDamping,\n        displacementTraceNoDamping,\n        velocityTraceNoDamping,\n    ];\n\n    // Layout configuration\n    const layout = {\n        title: \'Displacement and Velocity vs. Time\',\n        xaxis: {\n            title: \'Time (s)\',\n        },\n        yaxis: {\n            title: \'Displacement / Velocity\',\n        },\n    };\n\n    // Plot the graph\n    Plotly.newPlot(\'rkmotionPlot\', data, layout);\n}\n\n// Call the simulation function when the page loads\nwindow.onload = simulateMotion;\n</script> \n \n 最後, 將 Javascript 改為可以讓使用者選擇模擬參數以及起始條件: \n \n 質量 (m):   \n 彈簧常數 (k):   \n 阻尼係數 (c):   \n 初始位移 (x0):   \n 初始速度 (v0):   \n 模擬時間 (endTime):   \n 模擬運動 (有阻尼)   模擬運動 (無阻尼) \n  請注意!! 每一個 plotly.js 繪圖必須有各自的 id 名稱  \n \n \n \n \n 上列可輸入模擬參數與起始條件的 html 程式碼: \n <div><label for="mass">質量 (m):</label> <input id="mass" type="number" value="1.0"></div>\n<div><label for="springConstant">彈簧常數 (k):</label> <input id="springConstant" type="number" value="10.0"></div>\n<div><label for="dampingCoefficient">阻尼係數 (c):</label> <input id="dampingCoefficient" type="number" value="0.5"></div>\n<div><label for="initialDisplacement">初始位移 (x0):</label> <input id="initialDisplacement" type="number" value="0.2"></div>\n<div><label for="initialVelocity">初始速度 (v0):</label> <input id="initialVelocity" type="number" value="0.0"></div>\n    \n<div><label for="endTime">模擬時間 (endTime):</label> <input id="endTime" type="number" value="10.0"></div>\n    \n<p><button id="withDamping">模擬運動 (有阻尼)</button> <button id="withoutDamping">模擬運動 (無阻尼)</button></p>\n<!-- 請注意!! 每一個 plotly.js 繪圖必須有各自的 id 名稱 -->\n<div id="rkmotionPlot2"></div>\n<script>// <![CDATA[\n// 函數包裝，避免變數衝突\n    (function () {\n        const N = 2; // number of first order equations\n        const dist = 0.01; // stepsize in t\n        //const MAX = 10.0; // max for t\n        const endTime = parseFloat(document.getElementById(\'endTime\').value);\n\n        // for debuging\n        const mass = parseFloat(document.getElementById(\'mass\').value);\n        const springConstant = parseFloat(document.getElementById(\'springConstant\').value);\n        const dampingCoefficient = parseFloat(document.getElementById(\'dampingCoefficient\').value);\n        const initialDisplacement = parseFloat(document.getElementById(\'initialDisplacement\').value);\n        const initialVelocity = parseFloat(document.getElementById(\'initialVelocity\').value);\n        /*\n            console.log(\'Mass:\', mass);\n            console.log(\'Spring Constant:\', springConstant);\n            console.log(\'Damping Coefficient:\', dampingCoefficient);\n            console.log(\'Initial Displacement:\', initialDisplacement);\n            console.log(\'Initial Velocity:\', initialVelocity);\n         */\n\n\n        let outputDataWithDamping = []; // to store data for displacement and velocity with damping\n        let outputDataWithoutDamping = []; // to store data for displacement and velocity without damping\n\n        function runge4(x, y, step, damping = false) {\n            let h = step / 2.0;\n            let t1 = [];\n            let t2 = [];\n            let t3 = [];\n            let k1 = [];\n            let k2 = [];\n            let k3 = [];\n            let k4 = [];\n\n            for (let i = 0; i < N; i++) {\n                t1[i] = y[i] + 0.5 * (k1[i] = step * f(x, y, i, damping));\n            }\n\n            for (let i = 0; i < N; i++) {\n                t2[i] = y[i] + 0.5 * (k2[i] = step * f(x + h, t1, i, damping));\n            }\n\n            for (let i = 0; i < N; i++) {\n                t3[i] = y[i] + (k3[i] = step * f(x + h, t2, i, damping));\n            }\n\n            for (let i = 0; i < N; i++) {\n                k4[i] = step * f(x + step, t3, i, damping);\n            }\n\n            for (let i = 0; i < N; i++) {\n                y[i] += (k1[i] + 2 * k2[i] + 2 * k3[i] + k4[i]) / 6.0;\n            }\n        }\n\n        function f(x, y, i, damping = false) {\n            if (i === 0) {\n                return y[1]; // derivative of first equation (velocity)\n            }\n            if (i === 1) {\n                if (damping) {\n                    return (-springConstant * y[0] - dampingCoefficient * y[1])/mass; // with damping\n                } else {\n                    return (-springConstant * y[0])/mass; // without damping\n                }\n            }\n            return 0;\n        }\n\n        function simulateMotionWithDamping() {\n            let t = 0.0;\n            let y = [\n                parseFloat(document.getElementById(\'initialDisplacement\').value),\n                parseFloat(document.getElementById(\'initialVelocity\').value)\n            ];\n\n            outputDataWithDamping = []; // Clear previous data\n            simulateMotion(t, y, true); // Simulate with damping\n        // for debuging, yes we got the values\n        //console.log(\'outputDataWithDamping:\', outputDataWithDamping); \n            plotMotion(true); // Plot with damping\n        }\n\n        function simulateMotionWithoutDamping() {\n            let t = 0.0;\n            let y = [\n                parseFloat(document.getElementById(\'initialDisplacement\').value),\n                parseFloat(document.getElementById(\'initialVelocity\').value)\n            ];\n\n            outputDataWithoutDamping = []; // Clear previous data\n            simulateMotion(t, y, false); // Simulate without damping\n        // for debuging, we got the values\n        //console.log(\'outputDataWithoutDamping:\', outputDataWithoutDamping); \n            plotMotion(false); // Plot without damping\n        }\n\n        // for debuging\n        function simulateMotion(t, y, damping = false) {\n            for (let j = 1; j * dist <= endTime; j++) {\n                t = j * dist;\n                runge4(t, y, dist, damping);\n                if (damping) {\n                    outputDataWithDamping.push([t, y[0], y[1]]);\n                } else {\n                    outputDataWithoutDamping.push([t, y[0], y[1]]);\n                }\n\n                // Log the data for debugging\n                //console.log(\'t:\', t);\n                //console.log(\'y:\', y);\n            }\n                // we do get the array values\n                //console.log(\'outputDataWithDamping:\', outputDataWithDamping);\n                //console.log(\'outputDataWithoutDamping:\', outputDataWithoutDamping); \n        }\n\n\n        function plotMotion(damping = false) {\n            let data = [];\n            if (damping) {\n                // Create traces for displacement and velocity with damping\n                data.push({\n                    x: outputDataWithDamping.map((dataPoint) => dataPoint[0]),\n                    y: outputDataWithDamping.map((dataPoint) => dataPoint[1]),\n                    mode: \'lines\',\n                    name: \'Displacement (Damping)\',\n                });\n                data.push({\n                    x: outputDataWithDamping.map((dataPoint) => dataPoint[0]),\n                    y: outputDataWithDamping.map((dataPoint) => dataPoint[2]),\n                    mode: \'lines\',\n                    name: \'Velocity (Damping)\',\n                });\n            } else {\n                // Create traces for displacement and velocity without damping\n                data.push({\n                    x: outputDataWithoutDamping.map((dataPoint) => dataPoint[0]),\n                    y: outputDataWithoutDamping.map((dataPoint) => dataPoint[1]),\n                    mode: \'lines\',\n                    name: \'Displacement (No Damping)\',\n                });\n                data.push({\n                    x: outputDataWithoutDamping.map((dataPoint) => dataPoint[0]),\n                    y: outputDataWithoutDamping.map((dataPoint) => dataPoint[2]),\n                    mode: \'lines\',\n                    name: \'Velocity (No Damping)\',\n                });\n            }\n\n            // Layout configuration\n            const layout = {\n                title: \'Displacement and Velocity vs. Time\',\n                xaxis: {\n                    title: \'Time (s)\',\n                },\n                yaxis: {\n                    title: \'Displacement / Velocity\',\n                },\n            };\n\n            // Plot the graph\n            Plotly.newPlot(\'rkmotionPlot2\', data, layout);\n        }\n\n        // for debuging\n        //console.log(outputDataWithDamping);\n        //console.log(outputDataWithoutDamping);\n\n        // Call the simulation function when the page loads\n        //simulateMotionWithDamping(); // Initial simulation with damping\n        // Attach an event listener to the button\n        document.getElementById("withDamping").addEventListener("click", function () {\n            //console.log("Button with damping clicked.");\n            simulateMotionWithDamping();\n        });\n\n        document.getElementById("withoutDamping").addEventListener("click", function () {\n            //console.log("Button without damping clicked.");\n            simulateMotionWithoutDamping();\n        });\n\n    })();\n// ]]></script> \n \n Question: 如何讓模擬變數表單值變更後, 無需重新 refresh 頁面即可繪出運算結果? \n Exercises: \n 請將上述各階段的數值分析結果與 理論分析解 ( Wikipedia )的結果, 以圖示進行比較, 並以表列出各點的運算誤差. \n', 'tags': '', 'url': 'ANSI C.html'}, {'title': 'on_linux', 'text': '\n', 'tags': '', 'url': 'on_linux.html'}, {'title': 'on_windows', 'text': '何謂編譯? \n 利用 Tiny C Compiler 編譯 \n 利用 MSYS2 中的 GNU C Compiler 編譯 \n 利用 Visual Studio C Compiler 編譯 \n', 'tags': '', 'url': 'on_windows.html'}, {'title': 'python', 'text': '單機程式轉為全球資訊網服務： \n https://mde.tw/content/PDF.html \xa0 \n https://mde.tw/content/CAD.html \xa0 \n https://mde.tw/content/cp2022.html \xa0 \n 使用舊版 Python 建立新版的可攜程式系統: \n Python 3.12.0 沒有 tools.msi \n get-pip.py \n generate_portable_python.py \n import urllib.request\nimport os\n\ndir_path = os.path.dirname(os.path.realpath(__file__))\n# basic files for Python installation\n# before 3.12.0\n#py_list = ["core", "dev", "exe", "lib", "tcltk", "tools"]\n# 3.12.0 no tools.msi\npy_list = ["core", "dev", "exe", "lib", "tcltk"]\n# Python version\nversion = "3.12.0"\n# Python msi download URL\nftp = "https://www.python.org/ftp/python/" + version + "/amd64/"\n# location for Portable Python\npath = "y:\\\\tmp\\\\Python312"\n# create directory\ntry:\n    os.mkdir(path)\nexcept:\n    # path exists\n    pass\n# get Python installation msi files and extract into target dir\nfor i in py_list:\n    filename = i + ".msi"\n    url = ftp + filename\n    # download basic python msi file\n    urllib.request.urlretrieve(url, filename)\n    os.system("msiexec.exe /a " + i + ".msi targetdir=" + path)\n    # delete msi file\n    os.remove(dir_path + "\\\\" + i + ".msi")\n \n \n \n \n \n', 'tags': '', 'url': 'python.html'}, {'title': '開發工具', 'text': '3. 開發程式工具 (解決特定問題) \n References: \n https://www.codecademy.com/resources/blog/20-code-challenges/ \n https://www.freecodecamp.org/news/python-projects-for-beginners/ \xa0 \n', 'tags': '', 'url': '開發工具.html'}, {'title': '程式專案', 'text': '機械設計工程師專業的計算機程式初學者被要求必須透過開發一組程式來解決問題, 比較適合朝那些方向進行此一專案? \n 初階 - 中階 \n https://www.freecodecamp.org/news/python-projects-for-beginners/ \xa0 \n https://github.com/nayuki/QR-Code-generator \n https://github.com/KaDw/genetic_maze  (利用繪圖呈現過程) \n https://github.com/m0rningdawning/tsp-genetic-algorithm \n https://github.com/54nd339/Algorithms \n https://github.com/Carath/GenLib \n https://github.com/rapiz1/DungeonRush \n 進階自學系統 \n CoppeliaSim \n 2023.03 最新版本為 4.5.1 \n 4.4.0 則發布於 2022.09 \n ZeroMQ Remote API for CoppeliaSim \n WebSocket plugin for CoppeliaSim \n three.js Frontend \n RoboDK \n 2023.07 最新的版本為 \xa0 Download 5.6.2 \n Download 5.2.2 \xa0 則發布於 2021.03.22 \n RoboDK 源自 \xa0 https://www.parallemic.org/RoKiSim.html \n 在計算機程式課程中, 我們可以利用 RoboDK 中的 Robot 控制來練習 Python 各種語法的應用, 其中也將牽涉一些線性代數 (Linear Algebra, \xa0 1 , \xa0 2 ) 與幾何 (Geometry, \xa0 1 , \xa0 2 , \xa0 3 ) 的應用. \n', 'tags': '', 'url': '程式專案.html'}, {'title': '課程座次', 'text': '2023.09.11 從  112 學年度第一學期教師授課表 中, 擷取各班修課名單如下: \n cp2023_a_studno.txt \n cp2023_b_studno.txt \n cad2023_a_studno.txt \n cad2023_b_studno.txt \n 若以 Python 讀取上列學員名單, 並依照順序排入電腦輔助設計室後, 可得到各班在開學週時的座位表: \n with open("cp2023_a_studno.txt", encoding="utf-8") as file:\n    data = file.read().splitlines()\n#print(data)\n# Define the number of elements to print in each row\nelements_per_row = 9\n# Iterate through the list and print elements\nfor i, item in enumerate(data, 1):\n    print(item, end=\'\\t\')  # Print the element followed by a tab character\n    if i % elements_per_row == 0:\n        # If we\'ve printed 9 elements, start a new line\n        print()\n    \n    \n \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n 設一甲 計算機程式座位表: \n \n \n \n 設一乙 計算機程式座位表: \n \n \n \n \n 設二甲 電腦輔助設計與實習座位表: \n \n \n \n \n 設二乙 電腦輔助設計與實習座位表: \n \n \n \n \n 上列 Brython 程式碼範例: \n <div id="brython_div1"></div>\n<p>\n<script type="text/python3">\nfrom browser import html, document\nbrython_div = document["brython_div1"]\n\ndata = open("https://mde.tw/cpnote/downloads/cp2023_a_studno.txt").read().splitlines()\n#print(data)\n# Define the number of elements to print in each row\nelements_per_row = 9\nrow = 1\n# Iterate through the list and print elements\nfor i, item in enumerate(data, 1):\n    if i % elements_per_row == 1:\n        brython_div <= "第" + str(row) + "列: "\n        row = row + 1\n    #print(item, end=\'\\t\')  # Print the element followed by a tab character\n    brython_div <= item + "  "\n    if i % elements_per_row == 0:\n        # If we\'ve printed 9 elements, start a new line\n        #print()\n        brython_div <= html.BR()\n</script> \n 由於  cp2023_a_studno.txt  為 w1 從  https://qry.nfu.edu.tw/studlist.php?selyr=1121&seqno=0813  取得修課學員後存檔後運用, 但是課程進行中, 學員加退選後該資料可能產生變動, 因此若後續要利用修課學員名單建立相關網際連結時, 必須設法直接從  https://qry.nfu.edu.tw/studlist.php?selyr=1121&seqno=0813  讀取資料後進行運用. \n', 'tags': '', 'url': '課程座次.html'}, {'title': '課程總結', 'text': '4. 課程總結 \n 錄製簡報影片 \n mp4 \n 編寫總結報告 \n pdf \n 將課程摘要納入個人領英 \n https://www.linkedin.com/ \n', 'tags': '', 'url': '課程總結.html'}, {'title': 'QandA', 'text': 'Q: 如何利用 Github 建立網站? \n Click me \n \n \n \n A: 使用  Github Pages . \n Q: cmsimde 已知 bugs. \n A: \n 特定頁面中無法讓 URL 嵌入 html 中的 anchor 標註. \n 特定情況下使用者無法在編輯器最末端輸入資料, 必須透過 Source code 轉而直接利用 html 才能編輯內容. \n 使用者給定無法分頁的頁面標題時, 例如: 將特定 html 或特殊符號當作頁面標題時, 會完全刪除 config/content.htm 的內容. \n \n', 'tags': '', 'url': 'QandA.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};