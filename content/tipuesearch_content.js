var tipuesearch = {"pages": [{'title': 'About', 'text': 'https://mde.tw/cpnote \n 這是國立虎尾科技大學 (National Formosa University, Taiwan) 機械設計工程系大一計算機程式課堂筆記網站。 \n 課程內容將從基本的 C 程式語言練習起，主要目的是讓學員了解編譯程式語言的特性及基本用法。 \n C 程式語言範例，包括如何利用數值分析流程，解出 mass-spring-damper 系統運動程式，並將質量的運動位移及速度，以 Gnuplot 圖表列出。 \n 接著將數值分析運算移至瀏覽器時，要求學員試著將 C 程式改寫為 Javascript， 並加上 plotly.js 進行繪圖。 \n 之後在 plotly.js 的運算繪架構下，嘗試利用 Brython 取代 Javascript。 \n 最後，希望透過一組包含網路前後端的 Python 語法程式範例，說明計算機程式語言在現階段機電資整合設計中的相關應用。 \n 下載可攜程式套件: \n basic_portable_python.7z  (下載 15MB, 解開後 55MB) \n 下載  Portable_2023_fall_1.3g_5g.7z  (需要下載密碼) \n 也可以直接使用電腦輔助設計室中 C:\\Portable_2023_fall 目錄中的檔案 \n', 'tags': '', 'url': 'About.html'}, {'title': '上課內容', 'text': '112 學年度第一學期 (2023 Fall) 機械設計工程系 - 計算機程式課程的上課內容與進度. \n 有關 Replit 與近端可攜系統的相關操作, 請參考 cadnote 中的內容:  Replit ,  近端可攜 ,  Git . \n 手機建議安裝以下 Apps: \n ChatGPT, Github mobile, Replit, Authy, Teams, Onshape \n 各 Apps 的功能與目的: \n 本課程允許學員從 ChatGPT 以 GPT-3.5 preview 對話過程取出內容, 納入個人與評分網站中. \n 手機上的 Github mobile App 可用於 Github 帳號中的 2FA 流程, 幫助 Github 阻絕不當的 robot 濫用. \n Replit App 則可讓學員利用手機 Run 倉儲網站, 並以手機或平板瀏覽器管理較少量的網站編輯. \n Authy App 允許使用者利用手機或數位手錶取得 2FA 登入流程所需的 verification code. \n Teams App 可以讓學員利用手機參與 Microsoft 線上團隊課程. \n Onshape App 則可讓使用者利用手機或平面檢視或修改協同產品設計流程中的零組件. \n 說明 Win 11 網路設定: \n 由於電腦輔助設計室可以透過單一網卡, 啟動 IPv4 網路與 IPv6 網路連線, 除了利用 Win11 設定編輯相關網路內容外, 也可以在命令搜尋區輸入 Control Panel (或控制台), 帶出控制台, 從"控制台\\網路和網際網路\\網路和共用中心\\變更介面卡設定"中的乙太網路進行設定. \n 電腦中的網路設定內容除了透過 GUI 介面查詢外, 也可以在命令搜尋區輸入 cmd (command 命令提示字元), 後利用 ipconfig /all 指令取得目前的網路設定. \n IP - Internet Protocol (網際網路協定) \n IP address (網路位址, 機械設計工程系主幹網路 IPv4 網路位址區段 140.130.17.xxx, IPv6 網路區段2001:288:6004:17:xxxx:xxxx:xxxx:xxxx) \n 各班學員在電腦輔助設計室至加退選結束之前的 暫時座位表  ( 如何利用程式即時在網頁中列出各班座位表, 並納入後續延伸應用, 是一個不錯的探討主題 ), 因為目前 Win11 電腦只有 52 台, 因此學員若自帶筆記型電腦, 則可以讓出固定式電腦, 或者選擇多人 (2-3人) 共用一台電腦 (備註: 學校不是沒有經費添購教學電腦, 而是希望讓學員提早進入共享電腦時代, 並體會如何在協同模式下進行創新產品開發:-) \n 首先說明 課程評分方式 \n Teaching Methods (教學方法): \n \n lectures (講課) \n instruction (導引) \n projects (專案) \n self-study (自學) \n \n 第一階段任務: \n 完成本節中的各項任務後, 表示你將可以登入: \n \n 學校 email 帳號郵箱 \n 個人Gmail 帳號郵箱 \n Replit IDE 系統 (以 個人Gmail 帳號登入) \n 個人 Github 系統 \n 以學校 email 帳號設定的 Onedrive 系統 \n \n 登入學校 Email 郵箱: \n 學校 Webmail:  https://mail.nfu.edu.tw  (帳號為: 學號@nfu.edu.tw, 用來通知  http://s1511.cycu.org \xa0 主機上的帳號密碼與學期成績) \n 申請或登入 Gmail: \n 假如尚未擁有 Gmail 帳號, 請自行 申請一個 Gmail 帳號 , 可用來 登入 Replit  線上 IDE 系統. \n 申請 Github 帳號: \n 請利用"學號@nfu.edu.tw"在 Github  註冊 一個帳號, 帳號名稱可以選擇 學號 , 或者用 英文姓名的三個字母縮寫加上學號 作為 Github 帳號. 帳號建立後必須進入  https://mail.nfu.edu.tw  回覆確認信件後, 才能開始使用 Github. \n 由於 Github 要求所有用戶在 2023 年底之前要使用 2FA 認證方式登入, 使用者可以在手機中先安裝 Github Mobile App, 假如只希望利用手機取得 2FA token (六個阿拉伯數字) 則可以在手機中安裝 Google Authenticator App, 若也希望利用 Apple Watch 取得 2FA token, 則可以在手機中安裝 Authy App. \n 將 Github 帳號登入所需的 2FA 認證設定於手機的 Google Authenticator 或 Authy 的流程為: \n 1. 登入 Github 後, 進入帳號 Settings - Password and authentication - Two-factor authentication 下, 若此時手機已經安裝 Github Mobile App, 且以 Github 帳號登入, 則 Preferred 2FA methods 選項中將會顯示 Github Mobile, 表示此時啟動 2FA 認證流程, 則使用者登入 Github 時, 除了必須輸入帳號密碼外, 還需要在手機的 Github Mobile App 中確認同意該使用者登入 Github, 系統才會允許登入. \n 2. 接下來, 在 Two-factor methods 下點選 Authenticator app 右方的 Add (若要變更手機所使用的 2FA token 產生程式, 則點選 Edit), 視窗中將會出現一組二維條碼, 使用者可以利用手機開啟 Google Authenticator 或 Authy 中的 account add 功能開啟相機拍二維條碼後, 將 Github 帳號登錄至手機認證套件中. \n 3. 一旦上述 Github 帳號在手機中的 2FA 認證設定完成, 使用者可以將前述內建為 Github Mobile 的 Preferred 2FA methods 改為 Authenticator app, 之後再登入 Github, 除了必須輸入對應的帳號密碼之外, 還需要輸入在特定時段內輸入手機或手錶中對應帳號所顯示的六個數字 (即 2FA token), 才能登入 Github. \n 4. 至於手機中的 Authenticator 也可以再利用 Pin 密碼、指紋或人臉辨識流程加入安全保護, 一旦手機或手錶毀損, 就可以藉以登入 Github 帳號修改設定. \n Github 帳號在計算機程式課程中的用途: \n \n 領取  Github Classroom  系統所指定的作業 ,\xa0為了整合 Replit, 本課程將放棄使用 Github Classroom, 因為 GitHub Classroom 作業倉儲的使用與 Replit 的結合應用流程, 將加重管理者的負擔, 因此本課程的評分網站將改由學員自行在 GitHub 帳號下, 建立名稱為 cp2023 的評分倉儲, 且透過 GitHub Pages 伺服器呈現網站內容. \n 建立個人網站:  https://github_帳號.github.io \n 將計算機程式課程中所編寫的程式與相關資料存入 Github 帳號下的 Gist \n \n 在 Github 中, 若需要將所建立的倉儲以 Github Pages 功能轉為網站, 可以在建立倉儲時, 以  https://github.com/mdecycu/cmsite  作為 template, 首先學習如何利用 Replit 維護網站內容, 隨後則可利用 s1511 伺服器中的帳號進行 Github 倉儲與網站內容的維護, 最後也可以在近端可攜程式環境中維護 Github 倉儲與網站內容. \n 利用 Github 建立個人網站 (透過  Github Pages ) 有以下目標: \n \n 可在網站中自我介紹 ( https://www.betterup.com/blog/how-to-introduce-yourself ) \n 可在網站中展示並介紹自己寫過的程式 \n 可在網站中簡介自己修過的課程內容 \n 可在網站中說明自己曾經參與過的專題 \n 可在網站中介紹自己未來的生涯規劃 \n \n 申請 onedrive 帳號: \n \n 登入學校郵箱 (用來收帳號建立確認信) \n 至  https://www.microsoft.com/zh-tw/education/products/office , 以 學號@nfu.edu.tw 帳號申請 OneDrive 帳號 (登入教育版 onedirve 密碼由學校電算中心寄出, 請由  https://mail.nfu.edu.tw  登入信箱查閱) \n \n onedrive 帳號在計算機程式課程中的用途: \n \n 擁有線上 5TB 的儲存空間, 可用來儲存個人所建立的流程操作 mp4 影片, 並嵌入個人網頁或作業網站中 \n 擁有線上 5TB 的儲存空間, 可用來儲存與課程相關的 教育版授權軟體  (例如:  Windows 10 64位元 22H2.4 ,  Windows 11 64位元 22H2.6 ,  windows_kms.bat ) 或可攜程式系統檔案與 電子書 \n 登入後可參與計算機程式課程 Teams (2023 計算機程式 MS Teams 代碼為: plmm43c) \n 登入後可下載計算機程式課程網站中的相關檔案 (下載連結將公布在 Teams) \n \n \n Replit 的應用: \n 當使用者利用 Gmail 帳號登入 Replit 之後, 可以選擇以 C 作為 Template, 就可以直接利用瀏覽器執行 ANSI C 程式 (也可以選擇 C++, Javascript, Python 或其他程式語言 Template 執行該程式內容, 惟在免費 Replit 帳號下, 並不開放讓使用者透過 80 與 443 以外的 Ports, 因此無法在虛實整合機電控制流程中充當 Server). \n C 程式語言是 1970 年代創建 Unix 操作系統時所發明, 而 C++ 則是在 1980 年代在 C 的基礎上加上物件導向相關的語法以及相關程式庫, 一般將 C++ 視為帶有 Class 的 C. \n C++ = C with Class (物件導向式的 C) \n Replit 則是一套可讓用戶直接在瀏覽器中協同開發各種程式套件的 IDE. \n Replit = Web-based IDE (Integrated Development Environment, 整合開發環境) \n 利用 Replit 執行 C++ \n 以下將練習如何在 Replit 以及近端編譯執行一個簡單的 C 程式: \n 可以在 Replit 與近端\xa0C:\\Portable_2023_fall (必須在檢視-顯示項目下勾選"副檔名"與"隱藏的項目") \n 雙點擊\xa0 C:\\Portable_2023_fall\\start_ipv6.bat 後, 可以在近端啟動可攜程式環境, 其中已經設定透過 Tiny C Compiler 編譯執行副檔名為 .c 的程式, 使用者可以利用 SciTE 編輯器中的 Tools - Go 功能表執行 ANSI C 程式: \n #include <stdio.h>\n\nint main(void) {\n  printf("Hello World中文\\n");\n  return 0;\n} \n 與 ChatGPT 對話範例: \n \n 目前的 C 程式如下"#include <stdio.h> int main(void) { \xa0 printf("Hello World中文\\n"); \xa0 return 0; }", 請利用重複迴圈列印出 10 行相同字串 \n 請使用繁體中文重新說明一遍 \n 請逐行詳細說明程式用法 \n 何謂 stdio.h, 為什麼要 include <stdio.h>? \n int 代表甚麼? \n 為什麼每一行一定要有";" \n main(void) 代表甚麼? \n 編譯與解譯有何不同? \n \n Exercises: \n jsliu_c_programming.pdf  (需要下載密碼) \n The Basics of C Programming  (經由校園網路或 VPN 下載) \n 請從  https://www.w3resource.com/c-programming-exercises/  網頁中自選 10 個練習範例, 分別在 Replit, Windows 與 Linux (or macOS) 中執行後, 取下執行畫面放入個人的 Github Pages 網頁 (即帳號.github.io 網站), 以 ANSIC 作為頁面標題並詳細說明每一行的程式語法. \n 延伸參考: \n https://codeforwin.org/c-programming-examples-exercises-solutions-beginners \n https://techstudy.org/clanguage/c-programming-examples \n https://www.w3schools.com/c/c_exercises.php \n https://pythonistaplanet.com/c-programming-exercises/ \n C programming  (教學影片) \n 進階自學內容: \n 主要以 C 開發的系統:  Fossil SCM  and  SQLite \n 由 C++ 發明人所寫的  A history of C++: 1979-1991 \n C++ 編譯器進展 \n Introduction to C++  (pdf files) (需要下載密碼) \n Intro to C++:  https://docs.replit.com/teaching-curriculum/intro-cpp \n C++ Core Guideline \n 2013  Moving from C to C++  (在校園網路或經由 VPN 下載) \n 2014  Advanced C and C++ Compilin g (在校園網路或經由 VPN 下載) \n 2017\xa0 Guide to Scientific Computing in C++  (在校園網路或經由 VPN 下載) \n 2018\xa0 Beginning C++17  (在校園網路或經由 VPN 下載) \n 2023  Modern C++ for Absolute Beginners  (在校園網路或經由 VPN 下載) \n 下載  msys64_20230718_cmake.7z  (需要下載密碼) \n 設法利用 Msys2 編譯 SciTE, Solvespace 與 CoppeliaSim', 'tags': '', 'url': '上課內容.html'}, {'title': 'w2-w5', 'text': '本課程所謂個人網站, 即 github帳號.github.io, 可由使用者自行設定內容, 建議長期維護後可用於研究所推甄, 或求職時使用. \n 本課程所謂評分網站, 即 github帳號.github.io/cp2023, 內容及維護歴程資料將用於課程評分. \n w2 \n 說明安裝 Apps, 如何設定網路, 查驗是否正確連網 \n 說明如何利用近端可攜系統執行 C 程式, 如何利用 ChatGPT 進行對話 \n 說明如何利用 Replit 協助編輯網頁內容 \n 說明如何 connect Replit to Github, 如何建立個人網站並利用 Replit 啟動編輯網站 \n w3 \n 有關電腦輔助設計室網路設定說明 \n 處理 .replit 與 replit.nix 中的舊 Python 設定問題 \n 說明如何為 site-個人github帳號 倉儲設定 Github Pages \n 採用 Github Classroom 建立作業倉儲的問題: \n 2023/09/26 在 1a w3 課程進行到建立各學員 site 作業時發現, 將 Replit 導入 Github 倉儲的流程中, 所產生的系統間權限設定, 必須由 Github Classroom 管理帳號 (以 cp2023 為例, 附屬在 mdecp2023 帳號下), 針對各用戶所提出的個別 Replit 權限 requests (以 site-scrum-1 倉儲為例, 只能透過 Replit 提出控管 mdecp2023/site-scrum-1 倉儲的權限)  逐一進行設定 . \n \n (上圖顯示共有三名用戶針對 mdecp2023 帳號下的 Github Classroom 倉儲提出 Replit 連線要求, 其中只有最上方用戶的 request 取得 mdecp2023/site-scrum-1 倉儲的維護權限, 其餘兩則 requests 則仍處於待審核階段. 意即若要讓各用戶整合 Replit,  每一個 Github Classroom 作業, 管理者都必須手動處理超過兩百則的 requests ) \n 為去除管理者的手動設定負擔, 決定 2023 cp 與 cad 等課程將放棄使用 Github Classroom. 改為由各學員自行針對課程建立用來評分的課程倉儲與網站 (cp 課程建立 cp2023 倉儲, cad 課程則建立 cad2023 倉儲), 直接附屬在學員的 Github 帳號下, 後續的 submodule 設定與倉儲協同權限則統一由各學員自行負責. \n \n w4-w5 \n 第四與第五週任務: \n 各學員自行建立線上考試帳號 \n 依據  112 學年度第一學期教師授課表 中的學員修課名單, 利用 Teams 中的 Excel 取學員 Github 帳號. \n 各學員自行建立 Github 評分倉儲 cp2023, 並設定 Github Pages \n 登入 Github 後, 以\xa0 https://github.com/mdecycu/cmsite \xa0作為 Template 建立 cp2023 倉儲 \n 在 Replit IDE 上啟動 cp2023 內容編輯網站, 並將改版內容推送至 Github \n 在同時登入 Github 與 Replit 的情況下, 將 Replit 帳號 connect 至 Github 帳號 \n 利用 import 將 cp2023 倉儲導入 Replit \n 設定 .replit 為 python3 main.py \n 根據 cp2023 倉儲中的 README.md 在 Shell 區執行 git submodule 與 pip install \n 以 Run 執行 main.py 啟動倉儲內容編輯網頁 \n 利用 密碼產生程式 將所選定的管理者密碼字串存入 Tool - Secrets 頁面中的 config 變數 (若無 config 環境變數設定, 動態網站登入管理者密碼將交由倉儲中的 config/config 字串進行驗證) \n 重新啟倉儲內容編輯網頁後, 以新管理者密碼登入後改版並 Convert 為靜態內容後, 在 Git 頁面中將改版內容推至 Github \n 在 Replit cp2023 專案中設定 C 程式與 Gnuplot 執行環境, 完成 上課內容中的練習 \n replit.nix  納入 gnuplot 套件 \n 蒐集牛頓第二運動定律、mass-spring-damper 系統、Euler\'s Method 數值分析相關資料 \n 將  euler_gnuplot_msd_ex1.c \xa0放入 downloads 目錄中, 以 cc\xa0euler_gnuplot_msd_ex1.c -o euler_gnuplot_msd_ex1 產生\xa0euler_gnuplot_msd_ex1 可執行檔案後, 以 ./euler_gnuplot_msd_ex1 執行 \n 最後可以在 images 目錄中得到  motion_plot.png  模擬結果 \n 參考:\xa0 https://replit.com/@scrum1/cp2023 \n jsliu_c_programming.pdf  (需要下載密碼) \n Introduction to C \xa0(經由校園網路或 VPN 下載) \n 指定 Github Classroom 作業: 取得  https://github.com/mdecp2023  帳號下的 "site-個人github帳號" 倉儲 (用於學員簡報以及期中期末評分用) \n \xa0 改由學員自行利用  https://github.com/mdecycu/cmsite  倉儲作為 template, 建立名稱為 cp2023 的評分倉儲 . \n 近端執行: \n SciTE 與 Tiny C Compiler 若要設定為 Tools - Compile 之後產生可執行檔案 a.out, cpp.properties 設定檔案必須修改如下: \n ccopts=-pedantic -Os\n#cc=g++ $(ccopts) -c $(FileNameExt) -o $(FileName).o\n#ccc=gcc $(ccopts) -c $(FileNameExt) -o $(FileName).o\ncc=tcc.exe -run \nccc=tcc.exe -o a.out\n\nmake.command=make\n#command.compile.*.c=$(ccc) -std=c99\ncommand.compile.*.c=$(ccc) $(FileNameExt)\ncommand.build.*.c=$(make.command)\ncommand.build.*.h=$(make.command)\ncommand.clean.*.c=$(make.command) clean\ncommand.clean.*.h=$(make.command) clean\n# use tcc to run .c program\n#command.go.*.c=./$(FileName)\ncommand.go.*.c=$(cc) $(FileNameExt) \n 雲端執行: \n 範例:  https://replit.com/@wcms/cjavascriptpython \n 將位於個人 Github 帳號下的 cp2023 倉儲 (建議以  https://github.com/mdecycu/cmsite  作為 template) import 進入 Replit, 以 git submodule update --init 取下子模組, 然後以 pip install flask flask_cors bs4 lxml pelican markdown gevent 安裝啟動編輯網站所需模組後, 將 config/config 密碼編碼移至 Secrets 頁面中的 config 變數後啟動. \n 修改 replit.nix 如下, 表示要安裝 gnuplot 套件: \n { pkgs }: {\n  deps = [\n    pkgs.gnuplot\n  ];\n} \n 之後將所練習的 C 程式置於 downloads 目錄中, 其執行影像結果存入 images 後, 分別在網頁中引用. \n Exercises: \n 請從\xa0 jsliu_c_programming.pdf  (需要下載密碼)與\xa0 Introduction to C \xa0(經由校園網路或 VPN 下載)電子書中擷取 C 程式範例, 分別: \n \n 在可攜程式環境中以 SciTE + Tiny C Compiler 編譯系統, 使用 Tools - Go 類編譯方式執行. \n 在可攜程式環境中以 SciTE + Tiny C Compiler 編譯系統, 使用 Tools - Compile 編譯連結後取得 a.out, 然後在命令列中以 a.out 執行. \n 在 Replit 全球資訊網 IDE 環境中的 Shell 頁面, 以 cc ex1.c 產生可執行檔案 a.out, 並以 ./a.out 執行, 或者以 cc ex1.c -o ex1 指定編譯連結後的可執行檔案名稱為 ex1 後, 以 ./ex1 執行. \n \n 最後將所選擇的 C 程式範例執行過程與相關說明內容, 整理在 個人 github 帳號下的 cp2023 倉儲網頁 中的 c_ex 頁面中. \n 參考: \n Introduction to the C programming Language ( 1 ,  2 ,  3 , or  download with password ) \n 使用者輸入兩個整數後相加的 C 程式範例: \n /* Read in two integers , add them and display the answer */\n#define _CRT_SECURE_NO_WARNINGS\n#include<stdio.h>\nint main()\n{\nint this_is_a_number1, this_is_a_number2, total;\nprintf("Please enter an integer number:\\n ");\n/* read number in */\nif (scanf("%d", &this_is_a_number1) == 1) {\n      printf("%d", this_is_a_number1);\n    } else {\n        printf("Failed to read integer.\\n");\n    }\n\nprintf("You entered %d\\n", this_is_a_number1);\nprintf("Please enter another number: \\n");\nif (scanf("%d", &this_is_a_number2) == 1) {\n      printf("%d", this_is_a_number1);\n    } else {\n      printf("Failed to read integer.\\n");\n    }\nprintf("You entered %d\\n", this_is_a_number2);\ntotal = this_is_a_number1 + this_is_a_number2;/* add two numbers */\nprintf("total is %d\\n", total);\nreturn 0;\n} \n', 'tags': '', 'url': 'w2-w5.html'}, {'title': 'setup', 'text': '利用隨身碟中的批次檔案, 設定所需的網路環境. \n cadlab_network_setup.7z \n 1_network_setup.bat (需要管理者身分執行, 才能關閉 IPv4 網路, 啟動 IPv6 網路) \n echo "disable ipv4 and setup proxy for ipv6"\nSET CurrentDir=%~dp0\n%windir%\\system32\\reg.exe import %CurrentDir%1_2023_cadlab_network_setup.reg\npowershell -executionpolicy bypass -File %CurrentDir%1_disable_ipv4.ps1\nrem mstsc /admin /v:your_server\nexit \n 其中包含以下兩個設定檔案: \n 1_2023_cadlab_network_setup.reg 用於關閉自動 Proxy 搜尋, 開啟手動設定 Proxy server. \n Windows Registry Editor Version 5.00\n\n [HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings]\n ; disable AutoDetect\n"AutoDetect"=dword:00000000\n"MigrateProxy"=dword:00000001\n; enable Proxy\n"ProxyEnable"=dword:00000001 \n"ProxyHttp1.1"=dword:00000000 \n"ProxyServer"="http://[2001:288:6004:17::69]:3128"\n"ProxyOverride"="localhost;192.168.1.0/24;<local>" \n 1_disable_ipv4.ps1 用於關閉 IPv4 網路協定, 開啟 IPv6 網路協定. \n 對 ChatGPT 提問: \n powershell "Disable-NetAdapterBinding -Name "*" -ComponentID ms_tcpip Enable-NetAdapterBinding -Name "*" -ComponentID ms_tcpip6"可以關閉 IPv4 網路, 開啟 IPv6, 如何同時設定 IPv6 所使用的兩台 DNS servers? \n 原先設定: \n Disable-NetAdapterBinding -Name "*" -ComponentID ms_tcpip\nEnable-NetAdapterBinding -Name "*" -ComponentID ms_tcpip6 \n 修改後的 1_disable_ipv4.ps1 Powershell 設定檔案: \n # 關閉 IPv4 網路\nDisable-NetAdapterBinding -Name "*" -ComponentID ms_tcpip\n\n# 啟用 IPv6 網路\nEnable-NetAdapterBinding -Name "*" -ComponentID ms_tcpip6\n\n# 設置 IPv6 網路中的兩個 DNS 伺服器 (hinet)\n$dnsServers = "2001:b000:168::1", "2001:b000:168::2"\nSet-DnsClientServerAddress -InterfaceAlias "*" -ServerAddresses $dnsServers\n \n', 'tags': '', 'url': 'setup.html'}, {'title': 'replit', 'text': 'https://docs.replit.com/ \n 將 GitHub cmsimde 倉儲導入 Replit 的方法, 請參考\xa0 https://mde.tw/cadnote/content/Replit.html \xa0中的說明. \n 備註：建立 yengm (at gm.nfu) 帳號, for Replit  Teams for Education . \n 在 Replit C 程式環境中額外納入 gnuplot 套件的 replit.nix 設定: \n { pkgs }: {\n\tdeps = [\n\t\tpkgs.sudo\n        pkgs.clang_12\n\t\tpkgs.ccls\n\t\tpkgs.gdb\n\t\tpkgs.gnumake\n        pkgs.gnuplot\n\t];\n} \n C with gnuplot: \n #include <stdio.h>\n\nint main() {\n    // Open a file to write displacement and velocity data\n    FILE *outputFile = fopen("motion_data.txt", "w");\n    if (!outputFile) {\n        fprintf(stderr, "Failed to create data file.\\n");\n        return 1;\n    }\n\n    // Simulate motion for 10 seconds and calculate displacement and velocity, while writing data to the file\n    double x = 0.2;  // Initial displacement\n    double v = 0.0;  // Initial velocity\n    double dt = 0.01; // Time step\n    double t = 0.0;  // Time\n\n    while (t <= 10.0) {\n        double acceleration = (-10.0 * x - 0.5 * v) / 1.0; // Modified system parameters here\n        v += acceleration * dt;\n        x += v * dt;\n\n        fprintf(outputFile, "%lf %lf %lf\\n", t, x, v);\n\n        t += dt;\n    }\n\n    // Close the data file\n    fclose(outputFile);\n\n    // Start a Gnuplot process using popen\n    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");\n    if (!gnuplotPipe) {\n        fprintf(stderr, "Failed to start Gnuplot.\\n");\n        return 1;\n    }\n\n    // Use Gnuplot plotting commands, specify font and output as PNG\n    fprintf(gnuplotPipe, "set terminal pngcairo enhanced font \'default,10\' size 800,400\\n");\n    fprintf(gnuplotPipe, "set output \'motion_plot.png\'\\n");\n    fprintf(gnuplotPipe, "set title \'Displacement and Velocity vs. Time\'\\n");\n    fprintf(gnuplotPipe, "set xlabel \'Time (s)\'\\n");\n    fprintf(gnuplotPipe, "set ylabel \'Displacement (m)\'\\n");\n    fprintf(gnuplotPipe, "plot \'motion_data.txt\' using 1:2 with lines lw 2 title \'Displacement\', \\\n                             \'motion_data.txt\' using 1:3 with lines lw 2 title \'Velocity\'\\n");\n\n    // Close the Gnuplot process\n    fprintf(gnuplotPipe, "exit\\n");\n    pclose(gnuplotPipe);\n\n    return 0;\n}\n \n 在選擇 Python 作為 Language 的 repl 專案中, cc 已經內建, 若要加裝 gnuplot 套件則可在 replit.nix 設定檔案中加入 pkgs.gnuplot: \n { pkgs }: {\n    deps = [\n      pkgs.gnuplot\n    ];\n} \n \n', 'tags': '', 'url': 'replit.html'}, {'title': 'MSD', 'text': '學習要點(以下各項提問, 可以透過與 ChatGPT 的對話, 取得相關參考內容): \n 何謂微分方程式(Differential Equations)?何謂常微分方程式(Ordinary Differential Equations)? \n 為何要解出系統運動方程式(System Equations of Motion)的結果? \n 何謂牛頓運動定律? \n 工程師通常可以採甚麼方法解常微分方程式? \n 何謂數值分析(Numerical Analysis)?與計算機程式有何關聯? \n 工程師為什麼要在網頁中呈現系統的分析過程? \n 何謂 Euler\'s Method? \n 為什麼可以利用 Euler\'s Method 解常微分方程式? \n 何謂 Runge-Kutta Method? \n Euler\'s Method 與 Runge-Kutta Method 有沒有關聯? \n 可以將 Euler\'s Method 視為一階 Runge-Kutta Method 嗎? \n Runge-Kutta Method 是如何推導出來的? \n 為什麼要利用計算機程式語言, 採數值分析法解系統的運動方程式? \n 工程師在設計產品之前的理論分析重要嗎? \n Mass-Spring-Damper 是一個典型的物理模型, 由質量-彈簧-阻尼器等三個元件組成, 若將彈簧其拉力與變形量成正比, 若假設阻尼器的阻力大小則與其受力方向的速度成正比, 根據牛頓運動定律, 就可以從物理模型的自由體圖導入系統的運動方程式. 接下來就要利用計算機程式, 解此一系統的微分方程式. \n 計算機程式課程主要從基本的 C 語法開始, 設法利用數值分析法解簡單的  mass-spring-damper  運動方程式, 並將質量運動的位移與速度, 以 Gnuplot 畫出後, 將 C 程式改寫為 Javascript, 以便能直接將質量運動的位移與速度圖顯示在網頁中. \n \n in png: \n \n in  MathJax  v3: \n \\(m.\\ddot{x}(t) = -c.\\dot{x}(t) - k.x(t)\\) \n Solve  spring-mass-damper problem in Matlab.pdf  (需要下載密碼) \n 接續 Javascript 基本數值分析方法的學習, 將採 Brython 語法改寫後, 希望能直接在網頁中透過類似 Python 的語法, 進行數值分析運算與繪圖. 最後再將 Brython 語法轉為 CPython 程式, 讓使用者可以直接在電腦操作系統中進行數值分析與繪圖. \n 上述從 C, Javascript, Brython 到 Python 的範例練習, 主要目的是希望呈現最基本的網際機電資整合系統設計流程, 讓機械設計工程師能夠將所設計的產品 3D 零組件完成後, 轉入機電模擬系統 (CoppeliaSim, Webots 或 Robodk), 設法編寫或運用既有的全球資訊網前後端程式架構, 結合近端的實體模型與全球資訊網端的機電控制系統模擬, 進行機械、電子、電機與資工領域工程師協同產品設計. \n 由於 CoppeliaSim、Webots 以及 Solvespace 都是採用 C++ 程式語言編寫, 且都屬開放源程式套件, 使用者若要更進一步了解此類工具的設計與配置方法, 可以自行透過進階內容學習. \n Euler\'s Method( 教學影片 ,  說明1 ,  說明2  in English): \n https://tutorial.math.lamar.edu/classes/de/eulersmethod.aspx \n \n 針對常微分方程式: \\(\\frac{dy}{dx}=f(x,y)\\) \n 假如 \\(x_{n+1}\\) 與 \\(x_{n}\\) 之間的距離非常接近, 則 \\(\\frac{y_{n+1}-y_{n}}{x_{n+1}-x_{n}}\\approx f(x_{n},y_{n})\\) \n 若取 \\(h=x_{n+1}-x_{n}\\) 作為 x 座標在每一次計算過程的增量值. \n 則可以在已知此一常微分方程式的起始值之後, 逐一透過 h 增量值計算此常微分方程式在各 x 座標點上的對應值: \n \\(y_{n+1}-y_{n}\\approx f(x_{n},y_{n})h\\) \n \n \n \n \n 此外, 只要在網頁中導入: \n <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>\n<script src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script> \n 就可以利用 MathJax v3 的 \\(\\LaTeX\\) 語法, 輸入所需要呈現的數學方程式. \n Runge-Kutta Method : \n Developments in Runge–Kutta Method to Solve Ordinary Differential Equations \n https://www.me.psu.edu/cimbala/Learning/General/Runge_Kutta_Technique.pdf \n NUMERICAL SOLUTION OF ORDINARY DIFFERENTIAL EQUATIONS  (from one of the authors) \n \n 將 euler_gnuplot_msd_ex1.c 存入 downloads 目錄, 然後在 replit.nix 中進行 C 與 gnuplot 套件的設置: \n replit.nix 設定內容: \n { pkgs }: {\n    deps = [\n  pkgs.qtile\n  pkgs.sudo\n  pkgs.clang_12\n        pkgs.ccls\n        pkgs.gdb\n        pkgs.gnumake\n        pkgs.gnuplot\n    ];\n} \n euler_gnuplot_msd_ex1.c 程式內容: \n // 包含標準輸出入程式庫的標頭文件\n#include <stdio.h>\n\n// 主函式\nint main() {\n    // Open a file to write displacement and velocity data\n    FILE *outputFile = fopen("motion_data.txt", "w");\n    if (!outputFile) {\n        fprintf(stderr, "Failed to create data file.\\n");\n        return 1;\n    }\n\n    // Simulate motion for 10 seconds and calculate displacement and velocity, while writing data to the file\n    double x = 0.2;  // Initial displacement\n    double v = 0.0;  // Initial velocity\n    double dt = 0.01; // Time step\n    double t = 0.0;  // Time\n\n    while (t <= 10.0) {\n        double acceleration = (-10.0 * x - 0.5 * v) / 1.0; // Modified system parameters here\n        v += acceleration * dt;\n        x += v * dt;\n\n        fprintf(outputFile, "%lf %lf %lf\\n", t, x, v);\n\n        t += dt;\n    }\n\n    // Close the data file\n    fclose(outputFile);\n\n    // Start a Gnuplot process using popen\n    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");\n    if (!gnuplotPipe) {\n        fprintf(stderr, "Failed to start Gnuplot.\\n");\n        return 1;\n    }\n\n    // Use Gnuplot plotting commands, specify font and output as PNG\n    fprintf(gnuplotPipe, "set terminal pngcairo enhanced font \'default,10\' size 800,400\\n");\n    fprintf(gnuplotPipe, "set output \'./../images/motion_plot.png\'\\n");\n    fprintf(gnuplotPipe, "set title \'Displacement and Velocity vs. Time\'\\n");\n    fprintf(gnuplotPipe, "set xlabel \'Time (s)\'\\n");\n    fprintf(gnuplotPipe, "set ylabel \'Displacement (m)\'\\n");\n    fprintf(gnuplotPipe, "plot \'motion_data.txt\' using 1:2 with lines lw 2 title \'Displacement\', \\\n                             \'motion_data.txt\' using 1:3 with lines lw 2 title \'Velocity\'\\n");\n\n    // Close the Gnuplot process\n    fprintf(gnuplotPipe, "exit\\n");\n    pclose(gnuplotPipe);\n\n    return 0;\n}\n \n 在 Shell 工具頁面: \n cd downloads \n cc euler_gnuplot_msd_ex1.c \n 經過編譯與連結後取得 a.out \n 然後利用 ./a.out 執行, 就可以在 images 目錄下得到 mass-spring-damper 微分運動方程式採 Euler\'s Method 模擬數值分析結果, motion_plot.png: \n \n 假如程式中需要使用數學函數運算則可 #include <math.h>, 並在編譯時納入 -lm, 亦即連結數程式庫. \n cc ex_with_math.c -lm -o ex_with_math \n 然後以 ./ex_with_math 執行', 'tags': '', 'url': 'MSD.html'}, {'title': 'clang', 'text': '利用 cc 執行編譯 C程式, 請參考\xa0 https://replit.com/@wcms/cjavascriptpython?v=1#README.txt \xa0 \n 以下為與 clang 有關的進階自學內容: \n clang 與其他開源編譯器的比較 \n 安裝 clang (801MB) 與 valgrind (91.8MB): \n Ubuntu: \n sudo apt update && sudo apt upgrade \n sudo apt install clang \n sudo apt install valgrind \n Windows: \n 安裝  WSL  之後, 再使用 Ubuntu 方法安裝 clang 與 valgrind \n References: \n https://cs.indstate.edu/wiki/index.php/C_Programming_-_Getting_Started \n https://en.wikipedia.org/wiki/Clang \n https://valgrind.org/', 'tags': '', 'url': 'clang.html'}, {'title': '編譯範例', 'text': '以下為 C++ 原始碼進階自學編譯範例: \n 先建立 msys64 可攜系統: \n 下載  https://www.msys2.org/  安裝後, 將 C:\\msys64_20230718, 複製到 Y:\\msys64_20230718 \n 套件名稱帶有 mingw-w64-x86_64 表示用於 MinGW 64 bit 操作系統: \n 更新系統核心組件: \n pacman -Syu \n 安裝基本 C/C++ 編譯與開發工具: \n pacman -S mingw-w64-x86_64-toolchain \n 安裝 CMake \n pacman -S mingw-w64-x86_64-cmake \n 下載  msys64_20230718_cmake.7z  (需要下載密碼) \n 編譯 Solvespace: \n Solvespace \xa0是一套小型的開放源參數式電腦輔助設計與繪圖軟體. \n git clone --recurse-submodules https://github.com/solvespace/solvespace.git cd solvespace git checkout v3.1 mkdir build cd build cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release mingw32-make \n 下載  solvespace_src_compiled.7z  (需要下載密碼) \n 利用 MSYS2 編譯 SciTE 編輯器: \n 從  https://www.scintilla.org/SciTE.html  下載 Scite 原始碼. \n cd scintilla\\win32 \n mingw32-make \n get\xa0Scintilla.dll and\xa0SciLexer.dll under\xa0 scintilla\\bin \n cd scite\\win32 \n mingw32-make \n get\xa0SciTE.exe under scite\\bin \n need extra\xa0libgcc_s_seh-1.dll,\xa0libstdc++-6.dll and\xa0libwinpthread-1.dll along with  Scintilla.dll and\xa0 SciLexer.dll\xa0 to execute SciTE.exe \n 下載  SciTE537_src_compiled.7z  (需要下載密碼) \n SciTE properties files:  SciTE_properties_files.7z', 'tags': '', 'url': '編譯範例.html'}, {'title': '課程評分', 'text': '課程評分: \n 線上測驗、期中網站與簡報、期末網站與簡報. \n 線上測驗: \n 建立帳號後 ( 請將密碼寫入手機的備忘錄 ), 每週不定時進行. \n 期中網站評分與簡報: \n 期中考前兩週開始進行. \n 期末網站評分與簡報: \n 期末考前兩週開始進行. \n 期中成績計算: \n 期中考與之前各週線上測驗成績平均 \n 學期成績計算: \n (期中成績與之後各週線上測驗成績平均)*60%+(期中網站與簡報成績)*20%+(期末網站與簡報成績)*20% \n', 'tags': '', 'url': '課程評分.html'}, {'title': '課程主題', 'text': '\n 認識數位環境與資源 \n 工程師的計算機程式能力 \n 開發程式工具 (解決特定問題) \n 課程總結 \n \n', 'tags': '', 'url': '課程主題.html'}, {'title': '數位環境與資源', 'text': '1. 認識數位環境與資源 \n 企業所提供的數位資源: \n ChatGPT  (Google Bard and Perplexity AI) \n AutoDesk  (Dassault Solidworks and CATIA) \n Siemens Solid Edge  (NX) \n Engineering Student Softwares \n PTC Creo \n Onshape for Education \n Ansys  (Comsol and SIMULIA Abaqus) \n Office 365 for Education \n Github \n Github Classroom \n Replit \n RoboDK \n CoppeliaSim \n Webots \n 學校所提供的數位資源 \n 軟體  ( 使用校園網路或 VPN 下載) \n Windows 10 64位元 22H2.4 \n Windows 11 64位元 22H2.6 \n windows_kms.bat \n Office 2019 64位元 \n office_2019_kms.bat \n Office 2016 64位元 \n office_2016_kms.bat \n Visual Studio Pro 2015 英文版 \n MATLAB for Windows 2023a 64位元 \n Introduction to MATLAB for Engineers and Scientists \n Introduction to Partial Differential Equations with MATLAB \n MATLAB for Linux 2022a 64位元 \n MATLAB 安裝說明 \n MATLAB Guideline \n 電子資源 \n 數位學習網:\xa0 https://www.nfu.edu.tw/zh/elearning \xa0 \n eBooks and Journals:  https://link.springer.com \xa0 \n Introducing eBooks \n 綜合工程第一館網路配置 \n 機械設計工程系 \n IPv4 網段 (140.130.17.0/24) \n Gateway: 140.130.17.254 \n DNS: 140.130.17.3 \n IPv6 網段 (2001:288:6004:17::/32) \n Gateway: 2001:288:6004:17::254 \n DNS: 2001:288:6004:17::3 \n 有線網路 \n 無線網路 \n 綜一館電腦資源 \n 可借用電腦教室 \n 磁區設定與所安裝軟體 \n 工作站中的伺服器 \n https://s1511.cycu.org \xa0 \n Introducing UNIX and Linux \n 電腦輔助設計室 \n 兩種不同規格的電腦 \n 協同產品設計室 \n 虛實手足球系統 \n Arduino \n CoppeliaSim \n RoboDK \n 手足球檯 \n Rasperry Pi \n Webcam \n', 'tags': '', 'url': '數位環境與資源.html'}, {'title': '上課系統', 'text': 'ChatGPT  (從  https://chat.openai.com/auth/login  以 Gmail 帳號登入, 也可在手機安裝 ChatGPT App) \n Office 365 for Education \n Github \n Github Classroom \n Replit \n Welcome to Replit \n 進階自學系統 \n CoppeliaSim \n 2023.03 最新版本為 4.5.1 \n 4.4.0 則發布於 2022.09 \n ZeroMQ Remote API for CoppeliaSim \n WebSocket plugin for CoppeliaSim \n three.js Frontend \n RoboDK \n 2023.07 最新的版本為 \xa0 Download 5.6.2 \n Download 5.2.2 \xa0 則發布於 2021.03.22 \n RoboDK 源自 \xa0 https://www.parallemic.org/RoKiSim.html \n 在計算機程式課程中, 我們可以利用 RoboDK 中的 Robot 控制來練習 Python 各種語法的應用, 其中也將牽涉一些線性代數 (Linear Algebra, \xa0 1 , \xa0 2 ) 與幾何 (Geometry, \xa0 1 , \xa0 2 , \xa0 3 ) 的應用. \n', 'tags': '', 'url': '上課系統.html'}, {'title': '程式能力', 'text': '2. 工程師的計算機程式能力 \n C, Javascript, Brython, Python \n Windows 64 位元操作系統下的工具: \n basic_portable_python.7z  (下載 15MB, 解開後 55MB) \n 下載  Portable_2023_fall_1.3g_5g.7z  (需要下載密碼) \n Github Classroom 作業倉儲: \n 從 github classroom 取得個人課程倉儲 \n 將以\xa0 https://github.com/mdecycu/cmsite \xa0作為個人作業起始 template \n 以下為簡單的線上 Python 程式執行區: \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n \n', 'tags': '', 'url': '程式能力.html'}, {'title': '程式語言', 'text': '機械設計工程師在甚麼情況下需要使用 C 解決問題? \n 機械設計工程師在甚麼情況下需要使用 Javascript 解決問題? \n Brython 程式語言一般被用在那些情況下? \n 機械設計工程師在甚麼情況下需要使用 Python 解決問題? \n', 'tags': '', 'url': '程式語言.html'}, {'title': 'ANSI C', 'text': 'jsliu_c_programming.pdf  (需要下載密碼) \n Introduction to C \xa0(經由校園網路或 VPN 下載) \n 1999 C Programming - The Essentials for Engineers and Scientists  (經由校園網路或 VPN 下載) \n 2004 Beginning C  (經由校園網路或 VPN 下載) \n 2013 Advanced Topics in C  (經由校園網路或 VPN 下載) \n 2013 Pointers in C  (經由校園網路或 VPN 下載) \n 2015 Learn to Program with C  (經由校園網路或 VPN 下載) \n 2015 C Quick Syntax Reference  (經由校園網路或 VPN 下載) \n 2015 Beginning C for Arduino, Second Edition  (經由校園網路或 VPN 下載) \n 2016 Practical C  (經由校園網路或 VPN 下載) \n 2017 C Recipes  (經由校園網路或 VPN 下載) \n 2019 Numerical C \xa0(經由校園網路或 VPN 下載) \n 2019 Modern C Quick Syntax Reference  (經由校園網路或 VPN 下載)\xa0 \n 2020 Computer Programming in C for Beginners  (經由校園網路或 VPN 下載) \n 2020 Practical Numerical C Programming  (經由校園網路或 VPN 下載) \n 2020 Beginning C  (經由校園網路或 VPN 下載) \n 2020 Robot Adventures in Python and C  (經由校園網路或 VPN 下載) \n 2021 Pointers in C Programming  (經由校園網路或 VPN 下載) \n 2022 C and Python Applications  (經由校園網路或 VPN 下載) \n 本頁課程內容的 實際應用 . \n \n ANSI C 程式語言所謂具有可攜性, 是甚麼意思? \n ANSI C 被定位為低階程式語言, 是甚麼意思? \n 可以用 ANSIＣ加上Gnuplot 繪圖 ( Gnuplot Documentation ), 解一個質量與兩個並聯的彈簧與阻尼器連接到牆上, 且起始條件為執行被往後拉 0.2 m 後放開的常微分方程式, 並劃出該質量被釋放之後 10 秒之內的位移以及速度圖嗎? \n 請詳細解釋所謂的 Euler\'s Method, 並且能不能將 Gnuplot 繪圖指令直接與 C 程式合併, 執行程式後直接產生位移與速度 png 圖? \n 能不能將 gnuplot 繪圖程式碼與 Euler\'s Method 解微分方程式的程式碼結合在一起, 執行時直接就能繪出質量的位移與速度圖, 而且請在繪圖時直接使用位於 Y:\\ 的 wqy-microhei.ttc 中文字形, 否則無法在圖面上顯示出正確的中文. \n 請將質量的位移以及速度繪製在同一個 png 圖檔上 \n \n 利用 Euler\'s Method 解 mass-spring-damper 系統的運動方程式, 並採 ANSI C 與 Gnuplot 執行運算及繪圖. \n euler_mass_spring_damper_gnuplot.7z \n #include <stdio.h>\n\nint main() {\n    // 開啟文件以寫入位移和速度數據\n    FILE *outputFile = fopen("motion_data.txt", "w");\n    if (!outputFile) {\n        fprintf(stderr, "無法創建數據文件。\\n");\n        return 1;\n    }\n\n    // 模擬運動 10 秒並計算位移和速度，同時將數據寫入文件\n    double x = 0.2;  // 初始位移\n    double v = 0.0;  // 初始速度\n    double dt = 0.01; // 時間步長\n    double t = 0.0;  // 時間\n\n    while (t <= 10.0) {\n        double acceleration = (-10.0 * x - 0.5 * v) / 1.0; // 這裡修改了系統的參數\n        v += acceleration * dt;\n        x += v * dt;\n\n        fprintf(outputFile, "%lf %lf %lf\\n", t, x, v);\n\n        t += dt;\n    }\n\n    // 關閉數據文件\n    fclose(outputFile);\n\n    // 使用popen啟動Gnuplot進程\n    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");\n    if (!gnuplotPipe) {\n        fprintf(stderr, "無法啟動Gnuplot。\\n");\n        return 1;\n    }\n\n    // 使用Gnuplot繪圖指令，指定字型文件和輸出PNG\n    fprintf(gnuplotPipe, "set terminal png font \'Y:/wqy-microhei.ttc,10\' size 800,400\\n");\n    fprintf(gnuplotPipe, "set output \'motion_plot.png\'\\n");\n    fprintf(gnuplotPipe, "set title \'位移和速度 vs. 時間\'\\n");\n    fprintf(gnuplotPipe, "set xlabel \'時間 (s)\'\\n");\n    fprintf(gnuplotPipe, "set ylabel \'位移 (m)\'\\n");\n    fprintf(gnuplotPipe, "plot \'motion_data.txt\' using 1:2 with lines lw 2 title \'位移\', \\\n                             \'motion_data.txt\' using 1:3 with lines lw 2 title \'速度\'\\n");\n\n    // 關閉Gnuplot進程\n    fprintf(gnuplotPipe, "exit\\n");\n    pclose(gnuplotPipe);\n\n    return 0;\n}\n \n 運算結果: \n \n 假如拿掉 Damping: \n \n 假如將 C 改寫為 Javascript, 並且使用 plotly.js 取代 Gnuplot, 可使用下列 html + Javascript 執行運算: \n <!DOCTYPE html>\n<html>\n<head>\n    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>\n</head>\n<body>\n    <div id="plotDamping"></div>\n    <div id="plotNoDamping"></div>\n\n    <script>\n        // Function to simulate motion using Euler\'s method\n        function simulateMotion(MASS, SPRING_K, DAMPING_C, containerId) {\n            // Define simulation parameters\n            const totalTime = 10.0;\n            const dt = 0.01;\n            \n            // Initialize data arrays\n            const timeData = [];\n            const displacementData = [];\n            const velocityData = [];\n\n            // Initial conditions\n            let t = 0.0;\n            let x = 0.2;\n            let v = 0.0;\n\n            while (t <= totalTime) {\n                timeData.push(t);\n                displacementData.push(x);\n                velocityData.push(v);\n\n                // Calculate acceleration based on parameters\n                const acceleration = (-SPRING_K * x - DAMPING_C * v) / MASS;\n                v += acceleration * dt;\n                x += v * dt;\n\n                t += dt;\n            }\n\n            // Plot the data\n            const displacementTrace = {\n                x: timeData,\n                y: displacementData,\n                mode: \'lines\',\n                name: \'Displacement\'\n            };\n\n            const velocityTrace = {\n                x: timeData,\n                y: velocityData,\n                mode: \'lines\',\n                name: \'Velocity\'\n            };\n\n            const layout = {\n                title: `Displacement and Velocity vs. Time (${containerId === \'plotDamping\' ? \'With Damping\' : \'No Damping\'})`,\n                xaxis: { title: \'Time (s)\' },\n                yaxis: { title: \'Displacement (m) / Velocity\' }\n            };\n\n            const plotData = [displacementTrace, velocityTrace];\n\n            Plotly.newPlot(containerId, plotData, layout);\n        }\n\n        // Simulate motion with damping\n        simulateMotion(1.0, 10.0, 0.5, \'plotDamping\');\n\n        // Simulate motion without damping\n        simulateMotion(1.0, 10.0, 0.0, \'plotNoDamping\');\n    </script>\n</body>\n</html> \n 模擬運算結果為: \n \n \n \n \n \n \n \n \n \n 假如採用 C 以 Runge-Kutta 解 mass-spring-damper 系統運動模擬: \n /* Runge Kutta for a set of first order differential equations */\n// http://mde.tw/cad2020/content/W7.html\n  \n#include <stdio.h>\n#include <math.h>\n  \n#define N 2 /* number of first order equations */\n#define dist 0.01 /* stepsize in t*/\n#define MAX 10.0 /* max for t */\n  \nFILE *output; /* internal filename */\nFILE *output1; /* internal filename */\n// 利用 pipe 呼叫 gnuplot 繪圖\nFILE *pipe;\n  \nvoid runge4(double x, double y[], double step); /* Runge-Kutta function */\ndouble f(double x, double y[], int i); /* function for derivatives */\n  \nvoid main(){\n  \n  double t, y[N];\n  int j;\n  \n  output=fopen("osc.dat", "w"); /* external filename */\n  output1=fopen("osc1.dat", "w"); /* external filename */\n  \n  y[0]=0.2; /* initial position */\n  y[1]=0.0; /* initial velocity */\n  \n  //fprintf(output, "0\\t%f\\n", y[0]);\n  \n  for (j=1; j*dist<=MAX ;j++) /* time loop */{\n  \n    t=j*dist;\n    runge4(t, y, dist);\n    fprintf(output, "%f\\t%f\\n", t, y[0]);\n    fprintf(output1, "%f\\t%f\\n", t, y[1]);\n  }\n  \n  fclose(output);\n  fclose(output1);\n  \n  pipe = popen("gnuplot -persist","w");\n  //fprintf(pipe,"set term png enhanced font \\"v:/fireflysung.ttf\\" 18 \\n");\n  fprintf(pipe,"set term png enhanced font \\"y:/wqy-microhei.ttc\\" 18 \\n");\n  //fprintf(pipe,"set yrange [68:70]\\n");\n  fprintf(pipe,"set output \\"rk_mass_spring_damper.png\\"\\n");\n  fprintf(pipe, "plot \\"osc.dat\\" title \\"位移\\" with lines, \\"osc1.dat\\" title \\"速度\\" with lines\\n");\n  fprintf(pipe,"quit\\n");\n \n  fprintf(pipe,"quit\\n");\n  pclose(pipe);\n}\n  \nvoid runge4(double x, double y[], double step){\n  \n  double h=step/2.0, /* the midpoint */\n  t1[N], t2[N], t3[N], /* temporary storage arrays */\n  k1[N], k2[N], k3[N],k4[N]; /* for Runge-Kutta */\n  int i;\n  \n  for (i=0;i<N;i++){\n  \n    t1[i]=y[i]+0.5*(k1[i]=step*f(x,y,i));\n  }\n  \n  for (i=0;i<N;i++){\n  \n    t2[i]=y[i]+0.5*(k2[i]=step*f(x+h, t1, i));\n  }\n  \n  for (i=0;i<N;i++){\n  \n    t3[i]=y[i]+ (k3[i]=step*f(x+h, t2, i));\n  }\n  \n  for (i=0;i<N;i++){\n  \n    k4[i]= step*f(x+step, t3, i);\n  }\n  \n  for (i=0;i<N;i++){\n  \n    y[i]+=(k1[i]+2*k2[i]+2*k3[i]+k4[i])/6.0;\n  }\n}\n  \ndouble f(double x, double y[], int i){\n  \n  if (i==0)\n    x=y[1]; /* derivative of first equation */\n  if (i==1)\n    x=-10*y[0]-0.5*y[1];\n  return x;\n} \n 模擬結果為: \n \n 假如拿掉 Damper, 則結果為: \n \n 假如將 Runge-Kutta C 改寫為 Javascript, 並在網頁中直接以 plotly.js 畫圖: \n  引入 Plotly.js  \n \n \n \n  用於顯示運動繪圖的 div  \n \n \n \n \n 上列 Javascript 模擬運算的超文件為: \n <!-- 引入 Plotly.js -->\n<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>\n<!-- 用於顯示運動繪圖的 div -->\n<div id="rkmotionPlot"></div>\n<script>\nconst N = 2; // number of first order equations\nconst dist = 0.01; // stepsize in t\nconst MAX = 10.0; // max for t\n\nlet outputDataDamping = []; // to store data for displacement with damping\nlet output1DataDamping = []; // to store data for velocity with damping\nlet outputDataNoDamping = []; // to store data for displacement without damping\nlet output1DataNoDamping = []; // to store data for velocity without damping\n\nfunction runge4(x, y, step, damping = false) {\n    let h = step / 2.0;\n    let t1 = [];\n    let t2 = [];\n    let t3 = [];\n    let k1 = [];\n    let k2 = [];\n    let k3 = [];\n    let k4 = [];\n\n    for (let i = 0; i < N; i++) {\n        t1[i] = y[i] + 0.5 * (k1[i] = step * f(x, y, i, damping));\n    }\n\n    for (let i = 0; i < N; i++) {\n        t2[i] = y[i] + 0.5 * (k2[i] = step * f(x + h, t1, i, damping));\n    }\n\n    for (let i = 0; i < N; i++) {\n        t3[i] = y[i] + (k3[i] = step * f(x + h, t2, i, damping));\n    }\n\n    for (let i = 0; i < N; i++) {\n        k4[i] = step * f(x + step, t3, i, damping);\n    }\n\n    for (let i = 0; i < N; i++) {\n        y[i] += (k1[i] + 2 * k2[i] + 2 * k3[i] + k4[i]) / 6.0;\n    }\n}\n\nfunction f(x, y, i, damping = false) {\n    if (i === 0) {\n        return y[1]; // derivative of first equation (velocity)\n    }\n    if (i === 1) {\n        if (damping) {\n            return -10 * y[0] - 0.5 * y[1]; // with damping\n        } else {\n            return -10 * y[0]; // without damping\n        }\n    }\n    return 0;\n}\n\nfunction simulateMotion() {\n    let t = 0.0;\n    let yDamping = [0.2, 0.0]; // initial position and velocity with damping\n    let yNoDamping = [0.2, 0.0]; // initial position and velocity without damping\n\n    for (let j = 1; j * dist <= MAX; j++) {\n        t = j * dist;\n        runge4(t, yDamping, dist, true); // simulate with damping\n        runge4(t, yNoDamping, dist, false); // simulate without damping\n        outputDataDamping.push([t, yDamping[0]]);\n        output1DataDamping.push([t, yDamping[1]]);\n        outputDataNoDamping.push([t, yNoDamping[0]]);\n        output1DataNoDamping.push([t, yNoDamping[1]]);\n    }\n\n    // Plot the data using Plotly.js\n    plotMotion();\n}\n\nfunction plotMotion() {\n    // Create traces for displacement and velocity with damping\n    const displacementTraceDamping = {\n        x: outputDataDamping.map((dataPoint) => dataPoint[0]),\n        y: outputDataDamping.map((dataPoint) => dataPoint[1]),\n        mode: \'lines\',\n        name: \'Displacement (Damping)\',\n    };\n\n    const velocityTraceDamping = {\n        x: output1DataDamping.map((dataPoint) => dataPoint[0]),\n        y: output1DataDamping.map((dataPoint) => dataPoint[1]),\n        mode: \'lines\',\n        name: \'Velocity (Damping)\',\n    };\n\n    // Create traces for displacement and velocity without damping\n    const displacementTraceNoDamping = {\n        x: outputDataNoDamping.map((dataPoint) => dataPoint[0]),\n        y: outputDataNoDamping.map((dataPoint) => dataPoint[1]),\n        mode: \'lines\',\n        name: \'Displacement (No Damping)\',\n    };\n\n    const velocityTraceNoDamping = {\n        x: output1DataNoDamping.map((dataPoint) => dataPoint[0]),\n        y: output1DataNoDamping.map((dataPoint) => dataPoint[1]),\n        mode: \'lines\',\n        name: \'Velocity (No Damping)\',\n    };\n\n    const data = [\n        displacementTraceDamping,\n        velocityTraceDamping,\n        displacementTraceNoDamping,\n        velocityTraceNoDamping,\n    ];\n\n    // Layout configuration\n    const layout = {\n        title: \'Displacement and Velocity vs. Time\',\n        xaxis: {\n            title: \'Time (s)\',\n        },\n        yaxis: {\n            title: \'Displacement / Velocity\',\n        },\n    };\n\n    // Plot the graph\n    Plotly.newPlot(\'rkmotionPlot\', data, layout);\n}\n\n// Call the simulation function when the page loads\nwindow.onload = simulateMotion;\n</script> \n \n 最後, 將 Javascript 改為可以讓使用者選擇模擬參數以及起始條件: \n \n 質量 (m):   \n 彈簧常數 (k):   \n 阻尼係數 (c):   \n 初始位移 (x0):   \n 初始速度 (v0):   \n 模擬時間 (endTime):   \n 模擬運動 (有阻尼)   模擬運動 (無阻尼) \n  請注意!! 每一個 plotly.js 繪圖必須有各自的 id 名稱  \n \n \n \n \n 上列可輸入模擬參數與起始條件的 html 程式碼: \n <div><label for="mass">質量 (m):</label> <input id="mass" type="number" value="1.0"></div>\n<div><label for="springConstant">彈簧常數 (k):</label> <input id="springConstant" type="number" value="10.0"></div>\n<div><label for="dampingCoefficient">阻尼係數 (c):</label> <input id="dampingCoefficient" type="number" value="0.5"></div>\n<div><label for="initialDisplacement">初始位移 (x0):</label> <input id="initialDisplacement" type="number" value="0.2"></div>\n<div><label for="initialVelocity">初始速度 (v0):</label> <input id="initialVelocity" type="number" value="0.0"></div>\n    \n<div><label for="endTime">模擬時間 (endTime):</label> <input id="endTime" type="number" value="10.0"></div>\n    \n<p><button id="withDamping">模擬運動 (有阻尼)</button> <button id="withoutDamping">模擬運動 (無阻尼)</button></p>\n<!-- 請注意!! 每一個 plotly.js 繪圖必須有各自的 id 名稱 -->\n<div id="rkmotionPlot2"></div>\n<script>// <![CDATA[\n// 函數包裝，避免變數衝突\n    (function () {\n        const N = 2; // number of first order equations\n        const dist = 0.01; // stepsize in t\n        //const MAX = 10.0; // max for t\n        const endTime = parseFloat(document.getElementById(\'endTime\').value);\n\n        // for debuging\n        const mass = parseFloat(document.getElementById(\'mass\').value);\n        const springConstant = parseFloat(document.getElementById(\'springConstant\').value);\n        const dampingCoefficient = parseFloat(document.getElementById(\'dampingCoefficient\').value);\n        const initialDisplacement = parseFloat(document.getElementById(\'initialDisplacement\').value);\n        const initialVelocity = parseFloat(document.getElementById(\'initialVelocity\').value);\n        /*\n            console.log(\'Mass:\', mass);\n            console.log(\'Spring Constant:\', springConstant);\n            console.log(\'Damping Coefficient:\', dampingCoefficient);\n            console.log(\'Initial Displacement:\', initialDisplacement);\n            console.log(\'Initial Velocity:\', initialVelocity);\n         */\n\n\n        let outputDataWithDamping = []; // to store data for displacement and velocity with damping\n        let outputDataWithoutDamping = []; // to store data for displacement and velocity without damping\n\n        function runge4(x, y, step, damping = false) {\n            let h = step / 2.0;\n            let t1 = [];\n            let t2 = [];\n            let t3 = [];\n            let k1 = [];\n            let k2 = [];\n            let k3 = [];\n            let k4 = [];\n\n            for (let i = 0; i < N; i++) {\n                t1[i] = y[i] + 0.5 * (k1[i] = step * f(x, y, i, damping));\n            }\n\n            for (let i = 0; i < N; i++) {\n                t2[i] = y[i] + 0.5 * (k2[i] = step * f(x + h, t1, i, damping));\n            }\n\n            for (let i = 0; i < N; i++) {\n                t3[i] = y[i] + (k3[i] = step * f(x + h, t2, i, damping));\n            }\n\n            for (let i = 0; i < N; i++) {\n                k4[i] = step * f(x + step, t3, i, damping);\n            }\n\n            for (let i = 0; i < N; i++) {\n                y[i] += (k1[i] + 2 * k2[i] + 2 * k3[i] + k4[i]) / 6.0;\n            }\n        }\n\n        function f(x, y, i, damping = false) {\n            if (i === 0) {\n                return y[1]; // derivative of first equation (velocity)\n            }\n            if (i === 1) {\n                if (damping) {\n                    return (-springConstant * y[0] - dampingCoefficient * y[1])/mass; // with damping\n                } else {\n                    return (-springConstant * y[0])/mass; // without damping\n                }\n            }\n            return 0;\n        }\n\n        function simulateMotionWithDamping() {\n            let t = 0.0;\n            let y = [\n                parseFloat(document.getElementById(\'initialDisplacement\').value),\n                parseFloat(document.getElementById(\'initialVelocity\').value)\n            ];\n\n            outputDataWithDamping = []; // Clear previous data\n            simulateMotion(t, y, true); // Simulate with damping\n        // for debuging, yes we got the values\n        //console.log(\'outputDataWithDamping:\', outputDataWithDamping); \n            plotMotion(true); // Plot with damping\n        }\n\n        function simulateMotionWithoutDamping() {\n            let t = 0.0;\n            let y = [\n                parseFloat(document.getElementById(\'initialDisplacement\').value),\n                parseFloat(document.getElementById(\'initialVelocity\').value)\n            ];\n\n            outputDataWithoutDamping = []; // Clear previous data\n            simulateMotion(t, y, false); // Simulate without damping\n        // for debuging, we got the values\n        //console.log(\'outputDataWithoutDamping:\', outputDataWithoutDamping); \n            plotMotion(false); // Plot without damping\n        }\n\n        // for debuging\n        function simulateMotion(t, y, damping = false) {\n            for (let j = 1; j * dist <= endTime; j++) {\n                t = j * dist;\n                runge4(t, y, dist, damping);\n                if (damping) {\n                    outputDataWithDamping.push([t, y[0], y[1]]);\n                } else {\n                    outputDataWithoutDamping.push([t, y[0], y[1]]);\n                }\n\n                // Log the data for debugging\n                //console.log(\'t:\', t);\n                //console.log(\'y:\', y);\n            }\n                // we do get the array values\n                //console.log(\'outputDataWithDamping:\', outputDataWithDamping);\n                //console.log(\'outputDataWithoutDamping:\', outputDataWithoutDamping); \n        }\n\n\n        function plotMotion(damping = false) {\n            let data = [];\n            if (damping) {\n                // Create traces for displacement and velocity with damping\n                data.push({\n                    x: outputDataWithDamping.map((dataPoint) => dataPoint[0]),\n                    y: outputDataWithDamping.map((dataPoint) => dataPoint[1]),\n                    mode: \'lines\',\n                    name: \'Displacement (Damping)\',\n                });\n                data.push({\n                    x: outputDataWithDamping.map((dataPoint) => dataPoint[0]),\n                    y: outputDataWithDamping.map((dataPoint) => dataPoint[2]),\n                    mode: \'lines\',\n                    name: \'Velocity (Damping)\',\n                });\n            } else {\n                // Create traces for displacement and velocity without damping\n                data.push({\n                    x: outputDataWithoutDamping.map((dataPoint) => dataPoint[0]),\n                    y: outputDataWithoutDamping.map((dataPoint) => dataPoint[1]),\n                    mode: \'lines\',\n                    name: \'Displacement (No Damping)\',\n                });\n                data.push({\n                    x: outputDataWithoutDamping.map((dataPoint) => dataPoint[0]),\n                    y: outputDataWithoutDamping.map((dataPoint) => dataPoint[2]),\n                    mode: \'lines\',\n                    name: \'Velocity (No Damping)\',\n                });\n            }\n\n            // Layout configuration\n            const layout = {\n                title: \'Displacement and Velocity vs. Time\',\n                xaxis: {\n                    title: \'Time (s)\',\n                },\n                yaxis: {\n                    title: \'Displacement / Velocity\',\n                },\n            };\n\n            // Plot the graph\n            Plotly.newPlot(\'rkmotionPlot2\', data, layout);\n        }\n\n        // for debuging\n        //console.log(outputDataWithDamping);\n        //console.log(outputDataWithoutDamping);\n\n        // Call the simulation function when the page loads\n        //simulateMotionWithDamping(); // Initial simulation with damping\n        // Attach an event listener to the button\n        document.getElementById("withDamping").addEventListener("click", function () {\n            //console.log("Button with damping clicked.");\n            simulateMotionWithDamping();\n        });\n\n        document.getElementById("withoutDamping").addEventListener("click", function () {\n            //console.log("Button without damping clicked.");\n            simulateMotionWithoutDamping();\n        });\n\n    })();\n// ]]></script> \n \n Question: 如何讓模擬變數表單值變更後, 無需重新 refresh 頁面即可繪出運算結果? \n Exercises: \n 請將上述各階段的數值分析結果與 理論分析解 ( Wikipedia )的結果, 以圖示進行比較, 並以表列出各點的運算誤差.', 'tags': '', 'url': 'ANSI C.html'}, {'title': 'on_linux', 'text': '\n', 'tags': '', 'url': 'on_linux.html'}, {'title': 'on_windows', 'text': '何謂編譯? \n 利用 Tiny C Compiler 編譯 \n 利用 MSYS2 中的 GNU C Compiler 編譯 \n 利用 Visual Studio C Compiler 編譯 \n', 'tags': '', 'url': 'on_windows.html'}, {'title': '開發工具', 'text': '3. 開發程式工具 (解決特定問題) \n References: \n https://www.codecademy.com/resources/blog/20-code-challenges/ \n https://www.freecodecamp.org/news/python-projects-for-beginners/ \xa0 \n', 'tags': '', 'url': '開發工具.html'}, {'title': '程式專案', 'text': '機械設計工程師專業的計算機程式初學者被要求必須透過開發一組程式來解決問題, 比較適合朝那些方向進行此一專案? \n 初階 - 中階 \n https://www.freecodecamp.org/news/python-projects-for-beginners/ \xa0 \n \n 進階自學系統 \n CoppeliaSim \n 2023.03 最新版本為 4.5.1 \n 4.4.0 則發布於 2022.09 \n ZeroMQ Remote API for CoppeliaSim \n WebSocket plugin for CoppeliaSim \n three.js Frontend \n RoboDK \n 2023.07 最新的版本為 \xa0 Download 5.6.2 \n Download 5.2.2 \xa0 則發布於 2021.03.22 \n RoboDK 源自 \xa0 https://www.parallemic.org/RoKiSim.html \n 在計算機程式課程中, 我們可以利用 RoboDK 中的 Robot 控制來練習 Python 各種語法的應用, 其中也將牽涉一些線性代數 (Linear Algebra, \xa0 1 , \xa0 2 ) 與幾何 (Geometry, \xa0 1 , \xa0 2 , \xa0 3 ) 的應用. \n', 'tags': '', 'url': '程式專案.html'}, {'title': '課程座次', 'text': '2023.09.11 從  112 學年度第一學期教師授課表 中, 擷取各班修課名單如下: \n cp2023_a_studno.txt \n cp2023_b_studno.txt \n cad2023_a_studno.txt \n cad2023_b_studno.txt \n 若以 Python 讀取上列學員名單, 並依照順序排入電腦輔助設計室後, 可得到各班在開學週時的座位表: \n with open("cp2023_a_studno.txt", encoding="utf-8") as file:\n    data = file.read().splitlines()\n#print(data)\n# Define the number of elements to print in each row\nelements_per_row = 9\n# Iterate through the list and print elements\nfor i, item in enumerate(data, 1):\n    print(item, end=\'\\t\')  # Print the element followed by a tab character\n    if i % elements_per_row == 0:\n        # If we\'ve printed 9 elements, start a new line\n        print()\n    \n    \n \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n 設一甲 計算機程式座位表: \n \n \n \n 設一乙 計算機程式座位表: \n \n \n \n \n 設二甲 電腦輔助設計與實習座位表: \n \n \n \n \n 設二乙 電腦輔助設計與實習座位表: \n \n \n \n \n 上列 Brython 程式碼範例: \n <div id="brython_div1"></div>\n<p>\n<script type="text/python3">\nfrom browser import html, document\nbrython_div = document["brython_div1"]\n\ndata = open("https://mde.tw/cpnote/downloads/cp2023_a_studno.txt").read().splitlines()\n#print(data)\n# Define the number of elements to print in each row\nelements_per_row = 9\nrow = 1\n# Iterate through the list and print elements\nfor i, item in enumerate(data, 1):\n    if i % elements_per_row == 1:\n        brython_div <= "第" + str(row) + "列: "\n        row = row + 1\n    #print(item, end=\'\\t\')  # Print the element followed by a tab character\n    brython_div <= item + "  "\n    if i % elements_per_row == 0:\n        # If we\'ve printed 9 elements, start a new line\n        #print()\n        brython_div <= html.BR()\n</script> \n 由於  cp2023_a_studno.txt  為 w1 從  https://qry.nfu.edu.tw/studlist.php?selyr=1121&seqno=0813  取得修課學員後存檔後運用, 但是課程進行中, 學員加退選後該資料可能產生變動, 因此若後續要利用修課學員名單建立相關網際連結時, 必須設法直接從  https://qry.nfu.edu.tw/studlist.php?selyr=1121&seqno=0813  讀取資料後進行運用. \n', 'tags': '', 'url': '課程座次.html'}, {'title': '課程總結', 'text': '4. 課程總結 \n 錄製簡報影片 \n mp4 \n 編寫總結報告 \n pdf \n 將課程摘要納入個人領英 \n https://www.linkedin.com/ \n', 'tags': '', 'url': '課程總結.html'}, {'title': 'QandA', 'text': '如何利用 Github 建立網站? \n Click me \n \n \n \n', 'tags': '', 'url': 'QandA.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};